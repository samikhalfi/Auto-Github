{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/almostafanahas/qodly-Code-QR/index.tsx", "file_contents": "import QrCode from './QrCode';\nexport default {\n  QrCode,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/almostafanahas/qodly-Code-QR/QrCode.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { QRCodeSVG } from 'qrcode.react';\nimport { IQrCodeProps } from './QrCode.config';\nconst QrCode: FC<IQrCodeProps> = ({\n  link,\n  level,\n  style,\n  className,\n  classNames = [],\n  QrfgColor,\n  QrbgColor,\n  Qrsize,\n  includeMargin,\n  src,\n  heightImage,\n  widthImage,\n  excavate,\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames, \"w-fit\")}>\n      <QRCodeSVG value={link}\n      imageSettings={{\n        src: `${src}`,\n        x: undefined,\n        y: undefined,\n        height: heightImage,\n        width: widthImage,\n        excavate: excavate,\n      }}\n      level={level} fgColor={QrfgColor} bgColor={QrbgColor} size={Qrsize} includeMargin={includeMargin} />\n    </div>\n  );\n};\nexport default QrCode;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/almostafanahas/qodly-Code-QR/QrCode.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdQrCode2 } from 'react-icons/md';\nimport QrCodeSettings, { BasicSettings } from './QrCode.settings';\nexport default {\n  craft: {\n    displayName: 'QrCode',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(QrCodeSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'QrCode',\n    exposed: true,\n    icon: MdQrCode2,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    Qrsize: 128,\n    QrfgColor: '#000000',\n    QrbgColor: '#FFFFFF',\n    level: 'L',\n    includeMargin: false,\n    iterableChild: true,\n    excavate: false,\n    heightImage: 20,\n    widthImage: 20,\n  },\n} as T4DComponentConfig<IQrCodeProps>;\nexport interface IQrCodeProps extends webforms.ComponentProps {\n  link: string;\n  level: string;\n  Qrsize: number;\n  QrfgColor: string;\n  QrbgColor: string;\n  includeMargin: boolean;\n  src: string;\n  heightImage: number;\n  widthImage: number;\n  excavate: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/almostafanahas/qodly-Code-QR/QrCode.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { QRCodeSVG } from 'qrcode.react';\nimport { IQrCodeProps } from './QrCode.config';\nconst QrCode: FC<IQrCodeProps> = ({\n  link,\n  level,\n  style,\n  className,\n  classNames = [],\n  QrfgColor,\n  QrbgColor,\n  Qrsize,\n  includeMargin,\n  src,\n  heightImage,\n  widthImage,\n  excavate,\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState(() => link);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      setValue(v || link);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <QRCodeSVG value={value}\n      imageSettings={{\n        src: `${src}`,\n        x: undefined,\n        y: undefined,\n        height: heightImage,\n        width: widthImage,\n        excavate: excavate,\n      }}\n      level={level} fgColor={QrfgColor} bgColor={QrbgColor} size={Qrsize} includeMargin={includeMargin}/>\n    </div>\n  );\n};\nexport default QrCode;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/almostafanahas/qodly-Code-QR/QrCode.settings.ts", "file_contents": "import { DEFAULT_SETTINGS, ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'link',\n    label: 'Link',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'Qrsize',\n    label: 'QR Size',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 128,\n  },\n  {\n    key: 'level',\n    label: 'Level',\n    type: ESetting.SELECT,\n    defaultValue: 'L',\n    options:[\n      {\n        label: \"L\",\n        value: \"L\"\n      },\n      {\n        label: \"M\",\n        value: \"M\"\n      },\n      {\n        label: \"Q\",\n        value: \"Q\"\n      },\n      {\n        label: \"H\",\n        value: \"H\"\n      },\n    ]\n  },\n  {\n    key: 'includeMargin',\n    label: 'Margin',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst colorSettings: TSetting[] = [\n  {\n    key: 'QrfgColor',\n    label: 'Font',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: \"#000000\",\n  },\n  {\n    key: 'QrbgColor',\n    label: 'Background',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: \"#FFFFFF\",\n  },\n];\nconst cssSettings: TSetting[] = [\n  {\n    key: 'cssClass',\n    label: 'CSS Class',\n    type: ESetting.CSSCLASS_SELECTOR,\n  },\n];\nconst imageSettings: TSetting[] = [\n  {\n    key: 'src',\n    label: 'Image Source',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'heightImage',\n    label: 'Height',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 20,\n  },\n  {\n    key: 'widthImage',\n    label: 'Width',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 20,\n  },\n  {\n    key: 'excavate',\n    label: 'Excavate',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst layoutSettings: TSetting[] = [\n  {\n    key: 'layout',\n    label: 'Layout',\n    type: ESetting.LAYOUT,\n  },\n]\nconst borderSettings: TSetting[] = [\n  {\n    key: 'qrBorders',\n    label: 'QrBorders',\n    type: ESetting.BORDERS,\n  },\n]\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'appearance',\n    'style',\n    'color',\n    'background',\n    'font',\n    'borders',\n    'borderRadius',\n  ),\n  {\n    key: 'css',\n    label: 'CSS',\n    type: ESetting.GROUP,\n    components: cssSettings,\n  },\n  {\n    key: 'qrColors',\n    label: 'QR Colors',\n    type: ESetting.GROUP,\n    components: colorSettings,\n  },\n  {\n    key: 'imageSettings',\n    label: 'Image Settings',\n    type: ESetting.GROUP,\n    components: imageSettings,\n  },\n  {\n    key: 'layout',\n    label: 'Layout',\n    type: ESetting.GROUP,\n    components: layoutSettings,\n  },\n  {\n    key: 'borders',\n    label: 'Borders',\n    type: ESetting.GROUP,\n    components: borderSettings,\n  },\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly-pdfViewer/index.tsx", "file_contents": "import PdfViewer from './PdfViewer';\nexport default {\n  PdfViewer,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly-pdfViewer/PdfViewer.build.tsx", "file_contents": "import { FC } from 'react';\nimport cn from 'classnames';\nimport { IPdfViewerProps } from './PdfViewer.config';\nimport { useEnhancedNode } from '@ws-ui/webform-editor';\nimport { FaFilePdf, FaRegFilePdf } from 'react-icons/fa';\nconst PdfViewer: FC<IPdfViewerProps> = ({ datasource, style, className, classNames = [] }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames,'flex items-center justify-center border-dashed border border-gray-400 h-10')}>\n      {datasource ? (\n        <div className=\"flex items-center\">\n          <FaFilePdf className=\"mr-2\" /> PDF File...\n        </div>\n      ) : (\n        <div className=\"flex items-center\">\n          <FaRegFilePdf className=\"mr-2\" /> No files to display...\n        </div>\n      )}\n    </div>\n  );\n};\nexport default PdfViewer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly-pdfViewer/PdfViewer.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaRegFilePdf } from 'react-icons/fa6';\nimport PdfViewerSettings, { BasicSettings } from './PdfViewer.settings';\nexport default {\n  craft: {\n    displayName: 'PdfViewer',\n    sanityCheck: {\n      keys: [{ name: 'datasource', require: true, isDatasource: true }],\n    },\n    requiredFields: {\n      keys: ['datasource'],\n      all: false,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(PdfViewerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'PdfViewer',\n    exposed: true,\n    icon: FaRegFilePdf,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n    ],\n    datasources: {\n      accept: ['blob', 'string'],\n    },\n  },\n  defaultProps: {\n  },\n} as T4DComponentConfig<IPdfViewerProps>;\nexport interface IPdfViewerProps extends webforms.ComponentProps {\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly-pdfViewer/PdfViewer.render.tsx", "file_contents": "import { FC, useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { IPdfViewerProps } from './PdfViewer.config';\nimport { useRenderer, useSources } from '@ws-ui/webform-editor';\nconst PdfViewer: FC<IPdfViewerProps> = ({ style, className, classNames = [] }) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<any>(null);\n  const [pdfSource, setPdfSource] = useState<any>(null);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<any>();\n      setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  useEffect(() => {\n    const getPdf = async () => {\n      if (!value) return;\n      let url = null;\n      try {\n        const val = JSON.parse(value);\n        const resp = await fetch(val.__deferred.uri);\n        const arrayBuffer = await resp.arrayBuffer();\n        const blob = new Blob([arrayBuffer], { type: 'application/pdf' });\n        url = URL.createObjectURL(blob);\n        setPdfSource(url);\n      } catch (error) {\n        console.error('Error fetching PDF:', error);\n      }\n    };\n    getPdf();\n  }, [value]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"w-full h-full border border-gray-300\">\n        {pdfSource ? (\n          <iframe src={pdfSource} width=\"100%\" height=\"100%\" />\n        ) : value ? (\n          <iframe src={value} width=\"100%\" height=\"100%\" />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center text-gray-500\">\n            No files to display...\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default PdfViewer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly-pdfViewer/PdfViewer.settings.ts", "file_contents": "import { TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [];\nconst Settings: TSetting[] = [\n  ...load(DEFAULT_SETTINGS).filter('style.overflow', 'background', 'color', 'font'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow', 'background', 'color', 'font'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly_timeline/HorizontalTimeLine.tsx", "file_contents": "import { FC, useEffect } from 'react';\nimport cn from 'classnames';\nimport {\n  useSources,\n  useEnhancedEditor,\n  selectResolver,\n  useEnhancedNode,\n  useDataLoader,\n  unsubscribeFromDatasource,\n  EntityProvider,\n} from '@ws-ui/webform-editor';\nimport { Element } from '@ws-ui/craftjs-core';\ninterface IHorizontalTimelineProps extends webforms.ComponentProps {\n  variant?: string;\n}\nconst HorizontalTimeline: FC<IHorizontalTimelineProps> = ({\n  iterator,\n  variant,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const {\n    connectors: { connect },\n  } = useEnhancedNode((node) => {\n    return { linkedNodes: node.data.linkedNodes };\n  });\n  const {\n    sources: { datasource: ds, currentElement: currentDs },\n  } = useSources();\n  const { entities, fetchIndex } = useDataLoader({ source: ds });\n  useEffect(() => {\n    fetchIndex(0);\n  }, []);\n  useEffect(() => {\n    if (!ds) {\n      return;\n    }\n    const cb = () => {\n      ds.getValue('length').then((_length) => {\n        fetchIndex(0);\n      });\n    };\n    ds.addListener('changed', cb);\n    return () => {\n      unsubscribeFromDatasource(ds, cb);\n    };\n  }, [ds, fetchIndex]);\n  return (\n    <>\n      <div ref={connect} style={style} className={cn(className, classNames)}>\n        <div className=\"flex \">\n          {variant == 'value1' &&\n            entities.map((item, index) => (\n              <div className=\"relative flex items-end \" key={item.__KEY}>\n                <div className=\"absolute text-sm mb-2 ml-3\">\n                  <EntityProvider\n                    index={index}\n                    selection={ds}\n                    current={currentDs?.id}\n                    iterator={iterator}\n                  >\n                    <Element\n                      id=\"item\"\n                      className=\"h-full w-full\"\n                      role=\"item\"\n                      is={resolver.StyleBox}\n                      deletable={false}\n                      canvas\n                    />\n                  </EntityProvider>\n                </div>\n                {index !== entities.length - 1 && (\n                  <div className=\"flex w-40 bg-gray-200 relative left-3 h-0.5 dark:bg-gray-400\"></div>\n                )}\n                <div className=\"mt-3 sm:pe-8\">\n                  <div className=\"absolute top-1 left-1.5 z-10 flex items-center border-gray-200  border-2 shadow-2xl justify-center w-4 h-4 bg-gray-400  rounded-full ring-0 ring-white dark:bg-blue-900 sm:ring-8 dark:ring-gray-900 \"></div>\n                </div>\n              </div>\n            ))}\n          {variant == 'value2' &&\n            entities.map((item, index) => (\n              <div className=\"relative flex items-end top-12\" key={item.__KEY}>\n                <div className=\"absolute text-sm mb-2 ml-3\">\n                  <EntityProvider\n                    index={index}\n                    selection={ds}\n                    current={currentDs?.id}\n                    iterator={iterator}\n                  >\n                    <Element\n                      id=\"item1\"\n                      className=\"h-full w-full\"\n                      role=\"item1\"\n                      is={resolver.StyleBox}\n                      deletable={false}\n                      canvas\n                    />\n                  </EntityProvider>\n                </div>\n                <div className=\"absolute text-sm top-4 ml-3\">\n                  <EntityProvider\n                    index={index}\n                    selection={ds}\n                    current={currentDs?.id}\n                    iterator={iterator}\n                  >\n                    <Element\n                      id=\"item2\"\n                      className=\"h-full w-full\"\n                      role=\"item2\"\n                      is={resolver.StyleBox}\n                      deletable={false}\n                      canvas\n                    />\n                  </EntityProvider>\n                </div>\n                {index !== entities.length - 1 && (\n                  <div className=\"flex w-40 bg-gray-200 relative left-3 h-0.5 dark:bg-gray-400\" ></div>\n                )}\n                <div className=\"mt-3 sm:pe-8\">\n                  <div className=\"absolute top-1 left-2.5 z-10 flex items-center justify-center border-gray-200 border-2 shadow-2xl w-4 h-4 bg-gray-400  rounded-full ring-0 ring-white dark:bg-blue-900 sm:ring-8 dark:ring-gray-900 \"></div>\n                </div>\n              </div>\n            ))}\n        </div>\n      </div>\n    </>\n  );\n};\nexport default HorizontalTimeline;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly_timeline/index.tsx", "file_contents": "import Timeline from './Timeline';\nexport default {\n  Timeline,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly_timeline/Timeline.build.tsx", "file_contents": "import { FC } from 'react';\nimport cn from 'classnames';\nimport {\n  IteratorProvider,\n  selectResolver,\n  useEnhancedEditor,\n  useEnhancedNode,\n} from '@ws-ui/webform-editor';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nimport { ITimelineProps } from './Timeline.config';\nconst Timeline: FC<ITimelineProps> = ({\n  datasource,\n  orientation,\n  variant,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const {\n    connectors: { connect },\n  } = useEnhancedNode((node) => {\n    return { linkedNodes: node.data.linkedNodes };\n  });\n  return (\n    <>\n      <div ref={connect} style={style} className={cn(className, classNames)}>\n        {datasource ? (\n          <div>\n            {(variant === 'value1' || variant === '') && orientation === 'Vertical' ? (\n              <div className=\"flex items-center mb-8 relative\">\n                <div className=\"w-3 h-3 bg-gray-400 rounded-full \"></div>\n                <div className=\"h-8 w-0.5 bg-gray-400 absolute top-5  ml-0.5 left-0.5\"></div>\n                <div className=\"text-gray-700 px-2 py-1 rounded-md text-sm\">\n                  <IteratorProvider>\n                    <Element\n                      id=\"item\"\n                      className=\"h-full w-full\"\n                      role=\"item\"\n                      is={resolver.StyleBox}\n                      deletable={false}\n                      canvas\n                    />\n                  </IteratorProvider>\n                </div>\n              </div>\n            ) : (\n              variant === 'value1' &&\n              orientation === 'Horizontal' && (\n                <div className=\"relative flex items-end top-12\">\n                  <div className=\"absolute text-sm mb-2 ml-3\">\n                    <IteratorProvider>\n                      <Element\n                        id=\"item\"\n                        className=\"h-full w-full\"\n                        role=\"item\"\n                        is={resolver.StyleBox}\n                        deletable={false}\n                        canvas\n                      />\n                    </IteratorProvider>\n                  </div>\n                  <div className=\"flex w-40 bg-gray-200 relative left-3 h-0.5 dark:bg-gray-400\"></div>\n                  <div className=\"mt-3 sm:pe-8\">\n                    <div className=\"absolute top-1 left-1.5 z-10 flex items-center border-gray-200  border-2 shadow-2xl justify-center w-4 h-4 bg-gray-400  rounded-full ring-0 ring-white dark:bg-blue-900 sm:ring-8 dark:ring-gray-900 \"></div>\n                  </div>\n                </div>\n              )\n            )}\n            {variant == 'value2' && orientation == 'Vertical' && (\n              <div className=\"flex flex-col items-start\">\n                <div className=\"flex items-center mb-8 relative\">\n                  <div className=\" text-gray-700 px-2 py-1 rounded-md text-sm\">\n                    <IteratorProvider>\n                      <Element\n                        id=\"item1\"\n                        className=\"h-full w-full\"\n                        role=\"item1\"\n                        is={resolver.StyleBox}\n                        deletable={false}\n                        canvas\n                      />\n                    </IteratorProvider>\n                  </div>\n                  <div className=\"flex-grow flex justify-center\">\n                    <div className=\" w-3 h-3 bg-gray-400 rounded-full flex items-center justify-center mb-2\"></div>\n                    <div className=\"h-8 w-0.5 bg-gray-400 absolute top-5  \"></div>\n                  </div>\n                  <div className=\" text-gray-700 px-2 py-1 rounded-md text-sm\">\n                    <IteratorProvider>\n                      <Element\n                        id=\"item2\"\n                        className=\"h-full w-full\"\n                        role=\"item2\"\n                        is={resolver.StyleBox}\n                        deletable={false}\n                        canvas\n                      />\n                    </IteratorProvider>\n                  </div>\n                </div>\n              </div>\n            )}\n            {variant == 'value2' && orientation == 'Horizontal' && (\n              <div className=\"relative flex items-end top-12\">\n                <div className=\"absolute text-sm mb-2 ml-3\">\n                  <IteratorProvider>\n                    <Element\n                      id=\"item1\"\n                      className=\"h-full w-full\"\n                      role=\"item1\"\n                      is={resolver.StyleBox}\n                      deletable={false}\n                      canvas\n                    />\n                  </IteratorProvider>\n                </div>\n                <div className=\"absolute text-sm top-4 ml-3\">\n                  <IteratorProvider>\n                    <Element\n                      id=\"item2\"\n                      className=\"h-full w-full\"\n                      role=\"item2\"\n                      is={resolver.StyleBox}\n                      deletable={false}\n                      canvas\n                    />\n                  </IteratorProvider>\n                </div>\n                <div className=\"flex w-40 bg-gray-200 relative left-3 h-0.5 dark:bg-gray-400\"></div>\n                <div className=\"mt-3 sm:pe-8\">\n                  <div className=\"absolute top-1 left-2.5 z-10 flex items-center justify-center border-gray-200 border-2 shadow-2xl w-4 h-4 bg-gray-400  rounded-full ring-0 ring-white dark:bg-blue-900 sm:ring-8 dark:ring-gray-900 \"></div>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n            <BsFillInfoCircleFill className=\"mb-1 h-8 w-8\" />\n            <p>Please attach a datasource</p>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\nexport default Timeline;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly_timeline/Timeline.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaTimeline } from 'react-icons/fa6';\nimport TimelineSettings, { BasicSettings } from './Timeline.settings';\nexport default {\n  craft: {\n    rules: {\n      canMoveIn: () => true,\n      canMoveOut: () => true,\n    },\n    sanityCheck: {\n      keys: [{ name: 'datasource', require: true, isDatasource: true }],\n    },\n    requiredFields: {\n      keys: ['datasource'],\n      all: false,\n    },\n    displayName: 'Timeline',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(TimelineSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Timeline',\n    exposed: true,\n    icon: FaTimeline,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n    ],\n    datasources: {\n      accept: ['entitysel', 'entity'],\n    },\n  },\n  defaultProps: {\n    style: {\n      height: '150px',\n    },\n    iterable: true,\n    name: '',\n    variant: 'value1',\n    orientation: 'Vertical',\n  },\n} as T4DComponentConfig<ITimelineProps>;\nexport interface ITimelineProps extends webforms.ComponentProps {\n  name?: string;\n  variant?: string;\n  orientation?: 'Vertical' | 'Horizontal' | '';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly_timeline/Timeline.render.tsx", "file_contents": "import { FC, useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { useSources, useEnhancedNode } from '@ws-ui/webform-editor';\nimport { CgDanger } from 'react-icons/cg';\nimport { ITimelineProps } from './Timeline.config';\nimport VerticalTimeLine from './components/VerticalTimeLine';\nimport HorizontalTimeLine from './components/HorizontalTimeLine';\nconst Timeline: FC<ITimelineProps> = ({\n  orientation,\n  iterator,\n  variant,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode((node) => {\n    return { linkedNodes: node.data.linkedNodes };\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const [_value, setValue] = useState<any[]>([]);\n  useEffect(() => {\n    if (!ds) return;\n    const fetchData = async () => {\n      const value = await ds.getValue();\n      setValue(value);\n    };\n    fetchData();\n    ds.addListener('changed', fetchData);\n    return () => ds.removeListener('changed', fetchData);\n  }, [ds]);\n  return (\n    <>\n      {ds?.initialValue !== undefined ? (\n        <div ref={connect} style={style} className={cn(className, classNames)}>\n          {orientation == 'Vertical' && (\n            <VerticalTimeLine\n              iterator={iterator}\n              variant={variant}\n              style={style}\n              className={className}\n              classNames={classNames}\n            ></VerticalTimeLine>\n          )}\n          {orientation == 'Horizontal' && (\n            <HorizontalTimeLine\n              iterator={iterator}\n              variant={variant}\n              style={style}\n              className={className}\n              classNames={classNames}\n            ></HorizontalTimeLine>\n          )}\n        </div>\n      ) : (\n        <div className=\"flex flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <CgDanger className=\"mb-1 h-8 w-8\" />\n          <p>Missing a datasource</p>\n        </div>\n      )}\n    </>\n  );\n};\nexport default Timeline;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly_timeline/Timeline.settings.ts", "file_contents": "import { DEFAULT_ITERATOR, ESetting, ETextFieldModifier, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { LuFlipVertical2, LuFlipHorizontal2 } from 'react-icons/lu';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'variant',\n    label: 'Variant',\n    type: ESetting.SELECT,\n    options: [\n      { label: 'variant1', value: 'value1' },\n      { label: 'variant2', value: 'value2' },\n    ],\n    defaultValue: 'value1',\n  },\n  {\n    label: 'Orientation',\n    type: ESetting.RADIOGROUP,\n    key: 'orientation',\n    multiple: false,\n    options: [\n      {\n        value: 'Vertical',\n        tooltip: 'Vertical',\n        icon: LuFlipVertical2,\n      },\n      {\n        value: 'Horizontal',\n        tooltip: 'Horizontal',\n        icon: LuFlipHorizontal2,\n      },\n    ],\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'DataSource',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'iterator',\n    label: 'Iterate with',\n    type: ESetting.TEXT_FIELD,\n    modifier: ETextFieldModifier.ITERATOR,\n    placeholder: DEFAULT_ITERATOR,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('dataAccess', 'background', 'appearance', 'font'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('dataAccess', 'style.overflow', 'background', 'appearance', 'font'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/AyaBengherifa/Qodly_timeline/VerticalTimeLine.tsx", "file_contents": "import {\n  useSources,\n  useEnhancedEditor,\n  selectResolver,\n  useEnhancedNode,\n  useDataLoader,\n  unsubscribeFromDatasource,\n  EntityProvider,\n} from '@ws-ui/webform-editor';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\nimport { FC, useEffect } from 'react';\ninterface IVerticalTimelineProps extends webforms.ComponentProps {\n  icon?: string;\n  variant?: string;\n}\nconst VerticalTimeline: FC<IVerticalTimelineProps> = ({\n  iterator,\n  variant,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const {\n    connectors: { connect },\n  } = useEnhancedNode((node) => {\n    return { linkedNodes: node.data.linkedNodes };\n  });\n  const {\n    sources: { datasource: ds, currentElement: currentDs },\n  } = useSources();\n  const { entities, fetchIndex } = useDataLoader({\n    source: ds,\n  });\n  useEffect(() => {\n    fetchIndex(0);\n  }, []);\n  useEffect(() => {\n    if (!ds) {\n      return;\n    }\n    const cb = () => {\n      ds.getValue('length').then((_length) => {\n        fetchIndex(0);\n      });\n    };\n    ds.addListener('changed', cb);\n    return () => {\n      unsubscribeFromDatasource(ds, cb);\n    };\n  }, [ds, fetchIndex]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"flex flex-col items-start\">\n        {variant == 'value1' &&\n          entities.map((item, index) => (\n            <div className=\"flex items-center mb-2 relative\" key={item.__KEY}>\n              <div className=\"w-4 h-4 bg-gray-400 rounded-full mr-3 shadow-2xl border- border-gray-200\"></div>\n              {index !== entities.length - 1 && (\n                <line\n                  className=\"w-0.5 h-full bg-gray-400 absolute left-2\"\n                  style={{\n                    top: 'calc(50% + 10px)',\n                    height: 'calc(100% + 20px)',\n                  }}\n                ></line>\n              )}\n              <div className=\"text-sm\">\n                <EntityProvider\n                  index={index}\n                  selection={ds}\n                  current={currentDs?.id}\n                  iterator={iterator}\n                >\n                  <Element\n                    id=\"item\"\n                    className=\"h-full w-full\"\n                    role=\"item\"\n                    is={resolver.StyleBox}\n                    deletable={false}\n                    canvas\n                  />\n                </EntityProvider>\n              </div>\n            </div>\n          ))}\n        {variant == 'value2' &&\n          entities.map((item, index) => (\n            <div className=\"flex items-start mb-2 relative\" key={item.__KEY}>\n              <div className=\"text-sm mr-2\">\n                <EntityProvider\n                  index={index}\n                  selection={ds}\n                  current={currentDs?.id}\n                  iterator={iterator}\n                >\n                  <Element\n                    id=\"item1\"\n                    className=\"h-full w-full\"\n                    role=\"item1\"\n                    is={resolver.StyleBox}\n                    deletable={false}\n                    canvas\n                  />\n                </EntityProvider>\n              </div>\n              <div className=\"flex-grow flex justify-center items-center\">\n                <div className=\"w-4 h-4 bg-gray-400 rounded-full flex items-center justify-center \">\n                  <span\n                    className={cn(\n                      'fa fd-component',\n                      classNames,\n                      'w-2 h-2 fill-current text-gray-500 hover:text-gray-700 flex items-center justify-center',\n                    )}\n                  ></span>\n                </div>\n                {index !== entities.length - 1 && (\n                <div\n                className=\"absolute bg-gray-400 w-0.5 \"\n                style={{\n                  height: 'calc(100% + 8px)', \n                  top: '70%',\n                  transform: 'translateY(-50%)',\n                }}\n              />\n                )}\n              </div>\n              <div className=\"text-sm\">\n                <EntityProvider\n                  index={index}\n                  selection={ds}\n                  current={currentDs?.id}\n                  iterator={iterator}\n                >\n                  <Element\n                    id=\"item2\"\n                    className=\"flex items-end justify-end h-full w-full\"\n                    role=\"item2\"\n                    is={resolver.StyleBox}\n                    deletable={false}\n                    canvas\n                  />\n                </EntityProvider>\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\nexport default VerticalTimeline;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/AudioPlayer.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState } from 'react';\nimport { IAudioPlayerProps } from './AudioPlayer.config';\nimport { BsFillPlayFill, BsFillVolumeUpFill } from 'react-icons/bs';\nimport { TbRewindBackward10, TbRewindForward10 } from 'react-icons/tb';\nconst AudioPlayer: FC<IAudioPlayerProps> = ({\n  autoPlay,\n  loop,\n  muted,\n  style,\n  className,\n  fastBackForward,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const [isInputVisible, setIsInputVisible] = useState<boolean>(false);\n  const handleMouseEnter = () => {\n    setIsInputVisible(true);\n  };\n  const handleMouseLeave = () => {\n    setIsInputVisible(false);\n  };\n  const AudioPlayPauseButton = () => {\n    return (\n      <button\n        className={cn(\n          'player-start',\n          'p-2 m-1 rounded-full hover:bg-gray-400 flex justify-center items-center w-12 h-12',\n        )}\n      >\n        {' '}\n        {<BsFillPlayFill />}\n      </button>\n    );\n  };\n  const ProgressBar = () => {\n    return (\n      <div className={cn('player-progress', 'grow gap-1')}>\n        <input className={cn('player-input', 'w-full')} type=\"range\" min=\"0\" max=\"100\" />\n      </div>\n    );\n  };\n  const VolumeInput = () => {\n    return (\n      <div\n        onMouseLeave={handleMouseLeave}\n        className={cn(\n          'player-volume-container ',\n          'flex justify-center items-center w-fit rounded pr-4',\n        )}\n      >\n        <button\n          onMouseEnter={handleMouseEnter}\n          className={cn(\n            'player-volume-button',\n            'cursor-pointer relative w-12 h-12 flex justify-center items-center p-2 m-1',\n          )}\n        >\n          <BsFillVolumeUpFill />\n        </button>\n        <input\n          type=\"range\"\n          min={0}\n          max={100}\n          className={cn('player-volume-range mr-2', { hidden: !isInputVisible })}\n        />\n      </div>\n    );\n  };\n  const DurationDiv = () => {\n    const dur = '00:00 / 00:00';\n    return <div className={cn('player-duration-container', 'p-2 w-50')}>{dur}</div>;\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <audio autoPlay={autoPlay} loop={loop} muted={muted} />\n      <div\n        style={style}\n        className={cn('player-container', 'flex rounded bg-gray-600 text-white text-xl')}\n      >\n         <>\n            {fastBackForward && (\n              <button className={cn(\n                'player-fast',\n                'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n              )}>\n                <TbRewindBackward10 />\n              </button>\n            )}\n          </>\n          <AudioPlayPauseButton />\n          <>\n            {fastBackForward && (\n              <button className={cn(\n                'player-fast',\n                'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n              )}>\n                <TbRewindForward10 />\n              </button>\n            )}\n          </>\n        <div className={cn('player-container', 'flex grow items-center justify-center gap-2 p-2')}>\n          <ProgressBar />\n          <DurationDiv />\n        </div>\n        <VolumeInput />\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/AudioPlayer.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { BsSoundwave } from 'react-icons/bs';\nimport AudioPlayerSettings, { BasicSettings } from './AudioPlayer.settings';\nexport default {\n  craft: {\n    displayName: 'AudioPlayer',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(AudioPlayerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'AudioPlayer',\n    exposed: true,\n    icon: BsSoundwave,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    loop: false,\n    muted: false,\n    autoPlay: false,\n    fastBackForward:false,\n  },\n} as T4DComponentConfig<IAudioPlayerProps>;\nexport interface IAudioPlayerProps extends webforms.ComponentProps {\n  autoPlay: boolean;\n  muted: boolean;\n  loop: boolean;\n  audioSource: string;\n  fastBackForward: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/AudioPlayer.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useRef, useState } from 'react';\nimport { IAudioPlayerProps } from './AudioPlayer.config';\nimport {\n  BsFillPlayFill,\n  BsPauseFill,\n  BsFillVolumeMuteFill,\n  BsFillVolumeDownFill,\n  BsFillVolumeUpFill,\n} from 'react-icons/bs';\nimport { TbRewindBackward10, TbRewindForward10 } from 'react-icons/tb';\nconst AudioPlayer: FC<IAudioPlayerProps> = ({\n  autoPlay,\n  muted,\n  loop,\n  audioSource,\n  style,\n  fastBackForward,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<string>(audioSource);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const progressBarRef = useRef<HTMLInputElement>(null);\n  const [isInputVisible, setIsInputVisible] = useState<boolean>(false);\n  const [prevVolume, setPrevVolume] = useState<number>(60); \n  const [volume, setVolume] = useState<number>(muted ? 0 : 60);\n  const [muteVolume, setMuteVolume] = useState<boolean>(muted);\n  const [isPlaying, setIsPlaying] = useState<boolean>(autoPlay);\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const [duration, setDuration] = useState<number>(0);\n  const inputRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      setValue(v || audioSource);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  useEffect(() => {\n    const handleLoadedMetadata = () => {\n      if (audioRef.current) {\n        setCurrentTime(audioRef.current.currentTime);\n        if (audioRef.current.duration) {\n          setDuration(audioRef.current.duration);\n        }\n      }\n    };\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n    }\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (volume > 0) setMuteVolume(false);\n    if (audioRef.current)\n      if (audioRef.current.currentTime === audioRef.current.duration) setIsPlaying(false);\n    if (audioRef.current)\n      if (audioRef.current.currentTime === audioRef.current.duration && loop) setIsPlaying(true);\n  });\n  const playPauseAudio = () => {\n    if (audioRef.current) {\n      if (audioRef.current.paused) {\n        audioRef.current.play();\n      } else {\n        audioRef.current.pause();\n      }\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleTimeUpdate = () => {\n    if (audioRef.current) {\n      setCurrentTime(audioRef.current.currentTime);\n    }\n    if (progressBarRef.current) {\n      progressBarRef.current.value = String(audioRef.current?.currentTime);\n    }\n  };\n  const AudioPlayPauseButton = () => {\n    return (\n      <button\n        className={cn(\n          'player-start',\n          'p-2 m-1 rounded-full hover:bg-gray-400 flex justify-center items-center w-12 h-12',\n        )}\n        onClick={playPauseAudio}\n      >\n        {isPlaying ? <BsPauseFill /> : <BsFillPlayFill />}\n      </button>\n    );\n  };\n  const formatTime = (audioDuration: number) => {\n    if (audioDuration >= 0) {\n      const hours = Math.floor(audioDuration / 3600);\n      const minutes = Math.floor((audioDuration % 3600) / 60);\n      const seconds = Math.floor(audioDuration % 60);\n      const formattedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n      const formattedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n      if (hours > 0) {\n        return `${hours}:${formattedMinutes}:${formattedSeconds}`;\n      } else {\n        return `${formattedMinutes}:${formattedSeconds}`;\n      }\n    } else {\n      return '00:00';\n    }\n  };\n  const DurationDiv = () => {\n    return (\n      <div className={cn('player-duration-container', 'p-2 w-50')}>\n        {formatTime(Math.floor(currentTime))} / {formatTime(Math.floor(duration))}\n      </div>\n    );\n  };\n  const handleProgressChange = (event: any) => {\n    if (audioRef.current && progressBarRef.current) {\n      const inputRect = progressBarRef.current?.getBoundingClientRect();\n      const percentage = (event.clientX - inputRect.left) / inputRect.width;\n      const max = audioRef.current.duration;\n      const newTime = max * percentage;\n      setCurrentTime(newTime);\n      audioRef.current.currentTime = newTime;\n    }\n  };\n  const handleProgressMouseDown = (event: any) => {\n    event.preventDefault();\n    document.addEventListener('mousemove', handleProgressChange);\n    document.addEventListener('mouseup', handleProgressMouseUp);\n  };\n  const handleProgressMouseUp = () => {\n    document.removeEventListener('mousemove', handleProgressChange);\n    document.removeEventListener('mouseup', handleProgressMouseUp);\n  };\n  const handleMouseDown = (event: any) => {\n    event.preventDefault();\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  const handleMouseMove = (event: any) => {\n    if (inputRef.current) {\n      const inputRect = inputRef.current?.getBoundingClientRect();\n      const percentage = (event.clientX - inputRect.left) / inputRect.width;\n      const newVolume = Math.floor(Math.min(Math.max(percentage * 100, 0), 100));\n      setVolume(newVolume);\n    }\n  };\n  const handleMouseUp = () => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  const ProgressBar = () => {\n    return (\n      <div className={cn('player-progress', 'grow gap-1')}>\n        <input\n          className={cn('player-input', 'w-full')}\n          type=\"range\"\n          ref={progressBarRef}\n          defaultValue={currentTime}\n          onMouseDown={handleProgressMouseDown}\n          onClick={handleProgressChange}\n          step=\"0.01\"\n          min=\"0\"\n          max={audioRef.current?.duration}\n        />\n      </div>\n    );\n  };\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = volume / 100;\n    }\n  }, [volume, audioRef]);\n  const muteUpVolume = () => {\n    setIsInputVisible(!isInputVisible);\n    if (!muteVolume) {\n      setPrevVolume(volume); \n      setVolume(0); \n    } else {\n      setVolume(prevVolume); \n    }\n    setMuteVolume((prev) => !prev); \n  };\n  const handleMouseEnter = () => {\n    setIsInputVisible(true);\n  };\n  const handleMouseLeave = () => {\n    setIsInputVisible(false);\n  };\n  const VolumeInput = () => {\n    return (\n      <div\n        className={cn(\n          'player-volume-container ',\n          'flex justify-center items-center group w-fit rounded',\n        )}\n        onMouseLeave={handleMouseLeave}\n      >\n        <button\n          className={cn(\n            'player-volume-button',\n            'cursor-pointer relative w-12 h-12 flex justify-center items-center p-2',\n          )}\n          onClick={muteUpVolume}\n          onMouseEnter={handleMouseEnter}\n        >\n          {muteVolume || volume < 5 ? (\n            <BsFillVolumeMuteFill />\n          ) : volume < 50 ? (\n            <BsFillVolumeDownFill />\n          ) : (\n            <BsFillVolumeUpFill />\n          )}\n        </button>\n        <input\n          type=\"range\"\n          min={0}\n          max={100}\n          defaultValue={volume}\n          onClick={handleMouseMove}\n          ref={inputRef}\n          onMouseDown={handleMouseDown}\n          className={cn('player-volume-range mr-2', { hidden: !isInputVisible })}\n        />\n      </div>\n    );\n  };\n  const fastBackward = () => {\n    if (progressBarRef.current && audioRef.current) {\n      const backProgress: number = parseFloat(progressBarRef.current?.value) - 10;\n      setCurrentTime(backProgress);\n      audioRef.current.currentTime = backProgress;\n    }\n  };\n  const fastForward = () => {\n    if (progressBarRef.current && audioRef.current) {\n      const backProgress: number = parseFloat(progressBarRef.current?.value) + 10;\n      setCurrentTime(backProgress);\n      audioRef.current.currentTime = backProgress;\n    }\n  };\n  const onSpaceClick = (event: any) => {\n    if (event.key === ' ') {\n      playPauseAudio();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('keydown', onSpaceClick);\n    return () => {\n      document.removeEventListener('keydown', onSpaceClick);\n    };\n  });\n  const onArrowKeys = (event: any) => {\n    if (event.key === 'ArrowLeft') {\n      fastBackward();\n    }\n    if (event.key === 'ArrowRight') {\n      fastForward();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('keydown', onArrowKeys);\n    return () => {\n      document.removeEventListener('keydown', onArrowKeys);\n    };\n  });\n  return (\n    <div ref={connect} className={cn(className, classNames)}>\n      <audio\n        ref={audioRef}\n        autoPlay={autoPlay}\n        loop={loop}\n        muted={muteVolume}\n        onTimeUpdate={handleTimeUpdate}\n      >\n        {}\n        <source src={value} type=\"audio/wav\"></source>\n        <source src={value} type=\"audio/mp3\"></source>\n        <source src={value} type=\"audio/ogg\"></source>\n        Your browser does not support the audio element.\n      </audio>\n      <div\n        style={style}\n        className={cn('player-container', 'flex rounded bg-gray-600 text-white text-lg')}\n      >\n        <>\n          {fastBackForward && (\n            <button\n              className={cn(\n                'player-fast',\n                'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n              )}\n              onClick={fastBackward}\n            >\n              <TbRewindBackward10 />\n            </button>\n          )}\n        </>\n        <AudioPlayPauseButton />\n        <>\n          {fastBackForward && (\n            <button\n              className={cn(\n                'player-fast',\n                'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n              )}\n              onClick={fastForward}\n            >\n              <TbRewindForward10 />\n            </button>\n          )}\n        </>\n        <div className={cn('player-content', 'flex grow items-center justify-center gap-2 p-2')}>\n          <ProgressBar />\n          <DurationDiv />\n        </div>\n        <VolumeInput />\n      </div>\n    </div>\n  );\n};\nexport default AudioPlayer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/AudioPlayer.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'muted',\n    label: 'Muted',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'loop',\n    label: 'Loop',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'autoPlay',\n    label: 'Auto Play',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  }\n  ,\n  {\n    key: 'audioSource',\n    label: 'Audio source',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: \"\",\n  },\n  {\n    key: 'fastBackForward',\n    label: 'Fast back/forward',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/index.tsx", "file_contents": "import VideoPlayer from './VideoPlayer';\nimport AudioPlayer from './AudioPlayer';\nexport default {\n  VideoPlayer,\n  AudioPlayer,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/VideoPlayer.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { IVideoPlayerProps } from './VideoPlayer.config';\nimport { BsFillPlayFill, BsFillVolumeUpFill, BsFullscreen } from 'react-icons/bs';\nimport { RiPictureInPicture2Fill, RiSpeedUpFill } from 'react-icons/ri';\nimport { TbRewindBackward10, TbRewindForward10 } from 'react-icons/tb';\nconst VideoPlayer: FC<IVideoPlayerProps> = ({\n  autoPlay,\n  loop,\n  muted,\n  miniPlayer,\n  fullScreen,\n  speed,\n  fastBackForward,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const VideoPlayPauseButton = () => {\n    return (\n      <button\n        className={cn(\n          'player-start',\n          'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n        )}\n      >\n        {' '}\n        {<BsFillPlayFill />}\n      </button>\n    );\n  };\n  const ProgressBar = () => {\n    return (\n      <div className={cn('player-progress', 'grow gap-1')}>\n        <input className={cn('player-input', 'w-full')} type=\"range\" min=\"0\" max=\"100\" />\n      </div>\n    );\n  };\n  const VolumeInput = () => {\n    return (\n      <div className={cn('player-volume-container', 'flex group w-fit')}>\n        <button\n          className={cn(\n            'player-volume-button',\n            'items-center justify-center p-2 block cursor-pointer relative',\n          )}\n        >\n          <BsFillVolumeUpFill />\n        </button>\n        <input type=\"range\" min={0} max={100} className={cn('player-volume-range', 'w-fit')} />\n      </div>\n    );\n  };\n  const FullScreenButton = () => {\n    return (\n      <>\n        {fullScreen && (\n          <button\n            className={cn(\n              'player-fullscreen',\n              'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n            )}\n          >\n            <BsFullscreen />\n          </button>\n        )}\n      </>\n    );\n  };\n  const PictureInPictureButton = () => {\n    return (\n      <>\n        {miniPlayer && (\n          <button\n            className={cn(\n              'player-miniPlayer',\n              'p-2 my-1 rounded-full  flex justify-center items-center w-12 h-12',\n            )}\n          >\n            <RiPictureInPicture2Fill />\n          </button>\n        )}\n      </>\n    );\n  };\n  const SpeedButton = () => {\n    return (\n      <>\n        {speed && (\n          <div className=\"relative\">\n            <button\n              className={cn(\n                'player-speed',\n                'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n              )}\n            >\n              <RiSpeedUpFill />\n            </button>\n            <div\n              className={cn(\n                'player-speed-options',\n                'absolute bottom-full left-1/2 transform -translate-x-1/2 z-10 text-black rounded shadow mb-2 bg-white',\n              )}\n            >\n              <button className=\"block w-full py-2 px-4 text-left hover:text-gray-300\">\n                0.25x\n              </button>\n              <button className=\"block w-full py-2 px-4 text-left hover:text-gray-300\">0.5x</button>\n              <button className=\"block w-full py-2 px-4 text-left hover:text-gray-300\">1x</button>\n              <button className=\"block w-full py-2 px-4 text-left hover:text-gray-300\">1.5x</button>\n              <button className=\"block w-full py-2 px-4 text-left hover:text-gray-300\">2x</button>\n            </div>\n          </div>\n        )}\n      </>\n    );\n  };\n  const DurationDiv = () => {\n    const dur = '00:00 / 00:00';\n    return <div className={cn('duration-container', 'p-2 w-50')}>{dur}</div>;\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className={cn('video-player-container', 'relative w-full h-full')}>\n        <video\n          autoPlay={autoPlay}\n          loop={loop}\n          muted={muted}\n          className={cn('video-screen', 'w-full bg-black rounded-lg')}\n        >\n          <source src=\"\" type=\"video/mp4\" />\n          <source src=\"\" type=\"video/ogg\" />\n          Your browser does not support the video element.\n        </video>\n        <div\n          className={cn(\n            'video-container',\n            'w-full absolute bottom-0 left-0 right-0',\n            'flex bg-transparent text-white text-xl px-1',\n          )}\n        >\n          <>\n            {fastBackForward && (\n              <button\n                className={cn(\n                  'player-fast',\n                  'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n                )}\n              >\n                <TbRewindBackward10 />\n              </button>\n            )}\n          </>\n          <VideoPlayPauseButton />\n          <>\n            {fastBackForward && (\n              <button\n                className={cn(\n                  'player-fast',\n                  'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n                )}\n              >\n                <TbRewindForward10 />\n              </button>\n            )}\n          </>{' '}\n          <div\n            className={cn('player-container', 'flex grow items-center justify-center gap-2 p-1')}\n          >\n            <ProgressBar />\n            <DurationDiv />\n          </div>\n          <VolumeInput />\n          <SpeedButton />\n          <FullScreenButton />\n          <PictureInPictureButton />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default VideoPlayer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/VideoPlayer.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { BsCameraVideo } from 'react-icons/bs';\nimport VideoPlayerSettings, { BasicSettings } from './VideoPlayer.settings';\nexport default {\n  craft: {\n    displayName: 'VideoPlayer',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(VideoPlayerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'VideoPlayer',\n    exposed: true,\n    icon: BsCameraVideo,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    autoPlay: false,\n    muted: false,\n    loop: false,\n    speed: false,\n    fullScreen: false,\n    miniPlayer: false,\n    fastBackForward: false,\n    style: {\n      width: '900px',\n    },\n  },\n} as T4DComponentConfig<IVideoPlayerProps>;\nexport interface IVideoPlayerProps extends webforms.ComponentProps {\n  autoPlay: boolean;\n  muted: boolean;\n  loop: boolean;\n  videoSource: string;\n  fullScreen: boolean;\n  speed: boolean;\n  miniPlayer: boolean;\n  fastBackForward: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/VideoPlayer.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useRef, useState } from 'react';\nimport { IVideoPlayerProps } from './VideoPlayer.config';\nimport {\n  BsFillPlayFill,\n  BsFillVolumeUpFill,\n  BsPauseFill,\n  BsFillVolumeMuteFill,\n  BsFillVolumeDownFill,\n  BsFullscreen,\n  BsFullscreenExit,\n} from 'react-icons/bs';\nimport { TbRewindBackward10, TbRewindForward10 } from 'react-icons/tb';\nimport { RiPictureInPicture2Fill, RiSpeedUpFill } from 'react-icons/ri';\nconst VideoPlayer: FC<IVideoPlayerProps> = ({\n  autoPlay,\n  muted,\n  loop,\n  videoSource,\n  miniPlayer,\n  fullScreen,\n  speed,\n  fastBackForward,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const progressBarRef = useRef<HTMLInputElement>(null);\n  const [value, setValue] = useState<string>(videoSource);\n  const [isPlaying, setIsPlaying] = useState<boolean>(autoPlay);\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const [duration, setDuration] = useState<number>(0);\n  const [isInputVisible, setIsInputVisible] = useState<boolean>(false);\n  const [prevVolume, setPrevVolume] = useState<number>(60); \n  const [volume, setVolume] = useState<number>(muted ? 0 : 60);\n  const [muteVolume, setMuteVolume] = useState<boolean>(muted);\n  const [showDropdown, setShowDropdown] = useState<boolean>(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isFullScreen, setIsFullScreen] = useState<boolean>(false);\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      setValue(v || videoSource);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  useEffect(() => {\n    if (volume > 0) setMuteVolume(false);\n    if (videoRef.current)\n      if (videoRef.current.currentTime === videoRef.current.duration) setIsPlaying(false);\n    if (videoRef.current)\n      if (videoRef.current.currentTime === videoRef.current.duration && loop) setIsPlaying(true);\n  });\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    const handleMouseMove = () => {\n      setIsVisible(true);\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        setIsVisible(false);\n      }, 3000); \n    };\n    if (containerRef.current) {\n      containerRef.current.addEventListener('mousemove', handleMouseMove);\n    }\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.removeEventListener('mousemove', handleMouseMove);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const handleLoadedMetadata = () => {\n      if (videoRef.current) {\n        setCurrentTime(videoRef.current.currentTime);\n        if (videoRef.current.duration) {\n          setDuration(videoRef.current.duration);\n        }\n      }\n    };\n    if (videoRef.current) {\n      videoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n    }\n    return () => {\n      if (videoRef.current) {\n        videoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      }\n    };\n  }, []);\n  const playPauseVideo = () => {\n    if (videoRef.current) {\n      if (videoRef.current.paused) {\n        videoRef.current.play();\n      } else {\n        videoRef.current.pause();\n      }\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const VideoPlayPauseButton = () => {\n    return (\n      <button\n        className={cn(\n          'player-start',\n          'p-2 m-1 rounded-full flex justify-center items-center w-12 h-12',\n        )}\n        onClick={playPauseVideo}\n      >\n        {isPlaying ? <BsPauseFill /> : <BsFillPlayFill />}\n      </button>\n    );\n  };\n  const ProgressBar = () => {\n    return (\n      <div className={cn('player-progress', 'grow gap-1')}>\n        <input\n          className={cn('player-input', 'w-full')}\n          type=\"range\"\n          ref={progressBarRef}\n          defaultValue={currentTime}\n          onMouseDown={handleProgressMouseDown}\n          onClick={handleProgressChange}\n          step=\"0.01\"\n          min=\"0\"\n          max={videoRef.current?.duration}\n        />\n      </div>\n    );\n  };\n  const handleProgressChange = (event: any) => {\n    if (videoRef.current && progressBarRef.current) {\n      const inputRect = progressBarRef.current?.getBoundingClientRect();\n      const percentage = (event.clientX - inputRect.left) / inputRect.width;\n      const max = videoRef.current.duration;\n      const newTime = max * percentage;\n      setCurrentTime(newTime);\n      videoRef.current.currentTime = newTime;\n    }\n  };\n  const handleProgressMouseDown = (event: any) => {\n    event.preventDefault();\n    document.addEventListener('mousemove', handleProgressChange);\n    document.addEventListener('mouseup', handleProgressMouseUp);\n  };\n  const handleProgressMouseUp = () => {\n    document.removeEventListener('mousemove', handleProgressChange);\n    document.removeEventListener('mouseup', handleProgressMouseUp);\n  };\n  const handleTimeUpdate = () => {\n    if (videoRef.current) {\n      setCurrentTime(videoRef.current.currentTime);\n    }\n    if (progressBarRef.current) {\n      progressBarRef.current.value = String(videoRef.current?.currentTime);\n    }\n  };\n  const handleMouseDown = (event: any) => {\n    event.preventDefault();\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n  const handleMouseMove = (event: any) => {\n    if (inputRef.current) {\n      const inputRect = inputRef.current?.getBoundingClientRect();\n      const percentage = (event.clientX - inputRect.left) / inputRect.width;\n      const newVolume = Math.floor(Math.min(Math.max(percentage * 100, 0), 100));\n      setVolume(newVolume);\n    }\n  };\n  const handleMouseUp = () => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.volume = volume / 100;\n    }\n  }, [volume, videoRef]);\n  const muteUpVolume = () => {\n    setIsInputVisible(!isInputVisible);\n    if (!muteVolume) {\n      setPrevVolume(volume); \n      setVolume(0); \n    } else {\n      setVolume(prevVolume); \n    }\n    setMuteVolume((prev) => !prev); \n  };\n  const handleMouseEnter = () => {\n    setIsInputVisible(true);\n  };\n  const handleMouseLeave = () => {\n    setIsInputVisible(false);\n  };\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n  const handleSpeedChange = (speed: number) => {\n    if (videoRef.current) {\n      videoRef.current.playbackRate = speed;\n      toggleDropdown();\n    }\n  };\n  const VolumeInput = () => {\n    return (\n      <div\n        className={cn(\n          'player-volume-container ',\n          'flex justify-center items-center group w-fit rounded',\n        )}\n        onMouseLeave={handleMouseLeave}\n      >\n        <button\n          className={cn(\n            'player-volume-button',\n            'cursor-pointer relative w-12 h-12 flex justify-center items-center p-2 m-1',\n          )}\n          onClick={muteUpVolume}\n          onMouseEnter={handleMouseEnter}\n        >\n          {muteVolume || volume < 5 ? (\n            <BsFillVolumeMuteFill />\n          ) : volume < 50 ? (\n            <BsFillVolumeDownFill />\n          ) : (\n            <BsFillVolumeUpFill />\n          )}\n        </button>\n        <input\n          type=\"range\"\n          min={0}\n          max={100}\n          defaultValue={volume}\n          ref={inputRef}\n          onMouseDown={handleMouseDown}\n          onClick={handleMouseMove}\n          className={cn('player-volume-range mr-1', { hidden: !isInputVisible })}\n        />\n      </div>\n    );\n  };\n  const formatTime = (videoDuration: number) => {\n    if (videoDuration >= 0) {\n      const hours = Math.floor(videoDuration / 3600);\n      const minutes = Math.floor((videoDuration % 3600) / 60);\n      const seconds = Math.floor(videoDuration % 60);\n      const formattedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n      const formattedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n      if (hours > 0) {\n        return `${hours}:${formattedMinutes}:${formattedSeconds}`;\n      } else {\n        return `${formattedMinutes}:${formattedSeconds}`;\n      }\n    } else {\n      return '00:00';\n    }\n  };\n  const toggleFullScreen = () => {\n    if (containerRef.current) {\n      if (!document.fullscreenElement) {\n        containerRef.current.requestFullscreen();\n        setIsFullScreen(true);\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n          setIsFullScreen(false);\n        }\n      }\n    }\n  };\n  const togglePictureInPicture = () => {\n    if (videoRef.current) {\n      videoRef.current.requestPictureInPicture();\n    }\n  };\n  const DurationDiv = () => {\n    return (\n      <div className={cn('duration-container', 'p-2 w-50')}>\n        {formatTime(Math.floor(currentTime))} / {formatTime(Math.floor(duration))}\n      </div>\n    );\n  };\n  const FullScreenButton = () => {\n    return (\n      <>\n        {fullScreen && (\n          <button\n            className={cn(\n              'player-fullscreen',\n              'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n            )}\n            onClick={toggleFullScreen}\n          >\n            {isFullScreen ? <BsFullscreenExit /> : <BsFullscreen />}\n          </button>\n        )}\n      </>\n    );\n  };\n  const handleFullScreenChange = () => {\n    setIsFullScreen(!!document.fullscreenElement);\n  };\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', handleFullScreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n    };\n  }, []);\n  const PictureInPictureButton = () => {\n    return (\n      <>\n        {miniPlayer && (\n          <button\n            className={cn(\n              'player-miniPlayer',\n              'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n            )}\n            onClick={togglePictureInPicture}\n          >\n            <RiPictureInPicture2Fill />\n          </button>\n        )}\n      </>\n    );\n  };\n  const SpeedButton = () => {\n    return (\n      <>\n        {speed && (\n          <div className=\"relative\">\n            <button\n              className={cn(\n                'player-speed',\n                'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n              )}\n              onClick={toggleDropdown}\n            >\n              <RiSpeedUpFill />\n            </button>\n            {showDropdown && (\n              <div\n                className={cn(\n                  'player-speed-options',\n                  'absolute bottom-full left-1/2 transform -translate-x-1/2  z-10 text-black rounded shadow mb-2 bg-white',\n                )}\n              >\n                <button\n                  className=\"block w-full py-2 px-4 text-left hover:text-gray-300\"\n                  onClick={() => handleSpeedChange(0.25)}\n                >\n                  0.25x\n                </button>\n                <button\n                  className=\"block w-full py-2 px-4 text-left hover:text-gray-300\"\n                  onClick={() => handleSpeedChange(0.5)}\n                >\n                  0.5x\n                </button>\n                <button\n                  className=\"block w-full py-2 px-4 text-left hover:text-gray-300\"\n                  onClick={() => handleSpeedChange(1)}\n                >\n                  1x\n                </button>\n                <button\n                  className=\"block w-full py-2 px-4 text-left hover:text-gray-300\"\n                  onClick={() => handleSpeedChange(1.5)}\n                >\n                  1.5x\n                </button>\n                <button\n                  className=\"block w-full py-2 px-4 text-left hover:text-gray-300\"\n                  onClick={() => handleSpeedChange(2)}\n                >\n                  2x\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n      </>\n    );\n  };\n  const fastBackward = () => {\n    if (progressBarRef.current && videoRef.current) {\n      const backProgress: number = parseFloat(progressBarRef.current?.value) - 10;\n      setCurrentTime(backProgress);\n      videoRef.current.currentTime = backProgress;\n    }\n  };\n  const fastForward = () => {\n    if (progressBarRef.current && videoRef.current) {\n      const backProgress: number = parseFloat(progressBarRef.current?.value) + 10;\n      setCurrentTime(backProgress);\n      videoRef.current.currentTime = backProgress;\n    }\n  };\n  const onSpaceClick = (event: any) => {\n    if (event.key === ' ') {\n      playPauseVideo();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('keydown', onSpaceClick);\n    return () => {\n      document.removeEventListener('keydown', onSpaceClick);\n    };\n  });\n  const onArrowKeys = (event: any) => {\n    if (event.key === 'ArrowLeft') {\n      fastBackward();\n    }\n    if (event.key === 'ArrowRight') {\n      fastForward();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('keydown', onArrowKeys);\n    return () => {\n      document.removeEventListener('keydown', onArrowKeys);\n    };\n  });\n  const onFPress = (event: any) => {\n    if (event.key === 'F') {\n      toggleFullScreen();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('keydown', onFPress);\n    return () => {\n      document.removeEventListener('keydown', onFPress);\n    };\n  });\n  const onMPress = (event: any) => {\n    if (event.key === 'M') {\n      muteUpVolume();\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('keydown', onMPress);\n    return () => {\n      document.removeEventListener('keydown', onMPress);\n    };\n  });\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div ref={containerRef} className={cn('video-player-container', 'w-full h-full relative')}>\n        <video\n          ref={videoRef}\n          autoPlay={autoPlay}\n          loop={loop}\n          muted={muteVolume}\n          className={cn('video-screen', 'w-full h-full bg-black rounded-lg hover:cursor-pointer')}\n          onTimeUpdate={handleTimeUpdate}\n          onClick={playPauseVideo}\n        >\n          <source src={value} type=\"video/mp4\" />\n          <source src={value} type=\"video/ogg\" />\n          Your browser does not support the video element.\n        </video>\n        <div\n          className={cn(\n            'video-container',\n            'w-full absolute bottom-0 left-0 right-0',\n            'flex bg-transparent text-white text-xl px-1',\n            'transition-opacity duration-500',\n            { 'opacity-0': !isVisible },\n            { 'opacity-100': !isPlaying },\n          )}\n        >\n          <>\n            {fastBackForward && (\n              <button\n                onClick={fastBackward}\n                className={cn(\n                  'player-fast',\n                  'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n                )}\n              >\n                <TbRewindBackward10 />\n              </button>\n            )}\n          </>\n          <VideoPlayPauseButton />\n          <>\n            {fastBackForward && (\n              <button\n                onClick={fastForward}\n                className={cn(\n                  'player-fast',\n                  'p-2 my-1 rounded-full flex justify-center items-center w-12 h-12',\n                )}\n              >\n                <TbRewindForward10 />\n              </button>\n            )}\n          </>\n          <div\n            className={cn('player-container', 'flex grow items-center justify-center gap-2 p-1')}\n          >\n            <ProgressBar />\n            <DurationDiv />\n          </div>\n          <VolumeInput />\n          <SpeedButton />\n          <FullScreenButton />\n          <PictureInPictureButton />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default VideoPlayer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/audio-player/VideoPlayer.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'muted',\n    label: 'Muted',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'loop',\n    label: 'Loop',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'autoPlay',\n    label: 'Auto play',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'videoSource',\n    label: 'Video source',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'fullScreen',\n    label: 'Fullscreen mode',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },  {\n    key: 'miniPlayer',\n    label: 'Picture in picture mode',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n    {\n    key: 'speed',\n    label: 'Show speed',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'fastBackForward',\n    label: 'Fast back/forward',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-file-download/Download.build.tsx", "file_contents": "import { useEnhancedNode, useLayout } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { useEnhancedEditor, selectResolver } from '@ws-ui/webform-editor';\nimport { IDownloadProps } from './Download.config';\nconst Download: FC<IDownloadProps> = ({\n  iconPosition,\n  label,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const { getClassName } = useLayout();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  return (\n    <button\n      ref={connect}\n      className={cn(\n        'fd-component flex items-center justify-center gap-1',\n        classNames,\n        className,\n        getClassName('fd-button'),\n      )}\n      style={style}\n    >\n      <span\n        className={cn([\n          'flex items-center',\n          {\n            'flex-row-reverse': iconPosition === 'right',\n            'flex-col': iconPosition === 'top',\n            'flex-col-reverse': iconPosition === 'bottom',\n          },\n        ])}\n      >\n        <span\n          className={cn([\n            {\n              hidden: iconPosition === 'hidden',\n              'mb-1': iconPosition === 'top',\n              'mt-1': iconPosition === 'bottom',\n              'ml-1': iconPosition === 'right',\n              'mr-1': iconPosition === 'left',\n            },\n          ])}\n        >\n          <Element is={resolver.Icon} id=\"icon\" />\n        </span>\n        {label}\n      </span>\n    </button>\n  );\n};\nexport default Download;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-file-download/Download.config.tsx", "file_contents": "import {\n  EComponentKind,\n  T4DComponentConfig,\n  getDataTransferSourceID,\n  isAttributePayload,\n  isDatasourcePayload,\n} from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaFileDownload } from 'react-icons/fa';\nimport { cloneDeep } from 'lodash';\nimport DownloadSettings, { BasicSettings } from './Download.settings';\nexport default {\n  craft: {\n    displayName: 'Download',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(DownloadSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Download',\n    exposed: true,\n    icon: FaFileDownload,\n    sanityCheck: {\n      keys: [{ name: 'datasource', require: true, isDatasource: true }],\n    },\n    requiredFields: {\n      keys: ['datasource'],\n      all: true,\n    },\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      set: (nodeId, query, payload, iterator) => {\n        const new_props: webforms.ComponentProps = cloneDeep(query.node(nodeId).get().data.props);\n        const updateProps = (sourceId: string) => {\n          if (new_props.datasource == null) {\n            new_props.datasource = sourceId;\n          } else {\n            new_props.currentElement = sourceId;\n          }\n        };\n        payload.forEach((item) => {\n          if (\n            isDatasourcePayload(item) &&\n            item.source.type === 'scalar' &&\n            item.source.dataType === 'string'\n          ) {\n            updateProps(getDataTransferSourceID(item, iterator));\n          } else if (isAttributePayload(item)) {\n            const sourceId = getDataTransferSourceID(item, iterator);\n            if (item.attribute.type === 'blob' || item.attribute.type === 'string') {\n              updateProps(sourceId);\n            }\n          }\n        });\n        return {\n          [nodeId]: new_props,\n        };\n      },\n    },\n  },\n  defaultProps: {\n    iterableChild: true,\n    label: 'Download File',\n    iconPosition: 'left',\n    style: {\n      display: 'flex',\n    },\n  },\n} as T4DComponentConfig<IDownloadProps>;\nexport interface IDownloadProps extends webforms.ComponentProps {\n  label?: string;\n  iconPosition?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-file-download/Download.render.tsx", "file_contents": "import { useEnhancedEditor, useLayout, useRenderer, selectResolver } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { IDownloadProps } from './Download.config';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { useSources } from './useSources';\nconst Download: FC<IDownloadProps> = ({\n  label,\n  iconPosition,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<any>(null);\n  const [fileName, setFileName] = useState<string>('');\n  const {\n    sources: { datasource: ds, currentElement: ce },\n  } = useSources({ acceptIteratorSel: true });\n  const { getClassName } = useLayout();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      let v = await ds.getValue<any>();\n      if (!v) return;\n      try {\n        v = JSON.parse(v);\n      } catch (error) {}\n      let src = null;\n      if (typeof v === 'object') {\n        const deferred = v.__deferred;\n        if (deferred != null && typeof deferred === 'object') {\n          const uri = deferred.uri;\n          if (uri != null) src = uri;\n        }\n      } else if (typeof v === 'string') {\n        src = v;\n      }\n      if (src != null) {\n        setValue(src);\n      }\n      const val = await ce.getValue<string>(); \n      setFileName(val || 'File');\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds, ce]);\n  const download = () => {\n    const fetchDocument = async (url: any) => {\n      try {\n        const response = await axios.get(url, {\n          responseType: 'blob',\n        });\n        const blobUrl = URL.createObjectURL(response.data);\n        const downloadLink = document.createElement('a');\n        downloadLink.href = blobUrl;\n        downloadLink.download = fileName;\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n        URL.revokeObjectURL(blobUrl);\n      } catch {\n      }\n    };\n    fetchDocument(value);\n  };\n  return (\n    <button\n      ref={connect}\n      className={cn(\n        'fd-component flex items-center justify-center gap-1',\n        classNames,\n        className,\n        getClassName('fd-button'),\n      )}\n      style={style}\n      onClick={download}\n    >\n      <span\n        className={cn([\n          'flex items-center',\n          {\n            'flex-row-reverse': iconPosition === 'right',\n            'flex-col': iconPosition === 'top',\n            'flex-col-reverse': iconPosition === 'bottom',\n          },\n        ])}\n      >\n        <span\n          className={cn([\n            {\n              hidden: iconPosition === 'hidden',\n              'mb-1': iconPosition === 'top',\n              'mt-1': iconPosition === 'bottom',\n              'ml-1': iconPosition === 'right',\n              'mr-1': iconPosition === 'left',\n            },\n          ])}\n        >\n          <Element is={resolver.Icon} id=\"icon\" />\n        </span>\n        {label}\n      </span>\n    </button>\n  );\n};\nexport default Download;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-file-download/Download.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  FdAlignContentEnd,\n  FdAlignContentStart,\n  FdFlexEnd,\n  FdFlexStart,\n  FdHidden,\n} from '@ws-ui/icons';\nexport const DEFAULT_BUTTON_TEXT = 'Button';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'label',\n    label: 'Label',\n    defaultValue: 'Download',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'iconPosition',\n    label: 'Icon Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'hidden',\n    options: [\n      { value: 'top', icon: FdFlexStart },\n      { value: 'bottom', icon: FdFlexEnd },\n      { value: 'left', icon: FdAlignContentStart },\n      { value: 'right', icon: FdAlignContentEnd },\n      { value: 'hidden', icon: FdHidden },\n    ],\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Data Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'File Name',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('dataAccess'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-file-download/index.tsx", "file_contents": "import Download from './Download';\nexport default {\n  Download,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-file-download/useSources.ts", "file_contents": "import { useNode } from '@ws-ui/craftjs-core';\nimport { useEffect } from 'react';\nimport {\n  useWebformPath,\n  splitDatasourceStr,\n  useIteratorDatasourceGetter,\n  TIteratorDatasourceType,\n} from '@ws-ui/webform-editor';\ntype UseSourcesOptions = Partial<{\n  datasourceChange: () => void;\n  currentElementChange: () => void;\n  acceptIteratorSel?: boolean;\n}>;\ntype UseSourcesType = (options?: UseSourcesOptions) => {\n  sources: {\n    datasource: datasources.DataSource;\n    currentElement: datasources.DataSource;\n  };\n  actions: {\n    setDatasourceValue: () => Promise<any>;\n    setCurrentElementValue: () => Promise<any>;\n    fetchDatasourceValue: () => Promise<any>;\n    fetchCurrentElementValue: () => Promise<any>;\n  };\n};\ntype UseSourcesReturnType = ReturnType<UseSourcesType>;\ninterface IUseIteratorDatasourceProps {\n  type: TIteratorDatasourceType;\n  prop?: string;\n}\nfunction useIteratorDatasource({ type, prop = 'datasource' }: IUseIteratorDatasourceProps) {\n  const { datasource } = useNode((node) => ({\n    datasource: node.data.props[prop] || '',\n  }));\n  const getter = useIteratorDatasourceGetter();\n  return getter(datasource, type);\n}\nexport function useSources(options?: UseSourcesOptions) {\n  const path = useWebformPath();\n  const { datasource, currentElement } = useNode((node) => ({\n    datasource: splitDatasourceStr(node.data.props.datasource),\n    currentElement: splitDatasourceStr(node.data.props.currentElement),\n  }));\n  const iteratorDs = useIteratorDatasource({\n    type: options?.acceptIteratorSel ? 'entitysel' : 'entity',\n  });\n  const iteratorCurrentDs = useIteratorDatasource({\n    type: 'entity',\n    prop: 'currentElement',\n  });\n  const ds = iteratorDs\n    ? iteratorDs\n    : datasource[0]\n      ? window.DataSource.getSource(datasource[0].id, datasource[0].namespace || path)\n      : undefined;\n  const currentDs = iteratorCurrentDs\n    ? iteratorCurrentDs\n    : currentElement[0]\n      ? window.DataSource.getSource(currentElement[0].id, currentElement[0].namespace || path)\n      : undefined;\n  const handleDatasourceChange = () => {\n    options && options.datasourceChange && options.datasourceChange();\n  };\n  const handleCurrentDatasourceChange = () => {\n    options && options.datasourceChange && options.datasourceChange();\n  };\n  useEffect(() => {\n    ds?.addListener('changed', handleDatasourceChange);\n    currentDs?.addListener('changed', handleCurrentDatasourceChange);\n    return () => {\n      ds?.removeListener('changed', handleDatasourceChange);\n      currentDs?.removeListener('changed', handleCurrentDatasourceChange);\n    };\n  }, [options?.datasourceChange, options?.currentElementChange]);\n  return {\n    sources: {\n      datasource: ds,\n      currentElement: currentDs,\n    },\n    actions: {\n      setDatasourceValue() {},\n      setCurrentElementValue() {},\n      fetchDatasourceValue() {},\n      fetchCurrentElementValue() {},\n    },\n  } as UseSourcesReturnType;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-object-viewer/index.tsx", "file_contents": "import ObjectViewer from './ObjectViewer';\nexport default {\n  ObjectViewer,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-object-viewer/ObjectViewer.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { IObjectViewerProps } from './ObjectViewer.config';\nimport ReactJson from 'react-json-view';\nconst ObjectViewer: FC<IObjectViewerProps> = ({\n  theme,\n  indentWidth,\n  collapsed,\n  iconStyle,\n  collapseStringsAfterLength,\n  groupArraysAfterLength,\n  displayDataTypes,\n  displayObjectSize,\n  sortKeys,\n  name,\n  enableClipboard,\n  quotesOnKeys,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const data: object = {\n    data1: [\n      {\n        Property1: 'test',\n        Property2: 'test',\n      },\n      {\n        Property1: 'test',\n        Property2: 'test',\n      },\n    ],\n    data2: [\n      {\n        Property1: 'test',\n        Property2: 'test',\n      },\n      {\n        Property1: 'test',\n        Property2: 'test',\n      },\n      {\n        Property1: 'test',\n        Property2: 'test',\n      },\n    ],\n    data3: [\n      {\n        Property1: 'test',\n        Property2: 'test',\n      },\n    ],\n    data4: [],\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <ReactJson\n        src={data}\n        theme={theme}\n        collapsed={collapsed}\n        indentWidth={indentWidth}\n        iconStyle={iconStyle}\n        collapseStringsAfterLength={collapseStringsAfterLength}\n        groupArraysAfterLength={groupArraysAfterLength}\n        displayDataTypes={displayDataTypes}\n        displayObjectSize={displayObjectSize}\n        sortKeys={sortKeys}\n        name={name}\n        enableClipboard={enableClipboard}\n        quotesOnKeys={quotesOnKeys}\n        style={{\n          width: '100%',\n          height: '100%',\n          overflow: 'auto',\n        }}\n      />\n    </div>\n  );\n};\nexport default ObjectViewer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-object-viewer/ObjectViewer.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineDataObject } from 'react-icons/md';\nimport ObjectViewerSettings, { BasicSettings } from './ObjectViewer.settings';\nexport default {\n  craft: {\n    displayName: 'ObjectViewer',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(ObjectViewerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'ObjectViewer',\n    exposed: true,\n    icon: MdOutlineDataObject,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['object'],\n    },\n  },\n  defaultProps: {\n    theme: 'basic',\n    indentWidth: 15,\n    iconStyle: 'circle',\n    collapseStringsAfterLength: 100,\n    groupArraysAfterLength: 5,\n    name: 'root',\n    enableClipboard: false,\n    quotesOnKeys: false,\n    displayObjectSize: false,\n    displayDataTypes: false,\n  },\n} as T4DComponentConfig<IObjectViewerProps>;\nexport interface IObjectViewerProps extends webforms.ComponentProps {\n  theme: any;\n  indentWidth: number;\n  collapsed: boolean;\n  iconStyle: any; \n  collapseStringsAfterLength: number;\n  groupArraysAfterLength: number;\n  displayDataTypes: boolean;\n  displayObjectSize: boolean;\n  sortKeys: boolean;\n  name: string;\n  enableClipboard: boolean;\n  quotesOnKeys: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-object-viewer/ObjectViewer.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IObjectViewerProps } from './ObjectViewer.config';\nimport ReactJson from 'react-json-view';\nconst ObjectViewer: FC<IObjectViewerProps> = ({\n  theme,\n  indentWidth,\n  collapsed,\n  iconStyle,\n  collapseStringsAfterLength,\n  groupArraysAfterLength,\n  displayDataTypes,\n  displayObjectSize,\n  sortKeys,\n  name,\n  enableClipboard,\n  quotesOnKeys,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<object>({});\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<object>();\n      setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <ReactJson\n        src={value}\n        theme={theme}\n        collapsed={collapsed}\n        indentWidth={indentWidth}\n        iconStyle={iconStyle}\n        collapseStringsAfterLength={collapseStringsAfterLength}\n        groupArraysAfterLength={groupArraysAfterLength}\n        displayDataTypes={displayDataTypes}\n        displayObjectSize={displayObjectSize}\n        sortKeys={sortKeys}\n        name={name}\n        enableClipboard={enableClipboard}\n        quotesOnKeys={quotesOnKeys}\n        style={{\n          width: '100%',\n          height: '100%',\n          overflow: 'auto',\n        }}\n      />\n    </div>\n  );\n};\nexport default ObjectViewer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/b-fadwa/Qodly-object-viewer/ObjectViewer.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'name',\n    label: 'Root Name',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'theme',\n    label: 'Theme',\n    type: ESetting.SELECT,\n    options: [\n      {\n        label: 'basic',\n        value: 'basic',\n      },\n      {\n        label: 'monokai',\n        value: 'monokai',\n      },\n      {\n        label: 'ocean',\n        value: 'ocean',\n      },\n      {\n        label: 'paraiso',\n        value: 'paraiso',\n      },\n      {\n        label: 'pop',\n        value: 'pop',\n      },\n      {\n        label: 'railscasts',\n        value: 'railscasts',\n      },\n      {\n        label: 'greenscreen',\n        value: 'greenscreen',\n      },\n      {\n        label: 'solarized',\n        value: 'solarized',\n      },\n      {\n        label: 'summerfruit',\n        value: 'summerfruit',\n      },\n      {\n        label: 'summerfruit:inverted',\n        value: 'summerfruit:inverted',\n      },\n    ],\n    defaultValue: 'basic',\n  },\n  {\n    key: 'indentWidth',\n    label: 'Indent width',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 15,\n  },\n  {\n    key: 'collapsed',\n    label: 'Collapse',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'iconStyle',\n    label: 'Icon Style',\n    defaultValue: 'circle',\n    type: ESetting.SELECT,\n    options: [\n      {\n        label: 'circle',\n        value: 'circle',\n      },\n      {\n        label: 'triangle',\n        value: 'triangle',\n      },\n      {\n        label: 'square',\n        value: 'square',\n      },\n    ],\n  },\n  {\n    key: 'displayDataTypes',\n    label: 'Display Data Types',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'collapseStringsAfterLength',\n    label: 'Collapse Strings After Length',\n    type: ESetting.NUMBER_FIELD,\n  },\n  {\n    key: 'groupArraysAfterLength',\n    label: 'Group Arrays After Length',\n    type: ESetting.NUMBER_FIELD,\n  },\n  {\n    key: 'displayObjectSize',\n    label: 'Display Object Size',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'sortKeys',\n    label: 'Sort Keys',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'enableClipboard',\n    label: 'Enable Clipboard',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'quotesOnKeys',\n    label: 'Quotes On keys',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Area.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IAreaProps } from './Area.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Area: FC<IAreaProps> = ({\nannotations,\ndisplayLabels,\nyAxisTickAmount,\nxAxisTickAmount,\nchartColors,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nstrokeCurve,\nexportable,\nzoomable,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nvar yaxis: YAxisAnnotations[] = [];\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nif (annotations && annotations.length > 0) {\nyaxis.push({\ny: '70',\ny2: '90',\nlabel: {\ntext: 'Annotation',\n},\n});\n}\nvar datamultiplier = 1;\nif (yAxisMax) {\ndatamultiplier = yAxisMax / 150;\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'area',\nzoom: {\nenabled: zoomable,\n},\ntoolbar: {\ntools: {\ndownload: exportable,\n},\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: annotationsObj.yaxis,\nxaxis: annotationsObj.xaxis,\npoints: annotationsObj.points,\n},\ndataLabels: {\nenabled: displayLabels,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\nstroke: {\ncurve: strokeCurve,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nxaxis: {\ncategories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'],\ntitle: {\ntext: xAxisTitle,\n},\ntickAmount: xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: yAxisTitle,\n},\ntickAmount: yAxisTickAmount,\nmin: yAxisMin,\nmax: yAxisMax,\n},\n}),\n[\nlegendPos,\nname,\nshowLegend,\ntitlePosition,\nzoomable,\nexportable,\nstrokeCurve,\ndisplayLabels,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nannotationsObj,\nchartColors,\n],\n);\nconst series = useMemo(\n() => [\n{\nname: 'Value 1',\ndata: Array.from({ length: 9 }, () =>\nMath.floor(Math.random() * 150 * datamultiplier),\n),\n},\n{\nname: 'Value 2',\ndata: Array.from({ length: 9 }, () =>\nMath.floor(Math.random() * 150 * datamultiplier),\n),\n},\n],\n[yAxisMax],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Area;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Area.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaChartArea } from 'react-icons/fa';\nimport AreaSettings, { BasicSettings } from './Area.settings';\nexport default {\ncraft: {\ndisplayName: 'Area',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(AreaSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Area',\nexposed: true,\nicon: FaChartArea,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Area Chart name',\nlegendPosition: 'top',\ntitlePosition: 'center',\nexportable: true,\nzoomable: true,\ndisplayLabels: true,\nstrokeCurve: 'straight',\nxAxisTickAmount: 12,\nyAxisTickAmount: 8,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IAreaProps>;\nexport interface IAreaProps extends webforms.ComponentProps {\nname?: string;\nannotations?: IAnnotation[];\nchartColors?: IColor[];\nexportable?: boolean;\nzoomable?: boolean;\ndisplayLabels?: boolean;\nstrokeCurve?: 'straight' | 'smooth' | 'monotoneCubic' | 'stepline';\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\nxAxisTitle?: string;\nyAxisTitle?: string;\nyAxisTickAmount?: number;\nxAxisTickAmount?: number;\nyAxisMin?: number;\nyAxisMax?: number;\n}\nexport interface IColor {\ncolor: string;\n}\nexport interface IAnnotation {\ntext: string;\naxis: 'x' | 'y' | 'point';\ncoordType: 'string' | 'number' | 'datetime';\ncoordFrom: string;\ncoordTo: string;\nbackgroundColor: string;\nborderColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Area.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IAnnotation, IAreaProps } from './Area.config';\nimport { ApexOptions } from 'apexcharts';\nimport ReactApexChart from 'react-apexcharts';\nconst Area: FC<IAreaProps> = ({\ndisplayLabels,\nchartColors,\nannotations,\nyAxisTickAmount,\nxAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nstrokeCurve,\nexportable,\nzoomable,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nfor (const annotation of annotations || []) {\nif (annotation.axis === 'y') {\nyaxis.push({\ny: applyCoordType(annotation.coordType, annotation.coordFrom),\ny2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'x') {\nxaxis.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\nx2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'point') {\npoints.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\ny: parseFloat(annotation.coordTo),\nmarker: {\nsize: 8,\nfillColor: annotation.backgroundColor,\nstrokeColor: annotation.borderColor,\nradius: 2,\n},\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n}\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend\n? legendPosition!\n: 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = {\nchart: {\ntype: 'area',\nzoom: {\nenabled: datas.options.chart?.zoom?.enabled ?? zoomable,\n},\ntoolbar: {\ntools: {\ndownload: datas.options.chart?.toolbar?.tools?.download ?? exportable,\n},\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: datas.options.annotations?.yaxis ?? annotationsObj.yaxis,\nxaxis: datas.options.annotations?.xaxis ?? annotationsObj.xaxis,\npoints: datas.options.annotations?.points ?? annotationsObj.points,\n},\ndataLabels: {\nenabled: datas.options.dataLabels?.enabled ?? displayLabels,\n},\nlegend: {\nshow: datas.options.legend?.show ?? showLegend,\nposition: datas.options.legend?.position ?? legendPos,\n},\nstroke: {\ncurve: datas.options.stroke?.curve ?? strokeCurve,\n},\ntitle: {\ntext: datas.options.title?.text ?? name,\nalign: datas.options.title?.align ?? titlePosition,\n},\ngrid: {\nrow: {\ncolors: datas.options.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options.grid?.row?.opacity ?? 0.5,\n},\n},\nxaxis: {\ncategories: datas.options.xaxis?.categories,\ntitle: {\ntext: datas.options.xaxis?.title?.text ?? xAxisTitle,\n},\ntickAmount: datas.options.xaxis?.tickAmount ?? xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: datas.options.yaxis?.title?.text ?? yAxisTitle,\n},\ntickAmount: datas.options.yaxis?.tickAmount ?? yAxisTickAmount,\nmin: datas.options.yaxis?.min ?? yAxisMin,\nmax: datas.options.yaxis?.max ?? yAxisMax,\n},\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chartData.options}\nseries={chartData.series}\ntype={chartData.options.chart?.type}\n/>\n</div>\n);\n};\nfunction applyCoordType(type: IAnnotation['coordType'], value: string): string | number {\nswitch (type) {\ncase 'string':\nreturn value;\ncase 'number':\nreturn parseFloat(value);\ncase 'datetime':\nreturn new Date(value).getTime();\n}\n}\nexport default Area;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Area.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'strokeCurve',\nlabel: 'Stroke Curve',\ntype: ESetting.SELECT,\ndefaultValue: 'straight',\noptions: [\n{ value: 'straight', label: 'Straight' },\n{ value: 'smooth', label: 'Smooth' },\n{ value: 'monotoneCubic', label: 'Monotone Cubic' },\n{ value: 'stepline', label: 'Stepline' },\n],\n},\n{\nkey: 'xAxisTitle',\nlabel: 'X Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTitle',\nlabel: 'Y Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTickAmount',\nlabel: 'Y Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'xAxisTickAmount',\nlabel: 'X Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMin',\nlabel: 'Y Axis min value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMax',\nlabel: 'Y Axis max value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'zoomable',\nlabel: 'Zoomable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'exportable',\nlabel: 'Exportable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'annotations',\nname: 'text',\nlabel: 'Annotations',\ndata: [\n{\nkey: 'text',\nlabel: 'Text',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Annotation',\n},\n{\nkey: 'axis',\nlabel: 'Axis',\ntype: ESetting.SELECT,\ndefaultValue: 'x',\noptions: [\n{ value: 'x', label: 'X' },\n{ value: 'y', label: 'Y' },\n{ value: 'point', label: 'Point' },\n],\n},\n{\nkey: 'coordType',\nlabel: 'Coordinate Type',\ntype: ESetting.SELECT,\ndefaultValue: 'string',\noptions: [\n{ value: 'string', label: 'String' },\n{ value: 'number', label: 'Number' },\n{ value: 'datetime', label: 'Datetime' },\n],\n},\n{\nkey: 'coordFrom',\nlabel: 'From (X for point)',\nplaceholder: '2021-01-01',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'coordTo',\nlabel: 'To (Y for point)',\nplaceholder: '2021-12-31',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'backgroundColor',\nlabel: 'Background Color',\ntype: ESetting.COLOR_PICKER,\nname: 'backgroundColor',\n},\n{\nkey: 'borderColor',\nlabel: 'Border Color',\ntype: ESetting.COLOR_PICKER,\nname: 'borderColor',\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bar.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IBarProps } from './Bar.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Bar: FC<IBarProps> = ({\ndisplayLabels,\nannotations,\nchartColors,\nxAxisTickAmount,\nyAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\ntitlePosition,\nlegendPosition,\norientation,\nname,\nstacked,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nif (annotations && annotations.length > 0) {\nyaxis.push({\ny: '70',\ny2: '90',\nlabel: {\ntext: 'Annotation',\n},\n});\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nvar datamultiplier = 1;\nif (yAxisMax) {\ndatamultiplier = yAxisMax / 150;\n}\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'bar',\ntoolbar: {\ntools: {\ndownload: exportable,\n},\n},\nstacked: stacked,\nstackType: 'normal',\n},\nplotOptions: {\nbar: {\nhorizontal: orientation === 'horizontal',\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: annotationsObj.yaxis,\nxaxis: annotationsObj.xaxis,\npoints: annotationsObj.points,\n},\ndataLabels: {\nenabled: displayLabels,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nxaxis: {\ncategories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'],\ntitle: {\ntext: xAxisTitle,\n},\ntickAmount: xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: yAxisTitle,\n},\ntickAmount: yAxisTickAmount,\nmin: yAxisMin,\nmax: yAxisMax,\n},\n}),\n[\nlegendPos,\nstacked,\nname,\norientation,\nshowLegend,\ntitlePosition,\nexportable,\nannotations,\nxAxisTitle,\nyAxisTitle,\ndisplayLabels,\nyAxisMin,\nyAxisMax,\nxAxisTickAmount,\nyAxisTickAmount,\nchartColorsArr,\n],\n);\nconst series = useMemo(\n() => [\n{\nname: 'Value 1',\ndata: Array.from({ length: 9 }, () =>\nMath.floor(Math.random() * 150 * datamultiplier),\n),\n},\n{\nname: 'Value 2',\ndata: Array.from({ length: 9 }, () =>\nMath.floor(Math.random() * 150 * datamultiplier),\n),\n},\n],\n[yAxisMax],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Bar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bar.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaChartBar } from 'react-icons/fa';\nimport BarSettings, { BasicSettings } from './Bar.settings';\nexport default {\ncraft: {\ndisplayName: 'Bar',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(BarSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Bar',\nexposed: true,\nicon: FaChartBar,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Bar Chart name',\norientation: 'vertical',\nlegendPosition: 'top',\ntitlePosition: 'center',\nstacked: false,\nexportable: true,\ndisplayLabels: true,\nxAxisTickAmount: 12,\nyAxisTickAmount: 8,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IBarProps>;\nexport interface IBarProps extends webforms.ComponentProps {\nname?: string;\nstacked?: boolean;\norientation?: 'vertical' | 'horizontal';\nannotations?: IAnnotation[];\nchartColors?: IColor[];\nexportable?: boolean;\ndisplayLabels?: boolean;\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\nxAxisTitle?: string;\nyAxisTitle?: string;\nyAxisTickAmount?: number;\nxAxisTickAmount?: number;\nyAxisMin?: number;\nyAxisMax?: number;\n}\nexport interface IColor {\ncolor: string;\n}\nexport interface IAnnotation {\ntext: string;\naxis: 'x' | 'y' | 'point';\ncoordType: 'string' | 'number' | 'datetime';\ncoordFrom: string;\ncoordTo: string;\nbackgroundColor: string;\nborderColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bar.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IAnnotation, IBarProps } from './Bar.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Bar: FC<IBarProps> = ({\ndisplayLabels,\nchartColors,\nannotations,\nyAxisTickAmount,\nxAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\ntitlePosition,\nlegendPosition,\nname,\nstacked,\norientation,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend\n? legendPosition!\n: 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nfor (const annotation of annotations || []) {\nif (annotation.axis === 'y') {\nyaxis.push({\ny: applyCoordType(annotation.coordType, annotation.coordFrom),\ny2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'x') {\nxaxis.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\nx2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'point') {\npoints.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\ny: parseFloat(annotation.coordTo),\nmarker: {\nsize: 4,\nfillColor: annotation.backgroundColor,\nstrokeColor: annotation.borderColor,\n},\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n}\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = {\nchart: {\ntype: 'bar',\ntoolbar: {\ntools: {\ndownload: datas.options.chart?.toolbar?.tools?.download ?? exportable,\n},\n},\nstacked: datas.options.chart?.stacked ?? stacked,\nstackType: datas.options.chart?.stackType ?? 'normal',\n},\nplotOptions: {\nbar: {\nhorizontal: orientation === 'horizontal',\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: datas.options.annotations?.yaxis ?? annotationsObj.yaxis,\nxaxis: datas.options.annotations?.xaxis ?? annotationsObj.xaxis,\npoints: datas.options.annotations?.points ?? annotationsObj.points,\n},\ndataLabels: {\nenabled: datas.options.dataLabels?.enabled ?? displayLabels,\n},\nlegend: {\nshow: datas.options.legend?.show ?? showLegend,\nposition: datas.options.legend?.position ?? legendPos,\n},\ntitle: {\ntext: datas.options.title?.text ?? name,\nalign: datas.options.title?.align ?? titlePosition,\n},\ngrid: {\nrow: {\ncolors: datas.options.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options.grid?.row?.opacity ?? 0.5,\n},\n},\nxaxis: {\ncategories: datas.options.xaxis?.categories,\ntitle: {\ntext: datas.options.xaxis?.title?.text ?? xAxisTitle,\n},\ntickAmount: datas.options.xaxis?.tickAmount ?? xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: datas.options.yaxis?.title?.text ?? yAxisTitle,\n},\ntickAmount: datas.options.xaxis?.tickAmount ?? yAxisTickAmount,\nmin: datas.options.yaxis?.min ?? yAxisMin,\nmax: datas.options.yaxis?.max ?? yAxisMax,\n},\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chartData.options}\nseries={chartData.series}\ntype={chartData.options.chart?.type ?? 'bar'}\n/>\n</div>\n);\n};\nfunction applyCoordType(type: IAnnotation['coordType'], value: string): string | number {\nswitch (type) {\ncase 'string':\nreturn value;\ncase 'number':\nreturn parseFloat(value);\ncase 'datetime':\nreturn new Date(value).getTime();\n}\n}\nexport default Bar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bar.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'orientation',\nlabel: 'Orientation',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'vertical',\noptions: [\n{ value: 'vertical', icon: CgAlignBottom },\n{ value: 'horizontal', icon: CgAlignLeft },\n],\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'stacked',\nlabel: 'Stacked',\ntype: ESetting.CHECKBOX,\ndefaultValue: false,\n},\n{\nkey: 'xAxisTitle',\nlabel: 'X Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTitle',\nlabel: 'Y Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTickAmount',\nlabel: 'Y Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'xAxisTickAmount',\nlabel: 'X Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMin',\nlabel: 'Y Axis min value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMax',\nlabel: 'Y Axis max value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'exportable',\nlabel: 'Exportable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'annotations',\nname: 'text',\nlabel: 'Annotations',\ndata: [\n{\nkey: 'text',\nlabel: 'Text',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Annotation',\n},\n{\nkey: 'axis',\nlabel: 'Axis',\ntype: ESetting.SELECT,\ndefaultValue: 'x',\noptions: [\n{ value: 'x', label: 'X' },\n{ value: 'y', label: 'Y' },\n{ value: 'point', label: 'Point' },\n],\n},\n{\nkey: 'coordType',\nlabel: 'Coordinate Type',\ntype: ESetting.SELECT,\ndefaultValue: 'string',\noptions: [\n{ value: 'string', label: 'String' },\n{ value: 'number', label: 'Number' },\n{ value: 'datetime', label: 'Datetime' },\n],\n},\n{\nkey: 'coordFrom',\nlabel: 'From (X for point)',\nplaceholder: '2021-01-01',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'coordTo',\nlabel: 'To (Y for point)',\nplaceholder: '2021-12-31',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'backgroundColor',\nlabel: 'Background Color',\ntype: ESetting.COLOR_PICKER,\n},\n{\nkey: 'borderColor',\nlabel: 'Border Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bubble.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IBubbleProps } from './Bubble.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Bubble: FC<IBubbleProps> = ({\ndisplayLabels,\nannotations,\nchartColors,\nxAxisTickAmount,\nyAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\nzoomable,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nif (annotations && annotations.length > 0) {\nyaxis.push({\ny: '20',\ny2: '45',\nlabel: {\ntext: 'Annotation',\n},\n});\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'bubble',\nzoom: {\nenabled: zoomable,\n},\ntoolbar: {\ntools: {\ndownload: exportable,\n},\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: annotationsObj.yaxis,\nxaxis: annotationsObj.xaxis,\npoints: annotationsObj.points,\n},\ndataLabels: {\nenabled: displayLabels,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nxaxis: {\ntype: 'category',\ntitle: {\ntext: xAxisTitle,\n},\ntickAmount: xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: yAxisTitle,\n},\ntickAmount: yAxisTickAmount,\nmin: yAxisMin,\nmax: yAxisMax,\n},\n}),\n[\nlegendPos,\nname,\nshowLegend,\ntitlePosition,\nzoomable,\nexportable,\nannotations,\nxAxisTitle,\nyAxisTitle,\ndisplayLabels,\nyAxisMin,\nyAxisMax,\nxAxisTickAmount,\nyAxisTickAmount,\nchartColors,\n],\n);\nconst series = useMemo(\n() => [\n{\nname: 'Bubble1',\ndata: [\n{ x: '2017-02-11', y: 30, z: 20 },\n{ x: '2017-02-12', y: 40, z: 35 },\n{ x: '2017-02-13', y: 20, z: 25 },\n{ x: '2017-02-14', y: 50, z: 40 },\n{ x: '2017-02-15', y: 60, z: 50 },\n{ x: '2017-02-16', y: 15, z: 10 },\n{ x: '2017-02-17', y: 35, z: 30 },\n{ x: '2017-02-18', y: 45, z: 40 },\n{ x: '2017-02-19', y: 25, z: 20 },\n{ x: '2017-02-20', y: 55, z: 45 },\n{ x: '2017-02-21', y: 65, z: 55 },\n{ x: '2017-02-22', y: 18, z: 15 },\n{ x: '2017-02-23', y: 38, z: 28 },\n{ x: '2017-02-24', y: 48, z: 38 },\n{ x: '2017-02-25', y: 28, z: 18 },\n{ x: '2017-02-26', y: 58, z: 48 },\n{ x: '2017-02-27', y: 68, z: 58 },\n{ x: '2017-02-28', y: 22, z: 12 },\n{ x: '2017-03-01', y: 42, z: 32 },\n{ x: '2017-03-02', y: 52, z: 42 },\n],\n},\n{\nname: 'Bubble2',\ndata: [\n{ x: '2017-02-11', y: 12, z: 15 },\n{ x: '2017-02-12', y: 25, z: 10 },\n{ x: '2017-02-13', y: 45, z: 22 },\n{ x: '2017-02-14', y: 33, z: 35 },\n{ x: '2017-02-15', y: 56, z: 20 },\n{ x: '2017-02-16', y: 15, z: 18 },\n{ x: '2017-02-17', y: 60, z: 40 },\n{ x: '2017-02-18', y: 38, z: 30 },\n{ x: '2017-02-19', y: 50, z: 28 },\n{ x: '2017-02-20', y: 22, z: 24 },\n{ x: '2017-02-21', y: 47, z: 15 },\n{ x: '2017-02-22', y: 62, z: 32 },\n{ x: '2017-02-23', y: 19, z: 14 },\n{ x: '2017-02-24', y: 28, z: 38 },\n{ x: '2017-02-25', y: 34, z: 12 },\n{ x: '2017-02-26', y: 53, z: 42 },\n{ x: '2017-02-27', y: 26, z: 50 },\n{ x: '2017-02-28', y: 48, z: 26 },\n{ x: '2017-03-01', y: 29, z: 36 },\n{ x: '2017-03-02', y: 39, z: 18 },\n],\n},\n],\n[],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Bubble;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bubble.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { RiBubbleChartLine } from 'react-icons/ri';\nimport BubbleSettings, { BasicSettings } from './Bubble.settings';\nexport default {\ncraft: {\ndisplayName: 'Bubble',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(BubbleSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Bubble',\nexposed: true,\nicon: RiBubbleChartLine,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Bubble Chart name',\nlegendPosition: 'top',\ntitlePosition: 'center',\nexportable: true,\nzoomable: true,\ndisplayLabels: false,\nxAxisTickAmount: 12,\nyAxisTickAmount: 8,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IBubbleProps>;\nexport interface IBubbleProps extends webforms.ComponentProps {\nname?: string;\nannotations?: IAnnotation[];\nchartColors?: IColor[];\nexportable?: boolean;\nzoomable?: boolean;\ndisplayLabels?: boolean;\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\nxAxisTitle?: string;\nyAxisTitle?: string;\nyAxisTickAmount?: number;\nxAxisTickAmount?: number;\nyAxisMin?: number;\nyAxisMax?: number;\n}\nexport interface IColor {\ncolor: string;\n}\nexport interface IAnnotation {\ntext: string;\naxis: 'x' | 'y' | 'point';\ncoordType: 'string' | 'number' | 'datetime';\ncoordFrom: string;\ncoordTo: string;\nbackgroundColor: string;\nborderColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bubble.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IAnnotation, IBubbleProps } from './Bubble.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Bubble: FC<IBubbleProps> = ({\ndisplayLabels,\nchartColors,\nannotations,\nyAxisTickAmount,\nxAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\nzoomable,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend\n? legendPosition!\n: 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nfor (const annotation of annotations || []) {\nif (annotation.axis === 'y') {\nyaxis.push({\ny: applyCoordType(annotation.coordType, annotation.coordFrom),\ny2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'x') {\nxaxis.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\nx2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'point') {\npoints.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\ny: parseFloat(annotation.coordTo),\nmarker: {\nsize: 4,\nfillColor: annotation.backgroundColor,\nstrokeColor: annotation.borderColor,\n},\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n}\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = {\nchart: {\ntype: 'bubble',\nzoom: {\nenabled: datas.options?.chart?.zoom?.enabled ?? zoomable,\n},\ntoolbar: {\ntools: {\ndownload: datas.options?.chart?.toolbar?.tools?.download ?? exportable,\n},\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: datas.options?.annotations?.yaxis ?? annotationsObj.yaxis,\nxaxis: datas.options?.annotations?.xaxis ?? annotationsObj.xaxis,\npoints: datas.options?.annotations?.points ?? annotationsObj.points,\n},\ndataLabels: {\nenabled: datas.options?.dataLabels?.enabled ?? displayLabels,\n},\nlegend: {\nshow: datas.options?.legend?.show ?? showLegend,\nposition: datas.options?.legend?.position ?? legendPos,\n},\ntitle: {\ntext: datas.options?.title?.text ?? name,\nalign: datas.options?.title?.align ?? titlePosition,\n},\ngrid: {\nrow: {\ncolors: datas.options?.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options?.grid?.row?.opacity ?? 0.5,\n},\n},\nxaxis: {\ntype: 'category',\ntitle: {\ntext: datas.options?.xaxis?.title?.text ?? xAxisTitle,\n},\ntickAmount: datas.options?.xaxis?.tickAmount ?? xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: datas.options?.yaxis?.title?.text ?? yAxisTitle,\n},\ntickAmount: datas.options?.xaxis?.tickAmount ?? yAxisTickAmount,\nmin: datas.options?.yaxis?.min ?? yAxisMin,\nmax: datas.options?.yaxis?.max ?? yAxisMax,\n},\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart options={chartData.options} series={chartData.series} type=\"bubble\" />\n</div>\n);\n};\nfunction applyCoordType(type: IAnnotation['coordType'], value: string): string | number {\nswitch (type) {\ncase 'string':\nreturn value;\ncase 'number':\nreturn parseFloat(value);\ncase 'datetime':\nreturn new Date(value).getTime();\n}\n}\nexport default Bubble;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Bubble.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'xAxisTitle',\nlabel: 'X Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTitle',\nlabel: 'Y Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTickAmount',\nlabel: 'Y Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'xAxisTickAmount',\nlabel: 'X Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMin',\nlabel: 'Y Axis min value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMax',\nlabel: 'Y Axis max value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'exportable',\nlabel: 'Exportable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'zoomable',\nlabel: 'Zommable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'annotations',\nname: 'text',\nlabel: 'Annotations',\ndata: [\n{\nkey: 'text',\nlabel: 'Text',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Annotation',\n},\n{\nkey: 'axis',\nlabel: 'Axis',\ntype: ESetting.SELECT,\ndefaultValue: 'x',\noptions: [\n{ value: 'x', label: 'X' },\n{ value: 'y', label: 'Y' },\n{ value: 'point', label: 'Point' },\n],\n},\n{\nkey: 'coordType',\nlabel: 'Coordinate Type',\ntype: ESetting.SELECT,\ndefaultValue: 'string',\noptions: [\n{ value: 'string', label: 'String' },\n{ value: 'number', label: 'Number' },\n{ value: 'datetime', label: 'Datetime' },\n],\n},\n{\nkey: 'coordFrom',\nlabel: 'From (X for point)',\nplaceholder: '2021-01-01',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'coordTo',\nlabel: 'To (Y for point)',\nplaceholder: '2021-12-31',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'backgroundColor',\nlabel: 'Background Color',\ntype: ESetting.COLOR_PICKER,\n},\n{\nkey: 'borderColor',\nlabel: 'Border Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/CandleStick Data Sample.json", "file_contents": "{\n    \"series\": [\n        {\n            \"data\": [\n                {\n                    \"x\": \"2018-10-01\",\n                    \"y\": [\n                        6629.81,\n                        6650.5,\n                        6623.04,\n                        6633.33\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-02\",\n                    \"y\": [\n                        6632.01,\n                        6643.59,\n                        6620,\n                        6630.11\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-03\",\n                    \"y\": [\n                        6630.71,\n                        6648.95,\n                        6623.34,\n                        6635.65\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-04\",\n                    \"y\": [\n                        6635.65,\n                        6651,\n                        6629.67,\n                        6638.24\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-05\",\n                    \"y\": [\n                        6638.24,\n                        6640,\n                        6620,\n                        6624.47\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-06\",\n                    \"y\": [\n                        6624.53,\n                        6636.03,\n                        6621.68,\n                        6624.31\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-07\",\n                    \"y\": [\n                        6624.61,\n                        6632.2,\n                        6617,\n                        6626.02\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-08\",\n                    \"y\": [\n                        6627,\n                        6627.62,\n                        6584.22,\n                        6603.02\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-09\",\n                    \"y\": [\n                        6605,\n                        6608.03,\n                        6598.95,\n                        6604.01\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-10\",\n                    \"y\": [\n                        6604.5,\n                        6614.4,\n                        6602.26,\n                        6608.02\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-11\",\n                    \"y\": [\n                        6608.02,\n                        6610.68,\n                        6601.99,\n                        6608.91\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-12\",\n                    \"y\": [\n                        6608.91,\n                        6618.99,\n                        6608.01,\n                        6612\n                    ]\n                },\n                {\n                    \"x\": \"2018-10-13\",\n                    \"y\": [\n                        6600.63,\n                        6601.21,\n                        6590.39,\n                        6591\n                    ]\n                }\n            ]\n        }\n    ],\n    \"chart\": {\n        \"type\": \"candlestick\",\n        \"height\": 350\n    },\n    \"xaxis\": {\n        \"type\": \"datetime\"\n    },\n    \"yaxis\": {\n        \"title\": {\n            \"text\": \"Price\"\n        }\n    }\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Candlestick.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { ICandlestickProps } from './Candlestick.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Candlestick: FC<ICandlestickProps> = ({\ndisplayLabels,\nannotations,\nchartColors,\nxAxisTickAmount,\nyAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\nzoomable,\ntitlePosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nif (annotations && annotations.length > 0) {\nyaxis.push({\ny: 6585,\ny2: 6605,\nlabel: {\ntext: 'Annotation',\n},\n});\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'candlestick',\nzoom: {\nenabled: zoomable,\n},\ntoolbar: {\ntools: {\ndownload: exportable,\n},\n},\n},\nplotOptions: {\ncandlestick: {\ncolors: {\nupward: chartColorsArr[0],\ndownward: chartColorsArr[1],\n},\n},\n},\nannotations: {\nyaxis: annotationsObj.yaxis,\nxaxis: annotationsObj.xaxis,\npoints: annotationsObj.points,\n},\ndataLabels: {\nenabled: displayLabels,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nxaxis: {\ntype: 'category',\ntitle: {\ntext: xAxisTitle,\n},\ntickAmount: xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: yAxisTitle,\n},\ntickAmount: yAxisTickAmount,\nmin: yAxisMin,\nmax: yAxisMax,\n},\n}),\n[\nname,\ntitlePosition,\nzoomable,\nexportable,\nannotations,\nxAxisTitle,\nyAxisTitle,\ndisplayLabels,\nyAxisMin,\nyAxisMax,\nxAxisTickAmount,\nyAxisTickAmount,\nchartColorsArr,\n],\n);\nconst series = useMemo(\n() => [\n{\ndata: [\n{\nx: '2024-08-01',\ny: [6629.81, 6650.5, 6623.04, 6633.33],\n},\n{\nx: '2024-08-02',\ny: [6632.01, 6643.59, 6620, 6630.11],\n},\n{\nx: '2024-08-03',\ny: [6630.71, 6648.95, 6623.34, 6635.65],\n},\n{\nx: '2024-08-04',\ny: [6635.65, 6651, 6629.67, 6638.24],\n},\n{\nx: '2024-08-05',\ny: [6638.24, 6640, 6620, 6624.47],\n},\n{\nx: '2024-08-06',\ny: [6624.53, 6636.03, 6621.68, 6624.31],\n},\n{\nx: '2024-08-07',\ny: [6624.61, 6632.2, 6617, 6626.02],\n},\n{\nx: '2024-08-08',\ny: [6627, 6627.62, 6584.22, 6603.02],\n},\n{\nx: '2024-08-09',\ny: [6605, 6608.03, 6598.95, 6604.01],\n},\n{\nx: '2024-08-10',\ny: [6604.5, 6614.4, 6602.26, 6608.02],\n},\n{\nx: '2024-08-11',\ny: [6608.02, 6610.68, 6601.99, 6608.91],\n},\n{\nx: '2024-08-12',\ny: [6608.91, 6618.99, 6608.01, 6612],\n},\n{\nx: '2024-08-13',\ny: [6612, 6615.13, 6605.09, 6612],\n},\n{\nx: '2024-08-14',\ny: [6612, 6624.12, 6608.43, 6622.95],\n},\n{\nx: '2024-08-15',\ny: [6623.91, 6623.91, 6615, 6615.67],\n},\n],\n},\n],\n[],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Candlestick;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Candlestick.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineCandlestickChart } from 'react-icons/md';\nimport CandlestickSettings, { BasicSettings } from './Candlestick.settings';\nexport default {\ncraft: {\ndisplayName: 'Candlestick',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(CandlestickSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Candlestick',\nexposed: true,\nicon: MdOutlineCandlestickChart,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Candlestick Chart name',\ntitlePosition: 'center',\nexportable: true,\nzoomable: true,\ndisplayLabels: false,\nxAxisTickAmount: 12,\nyAxisTickAmount: 8,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<ICandlestickProps>;\nexport interface ICandlestickProps extends webforms.ComponentProps {\nname?: string;\nannotations?: IAnnotation[];\nchartColors?: IColor[];\nexportable?: boolean;\nzoomable?: boolean;\ndisplayLabels?: boolean;\ntitlePosition?: 'center' | 'left' | 'right';\nxAxisTitle?: string;\nyAxisTitle?: string;\nyAxisTickAmount?: number;\nxAxisTickAmount?: number;\nyAxisMin?: number;\nyAxisMax?: number;\n}\nexport interface IColor {\ncolor: string;\n}\nexport interface IAnnotation {\ntext: string;\naxis: 'x' | 'y' | 'point';\ncoordType: 'string' | 'number' | 'datetime';\ncoordFrom: string;\ncoordTo: string;\nbackgroundColor: string;\nborderColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Candlestick.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IAnnotation, ICandlestickProps } from './Candlestick.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Candlestick: FC<ICandlestickProps> = ({\ndisplayLabels,\nchartColors,\nannotations,\nyAxisTickAmount,\nxAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\nzoomable,\ntitlePosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nfor (const annotation of annotations || []) {\nif (annotation.axis === 'y') {\nyaxis.push({\ny: applyCoordType(annotation.coordType, annotation.coordFrom),\ny2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'x') {\nxaxis.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\nx2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'point') {\npoints.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\ny: parseFloat(annotation.coordTo),\nmarker: {\nsize: 4,\nfillColor: annotation.backgroundColor,\nstrokeColor: annotation.borderColor,\n},\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n}\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = {\nchart: {\ntype: 'candlestick',\nzoom: {\nenabled: datas.options?.chart?.zoom?.enabled ?? zoomable,\n},\ntoolbar: {\ntools: {\ndownload: datas.options?.chart?.toolbar?.tools?.download ?? exportable,\n},\n},\n},\nplotOptions: {\ncandlestick: {\ncolors: {\nupward: chartColorsArr[0],\ndownward: chartColorsArr[1],\n},\n},\n},\nannotations: {\nyaxis: datas.options?.annotations?.yaxis ?? annotationsObj.yaxis,\nxaxis: datas.options?.annotations?.xaxis ?? annotationsObj.xaxis,\npoints: datas.options?.annotations?.points ?? annotationsObj.points,\n},\ndataLabels: {\nenabled: datas.options?.dataLabels?.enabled ?? displayLabels,\n},\ntitle: {\ntext: datas.options?.title?.text ?? name,\nalign: datas.options?.title?.align ?? titlePosition,\n},\ngrid: {\nrow: {\ncolors: datas.options?.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options?.grid?.row?.opacity ?? 0.5,\n},\n},\nxaxis: {\ntype: 'category',\ntitle: {\ntext: datas.options?.xaxis?.title?.text ?? xAxisTitle,\n},\ntickAmount: datas.options?.xaxis?.tickAmount ?? xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: datas.options?.yaxis?.title?.text ?? yAxisTitle,\n},\ntickAmount: datas.options?.xaxis?.tickAmount ?? yAxisTickAmount,\nmin: datas.options?.yaxis?.min ?? yAxisMin,\nmax: datas.options?.yaxis?.max ?? yAxisMax,\n},\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chartData.options}\nseries={chartData.series}\ntype=\"candlestick\"\n/>\n</div>\n);\n};\nfunction applyCoordType(type: IAnnotation['coordType'], value: string): string | number {\nswitch (type) {\ncase 'string':\nreturn value;\ncase 'number':\nreturn parseFloat(value);\ncase 'datetime':\nreturn new Date(value).getTime();\n}\n}\nexport default Candlestick;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Candlestick.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { CgAlignLeft, CgAlignRight, CgAlignCenter } from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'xAxisTitle',\nlabel: 'X Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTitle',\nlabel: 'Y Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTickAmount',\nlabel: 'Y Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'xAxisTickAmount',\nlabel: 'X Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMin',\nlabel: 'Y Axis min value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMax',\nlabel: 'Y Axis max value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'exportable',\nlabel: 'Exportable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'zoomable',\nlabel: 'Zoomable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'annotations',\nname: 'text',\nlabel: 'Annotations',\ndata: [\n{\nkey: 'text',\nlabel: 'Text',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Annotation',\n},\n{\nkey: 'axis',\nlabel: 'Axis',\ntype: ESetting.SELECT,\ndefaultValue: 'x',\noptions: [\n{ value: 'x', label: 'X' },\n{ value: 'y', label: 'Y' },\n{ value: 'point', label: 'Point' },\n],\n},\n{\nkey: 'coordType',\nlabel: 'Coordinate Type',\ntype: ESetting.SELECT,\ndefaultValue: 'string',\noptions: [\n{ value: 'string', label: 'String' },\n{ value: 'number', label: 'Number' },\n{ value: 'datetime', label: 'Datetime' },\n],\n},\n{\nkey: 'coordFrom',\nlabel: 'From (X for point)',\nplaceholder: '2021-01-01',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'coordTo',\nlabel: 'To (Y for point)',\nplaceholder: '2021-12-31',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'backgroundColor',\nlabel: 'Background Color',\ntype: ESetting.COLOR_PICKER,\n},\n{\nkey: 'borderColor',\nlabel: 'Border Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Donut.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IDonutProps } from './Donut.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Donut: FC<IDonutProps> = ({\ndisplayLabels,\nchartColors,\ngradient,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst gradientType = gradient ? 'gradient' : 'solid';\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'donut',\n},\ncolors: chartColorsArr,\nresponsive: [\n{\nbreakpoint: 480,\noptions: {\nchart: {\nwidth: 200,\n},\nlegend: {\nposition: 'bottom',\n},\n},\n},\n],\ndataLabels: {\nenabled: displayLabels,\n},\nlabels: [\n'Comedy',\n'Action',\n'SciFi',\n'Drama',\n'Horror',\n'Romance',\n'Thriller',\n'Mystery',\n'Documentary',\n],\nfill: {\ntype: gradientType,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\n}),\n[legendPos, name, showLegend, titlePosition, gradientType, displayLabels, chartColors],\n);\nconst series = useMemo(\n() => Array.from({ length: 9 }, () => Math.floor(Math.random() * 150)),\n[],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Donut;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Donut.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdDonutLarge } from 'react-icons/md';\nimport DonutSettings, { BasicSettings } from './Donut.settings';\nexport default {\ncraft: {\ndisplayName: 'Donut',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(DonutSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Donut',\nexposed: true,\nicon: MdDonutLarge,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Donut Chart name',\nlegendPosition: 'top',\ntitlePosition: 'center',\ngradient: false,\ndisplayLabels: true,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IDonutProps>;\nexport interface IDonutProps extends webforms.ComponentProps {\nname?: string;\nchartColors?: IColor[];\ngradient?: boolean;\ndisplayLabels?: boolean;\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\n}\nexport interface IColor {\ncolor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Donut.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IDonutProps } from './Donut.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Donut: FC<IDonutProps> = ({\ndisplayLabels,\nchartColors,\ngradient,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nconst gradientType = gradient ? 'gradient' : 'solid';\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend\n? legendPosition!\n: 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = {\nchart: {\ntype: 'donut',\n},\ncolors: chartColorsArr,\nresponsive: datas.options.responsive ?? [\n{\nbreakpoint: 480,\noptions: {\nchart: {\nwidth: 200,\n},\nlegend: {\nposition: 'bottom',\n},\n},\n},\n],\ndataLabels: {\nenabled: datas.options.dataLabels?.enabled ?? displayLabels,\n},\nlabels: datas.options.labels ?? [],\nfill: {\ntype: gradientType,\n},\nlegend: {\nshow: datas.options.legend?.show ?? showLegend,\nposition: datas.options.legend?.position ?? legendPos,\n},\ntitle: {\ntext: datas.options.title?.text ?? name,\nalign: datas.options.title?.align ?? titlePosition,\n},\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chartData.options}\nseries={chartData.series}\ntype={chartData.options.chart?.type ?? 'donut'}\n/>\n</div>\n);\n};\nexport default Donut;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Donut.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'gradient',\nlabel: 'Gradient',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display Labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Heatmap Data Sample.json", "file_contents": "{\n    \"series\": [\n        {\n            \"name\": \"Metric1\",\n            \"data\": [\n                {\n                    \"x\": \"Jan\",\n                    \"y\": 30\n                },\n                {\n                    \"x\": \"Feb\",\n                    \"y\": 20\n                },\n                {\n                    \"x\": \"Mar\",\n                    \"y\": 50\n                },\n                {\n                    \"x\": \"Apr\",\n                    \"y\": 60\n                },\n                {\n                    \"x\": \"May\",\n                    \"y\": 40\n                },\n                {\n                    \"x\": \"Jun\",\n                    \"y\": 70\n                },\n                {\n                    \"x\": \"Jul\",\n                    \"y\": 55\n                },\n                {\n                    \"x\": \"Aug\",\n                    \"y\": 80\n                },\n                {\n                    \"x\": \"Sep\",\n                    \"y\": 30\n                },\n                {\n                    \"x\": \"Oct\",\n                    \"y\": 75\n                },\n                {\n                    \"x\": \"Nov\",\n                    \"y\": 85\n                },\n                {\n                    \"x\": \"Dec\",\n                    \"y\": 45\n                }\n            ]\n        },\n        {\n            \"name\": \"Metric2\",\n            \"data\": [\n                {\n                    \"x\": \"Jan\",\n                    \"y\": 40\n                },\n                {\n                    \"x\": \"Feb\",\n                    \"y\": 30\n                },\n                {\n                    \"x\": \"Mar\",\n                    \"y\": 60\n                },\n                {\n                    \"x\": \"Apr\",\n                    \"y\": 20\n                },\n                {\n                    \"x\": \"May\",\n                    \"y\": 50\n                },\n                {\n                    \"x\": \"Jun\",\n                    \"y\": 80\n                },\n                {\n                    \"x\": \"Jul\",\n                    \"y\": 45\n                },\n                {\n                    \"x\": \"Aug\",\n                    \"y\": 65\n                },\n                {\n                    \"x\": \"Sep\",\n                    \"y\": 70\n                },\n                {\n                    \"x\": \"Oct\",\n                    \"y\": 60\n                },\n                {\n                    \"x\": \"Nov\",\n                    \"y\": 40\n                },\n                {\n                    \"x\": \"Dec\",\n                    \"y\": 75\n                }\n            ]\n        },\n        {\n            \"name\": \"Metric3\",\n            \"data\": [\n                {\n                    \"x\": \"Jan\",\n                    \"y\": 20\n                },\n                {\n                    \"x\": \"Feb\",\n                    \"y\": 40\n                },\n                {\n                    \"x\": \"Mar\",\n                    \"y\": 30\n                },\n                {\n                    \"x\": \"Apr\",\n                    \"y\": 70\n                },\n                {\n                    \"x\": \"May\",\n                    \"y\": 60\n                },\n                {\n                    \"x\": \"Jun\",\n                    \"y\": 90\n                },\n                {\n                    \"x\": \"Jul\",\n                    \"y\": 85\n                },\n                {\n                    \"x\": \"Aug\",\n                    \"y\": 95\n                },\n                {\n                    \"x\": \"Sep\",\n                    \"y\": 40\n                },\n                {\n                    \"x\": \"Oct\",\n                    \"y\": 55\n                },\n                {\n                    \"x\": \"Nov\",\n                    \"y\": 65\n                },\n                {\n                    \"x\": \"Dec\",\n                    \"y\": 50\n                }\n            ]\n        }\n    ],\n    \"options\": {}\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Heatmap.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IHeatmapProps } from './Heatmap.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Heatmap: FC<IHeatmapProps> = ({\ndisplayLabels,\nchartColors = [],\nxAxisTitle,\nyAxisTitle,\nexportable,\ntitlePosition,\nname,\ncolorFlipper,\ncolorRanges,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nlet initialColors = ['#008FFB'];\nconst chartColorsArr =\nchartColors.length > 0\n? chartColors?.map((color) =>\ncolor.color.length > 7 ? color.color.substring(0, 7) : color.color,\n)\n: initialColors;\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'heatmap',\ntoolbar: {\ntools: {\ndownload: exportable,\n},\n},\n},\nplotOptions: {\nheatmap: {\ncolorScale: {\ninverse: colorFlipper,\nranges:\ncolorRanges?.map((color) => ({\nfrom: color.from,\nto: color.to,\ncolor:\ncolor.color.length > 7\n? color.color.substring(0, 7)\n: color.color,\n})) ?? [],\n},\n},\n},\ncolors: chartColorsArr,\ndataLabels: {\nenabled: displayLabels,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nxaxis: {\ntype: 'category',\ntitle: {\ntext: xAxisTitle,\n},\n},\nyaxis: {\ntitle: {\ntext: yAxisTitle,\n},\n},\n}),\n[\nname,\nchartColorsArr,\ntitlePosition,\nexportable,\nxAxisTitle,\nyAxisTitle,\ndisplayLabels,\ncolorFlipper,\ncolorRanges,\n],\n);\nconst series = useMemo(\n() => [\n{\nname: 'Metric1',\ndata: [\n{ x: 'Jan', y: 30 },\n{ x: 'Feb', y: 20 },\n{ x: 'Mar', y: 50 },\n{ x: 'Apr', y: 60 },\n{ x: 'May', y: 40 },\n{ x: 'Jun', y: 70 },\n{ x: 'Jul', y: 55 },\n{ x: 'Aug', y: 80 },\n{ x: 'Sep', y: 30 },\n{ x: 'Oct', y: 75 },\n{ x: 'Nov', y: 85 },\n{ x: 'Dec', y: 45 },\n],\n},\n{\nname: 'Metric2',\ndata: [\n{ x: 'Jan', y: 40 },\n{ x: 'Feb', y: 30 },\n{ x: 'Mar', y: 60 },\n{ x: 'Apr', y: 20 },\n{ x: 'May', y: 50 },\n{ x: 'Jun', y: 80 },\n{ x: 'Jul', y: 45 },\n{ x: 'Aug', y: 65 },\n{ x: 'Sep', y: 70 },\n{ x: 'Oct', y: 60 },\n{ x: 'Nov', y: 40 },\n{ x: 'Dec', y: 75 },\n],\n},\n{\nname: 'Metric3',\ndata: [\n{ x: 'Jan', y: 20 },\n{ x: 'Feb', y: 40 },\n{ x: 'Mar', y: 30 },\n{ x: 'Apr', y: 70 },\n{ x: 'May', y: 60 },\n{ x: 'Jun', y: 90 },\n{ x: 'Jul', y: 85 },\n{ x: 'Aug', y: 95 },\n{ x: 'Sep', y: 40 },\n{ x: 'Oct', y: 55 },\n{ x: 'Nov', y: 65 },\n{ x: 'Dec', y: 50 },\n],\n},\n],\n[],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Heatmap;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Heatmap.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { RiFireFill } from 'react-icons/ri';\nimport HeatmapSettings, { BasicSettings } from './Heatmap.settings';\nexport default {\ncraft: {\ndisplayName: 'Heatmap',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(HeatmapSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Heatmap',\nexposed: true,\nicon: RiFireFill,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Heatmap Chart name',\nlegendPosition: 'top',\ntitlePosition: 'center',\nexportable: true,\nzoomable: true,\ndisplayLabels: false,\nstrokeCurve: 'straight',\ncolorFlipper: false,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IHeatmapProps>;\nexport interface IHeatmapProps extends webforms.ComponentProps {\nname?: string;\nchartColors: IColor[];\nexportable?: boolean;\ndisplayLabels?: boolean;\ntitlePosition?: 'center' | 'left' | 'right';\nxAxisTitle?: string;\nyAxisTitle?: string;\ncolorFlipper?: boolean;\ncolorRanges?: IColorRange[];\n}\nexport interface IColor {\ncolor: string;\n}\nexport interface IColorRange extends IColor {\nfrom: number;\nto: number;\n}\nexport interface IAnnotation {\ntext: string;\naxis: 'x' | 'y' | 'point';\ncoordType: 'string' | 'number' | 'datetime';\ncoordFrom: string;\ncoordTo: string;\nbackgroundColor: string;\nborderColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Heatmap.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IHeatmapProps } from './Heatmap.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Heatmap: FC<IHeatmapProps> = ({\ndisplayLabels,\nchartColors = [],\nxAxisTitle,\nyAxisTitle,\nexportable,\ntitlePosition,\ncolorFlipper,\ncolorRanges,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nlet initialColors = ['#008FFB'];\nconst chartColorsArr =\nchartColors.length > 0\n? chartColors?.map((color) =>\ncolor.color.length > 7 ? color.color.substring(0, 7) : color.color,\n)\n: initialColors;\nconst options: ApexOptions = {\nchart: {\ntype: 'heatmap',\ntoolbar: {\ntools: {\ndownload: datas.options?.chart?.toolbar?.tools?.download ?? exportable,\n},\n},\n},\nplotOptions: {\nheatmap: {\ncolorScale: {\ninverse:\ndatas.options?.plotOptions?.heatmap?.colorScale?.inverse ??\ncolorFlipper,\nranges:\ndatas.options?.plotOptions?.heatmap?.colorScale?.ranges ??\ncolorRanges?.map((color) => ({\nfrom: color.from,\nto: color.to,\ncolor:\ncolor.color.length > 7\n? color.color.substring(0, 7)\n: color.color,\n})) ??\n[],\n},\n},\n},\ncolors: chartColorsArr,\ndataLabels: {\nenabled: datas.options?.dataLabels?.enabled ?? displayLabels,\n},\ntitle: {\ntext: datas.options?.title?.text ?? name,\nalign: datas.options?.title?.align ?? titlePosition,\n},\ngrid: {\nrow: {\ncolors: datas.options?.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options?.grid?.row?.opacity ?? 0.5,\n},\n},\nxaxis: {\ntype: 'category',\ntitle: {\ntext: datas.options?.xaxis?.title?.text ?? xAxisTitle,\n},\n},\nyaxis: {\ntitle: {\ntext: datas.options?.yaxis?.title?.text ?? yAxisTitle,\n},\n},\n};\nvar series: any[] = datas.series ?? [];\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart options={chartData.options} series={chartData.series} type=\"heatmap\" />\n</div>\n);\n};\nexport default Heatmap;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Heatmap.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { CgAlignLeft, CgAlignRight, CgAlignCenter } from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'xAxisTitle',\nlabel: 'X Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTitle',\nlabel: 'Y Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'exportable',\nlabel: 'Exportable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n{\nkey: 'colorFlipper',\nlabel: 'Color Flipper',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'colorRanges',\nlabel: 'Color Ranges',\ntype: ESetting.DATAGRID,\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n{\nkey: 'from',\nlabel: 'From',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'to',\nlabel: 'To',\ntype: ESetting.NUMBER_FIELD,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/index.tsx", "file_contents": "import Donut from './Donut';\nimport Pie from './Pie';\nimport Area from './Area';\nimport Bar from './Bar';\nimport Line from './Line';\nimport Bubble from './Bubble';\nimport Candlestick from './Candlestick';\nimport Heatmap from './Heatmap';\nimport RangeBar from './RangeBar';\nimport Polar from './Polar';\nexport default {\nDonut,\nPie,\nArea,\nBar,\nLine,\nBubble,\nCandlestick,\nHeatmap,\nRangeBar,\nPolar,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Line Data Sample.json", "file_contents": "{\n    \"options\": {\n        \"xaxis\": {\n            \"categories\": [\n                \"Jan\",\n                \"Feb\",\n                \"Mar\",\n                \"Apr\",\n                \"May\",\n                \"Jun\",\n                \"Jul\",\n                \"Aug\",\n                \"Sep\"\n            ]\n        }\n    },\n    \"series\": [\n        {\n            \"name\": \"Sales\",\n            \"data\": [\n                30,\n                40,\n                35,\n                50,\n                49,\n                60,\n                70,\n                91,\n                125\n            ]\n        },\n        {\n            \"name\": \"Earning\",\n            \"data\": [\n                20,\n                35,\n                30,\n                40,\n                35,\n                60,\n                47,\n                55,\n                70\n            ]\n        }\n    ]\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Line.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { ILineProps } from './Line.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Line: FC<ILineProps> = ({\nannotations,\ndisplayLabels,\nyAxisTickAmount,\nxAxisTickAmount,\nchartColors,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nstrokeCurve,\nchartType,\nexportable,\nzoomable,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nif (annotations && annotations.length > 0) {\nyaxis.push({\ny: '50',\ny2: '75',\nlabel: {\ntext: 'Annotation',\n},\n});\n}\nvar datamultiplier = 1;\nif (yAxisMax) {\ndatamultiplier = yAxisMax / 150;\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: chartType,\nzoom: {\nenabled: zoomable,\n},\ntoolbar: {\ntools: {\ndownload: exportable,\n},\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: annotationsObj.yaxis,\nxaxis: annotationsObj.xaxis,\npoints: annotationsObj.points,\n},\ndataLabels: {\nenabled: displayLabels,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\nstroke: {\ncurve: strokeCurve,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nxaxis: {\ncategories: [\n'Jan',\n'Feb',\n'Mar',\n'Apr',\n'May',\n'Jun',\n'Jul',\n'Aug',\n'Sep',\n'Oct',\n'Nov',\n'Dec',\n],\ntitle: {\ntext: xAxisTitle,\n},\ntickAmount: xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: yAxisTitle,\n},\ntickAmount: yAxisTickAmount,\nmin: yAxisMin,\nmax: yAxisMax,\n},\n}),\n[\nlegendPos,\nname,\nshowLegend,\ntitlePosition,\nzoomable,\nexportable,\nstrokeCurve,\nchartType,\nxAxisTitle,\nyAxisTitle,\ndisplayLabels,\nannotations,\nyAxisMin,\nyAxisMax,\nchartColors,\nxAxisTickAmount,\nyAxisTickAmount,\n],\n);\nconst series = useMemo(\n() => [\n{\nname: 'Value 1',\ndata: Array.from({ length: 12 }, () =>\nMath.floor(Math.random() * 150 * datamultiplier),\n),\n},\n{\nname: 'Value 2',\ndata: Array.from({ length: 12 }, () =>\nMath.floor(Math.random() * 150 * datamultiplier),\n),\n},\n],\n[yAxisMax],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Line;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Line.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaChartLine } from \"react-icons/fa\";\nimport LineSettings, { BasicSettings } from './Line.settings';\nexport default {\ncraft: {\ndisplayName: 'Line',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(LineSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Line',\nexposed: true,\nicon: FaChartLine,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Line Chart name',\nlegendPosition: 'top',\ntitlePosition: 'center',\nchartType: 'line',\nexportable: true,\nzoomable: true,\ndisplayLabels: true,\nstrokeCurve: 'straight',\nxAxisTickAmount: 12,\nyAxisTickAmount: 8,\nstyle: {\nwidth: '500px',\n}\n},\n} as T4DComponentConfig<ILineProps>;\nexport interface ILineProps extends webforms.ComponentProps {\nname?: string;\nchartType?: 'line' | 'area' | 'bar';\nannotations?: IAnnotation[];\nchartColors?: IColor[];\nexportable?: boolean;\nzoomable?: boolean;\ndisplayLabels?: boolean;\nstrokeCurve?: 'straight' | 'smooth' | 'monotoneCubic' | 'stepline';\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\nxAxisTitle?: string;\nyAxisTitle?: string;\nyAxisTickAmount?: number;\nxAxisTickAmount?: number;\nyAxisMin?: number;\nyAxisMax?: number;\n}\nexport interface IColor {\ncolor: string;\n}\nexport interface IAnnotation {\ntext: string;\naxis: 'x' | 'y' | 'point';\ncoordType: 'string' | 'number' | 'datetime';\ncoordFrom: string;\ncoordTo: string;\nbackgroundColor: string;\nborderColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Line.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IAnnotation, ILineProps } from './Line.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Line: FC<ILineProps> = ({ annotations, displayLabels, yAxisTickAmount, xAxisTickAmount, chartColors, yAxisMin, yAxisMax, xAxisTitle, yAxisTitle, strokeCurve, chartType, exportable, zoomable, titlePosition, legendPosition, name, style, className, classNames = [] }) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string')\ndatas = JSON.parse(v);\nelse\ndatas = JSON.parse(JSON.stringify(v));\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nfor (const annotation of annotations || []) {\nif (annotation.axis === 'y') {\nyaxis.push({\ny: applyCoordType(annotation.coordType, annotation.coordFrom),\ny2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor\n}\n}\n});\n} else if (annotation.axis === 'x') {\nxaxis.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\nx2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor\n}\n}\n});\n} else if (annotation.axis === 'point') {\npoints.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\ny: parseFloat(annotation.coordTo),\nmarker: {\nsize: 8,\nfillColor: annotation.backgroundColor,\nstrokeColor: annotation.borderColor,\nradius: 2\n},\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor\n}\n}\n});\n}\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points }\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = ['#FF4560', '#008FFB', '#00E396', '#FEB019', '#FF5828', '#9E9E9E', '#36B37E', '#607D8B', '#4BC0C0', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722', '#795548'];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = {\nchart: {\ntype: chartType,\nzoom: {\nenabled: datas.options.chart?.zoom?.enabled ?? zoomable\n},\ntoolbar: {\ntools: {\ndownload: datas.options.chart?.toolbar?.tools?.download ?? exportable\n}\n}\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: datas.options.annotations?.yaxis ?? annotationsObj.yaxis,\nxaxis: datas.options.annotations?.xaxis ?? annotationsObj.xaxis,\npoints: datas.options.annotations?.points ?? annotationsObj.points\n},\ndataLabels: {\nenabled: datas.options.dataLabels?.enabled ?? displayLabels\n},\nlegend: {\nshow: datas.options.legend?.show ?? showLegend,\nposition: datas.options.legend?.position ?? legendPos,\n},\nstroke: {\ncurve: datas.options.stroke?.curve ?? strokeCurve\n},\ntitle: {\ntext: datas.options.title?.text ?? name,\nalign: datas.options.title?.align ?? titlePosition\n},\ngrid: {\nrow: {\ncolors: datas.options.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options.grid?.row?.opacity ?? 0.5\n}\n},\nxaxis: {\ncategories: datas.options.xaxis?.categories,\ntitle: {\ntext: datas.options.xaxis?.title?.text ?? xAxisTitle\n},\ntickAmount: datas.options.xaxis?.tickAmount ?? xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: datas.options.yaxis?.title?.text ?? yAxisTitle\n},\ntickAmount: datas.options.xaxis?.tickAmount ?? yAxisTickAmount,\nmin: datas.options.yaxis?.min ?? yAxisMin,\nmax: datas.options.yaxis?.max ?? yAxisMax\n}\n};\nvar series: any[] = datas.series\nif (datas.options.xaxis?.type === 'datetime') {\nif (options.xaxis) {\noptions.xaxis.labels = {\nformatter: function (value: string, timestamp: number, opts: any) {\nif (timestamp) {\nvar formatOptions: Intl.DateTimeFormatOptions = {\nyear: \"numeric\",\nmonth: \"numeric\",\nday: \"numeric\",\nhour: \"numeric\",\nminute: \"numeric\",\nhour12: false\n};\nif (opts?.w.globals.zoomed ?? false) {\nreturn new Intl.DateTimeFormat(\"fr-FR\", formatOptions).format(new Date(value));\n}\nelse {\nif (!opts) {\nreturn new Intl.DateTimeFormat(\"fr-FR\", formatOptions).format(new Date(value));\n}\nreturn new Intl.DateTimeFormat(\"fr-FR\").format(new Date(value));\n}\n}\nreturn \"\";\n}\n}\n}\n}\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart options={chartData.options} series={chartData.series} type={chartData.options.chart?.type ?? 'line'} />\n</div>\n);\n};\nfunction applyCoordType(type: IAnnotation['coordType'], value: string): string | number {\nswitch (type) {\ncase 'string':\nreturn value;\ncase 'number':\nreturn parseFloat(value);\ncase 'datetime':\nreturn new Date(value).getTime();\n}\n}\nexport default Line;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Line.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'strokeCurve',\nlabel: 'Stroke Curve',\ntype: ESetting.SELECT,\ndefaultValue: 'straight',\noptions: [\n{ value: 'straight', label: 'Straight' },\n{ value: 'smooth', label: 'Smooth' },\n{ value: 'monotoneCubic', label: 'Monotone Cubic' },\n{ value: 'stepline', label: 'Stepline' },\n],\n},\n{\nkey: 'xAxisTitle',\nlabel: 'X Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTitle',\nlabel: 'Y Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTickAmount',\nlabel: 'Y Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'xAxisTickAmount',\nlabel: 'X Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMin',\nlabel: 'Y Axis min value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMax',\nlabel: 'Y Axis max value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'zoomable',\nlabel: 'Zoomable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'exportable',\nlabel: 'Exportable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'annotations',\nname: 'text',\nlabel: 'Annotations',\ndata: [\n{\nkey: 'text',\nlabel: 'Text',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Annotation',\n},\n{\nkey: 'axis',\nlabel: 'Axis',\ntype: ESetting.SELECT,\ndefaultValue: 'x',\noptions: [\n{ value: 'x', label: 'X' },\n{ value: 'y', label: 'Y' },\n{ value: 'point', label: 'Point' },\n],\n},\n{\nkey: 'coordType',\nlabel: 'Coordinate Type',\ntype: ESetting.SELECT,\ndefaultValue: 'string',\noptions: [\n{ value: 'string', label: 'String' },\n{ value: 'number', label: 'Number' },\n{ value: 'datetime', label: 'Datetime' },\n],\n},\n{\nkey: 'coordFrom',\nlabel: 'From (X for point)',\nplaceholder: '2021-01-01',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'coordTo',\nlabel: 'To (Y for point)',\nplaceholder: '2021-12-31',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'backgroundColor',\nlabel: 'Background Color',\ntype: ESetting.COLOR_PICKER,\n},\n{\nkey: 'borderColor',\nlabel: 'Border Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Pie Data Sample.json", "file_contents": "{\n    \"series\": [\n        44,\n        55,\n        41,\n        17,\n        15\n    ],\n    \"options\": {\n        \"labels\": [\n            \"Series A\",\n            \"Series B\",\n            \"Series C\",\n            \"Series D\",\n            \"Series E\"\n        ]\n    }\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Pie.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IPieProps } from './Pie.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Pie: FC<IPieProps> = ({\ndisplayLabels,\nchartColors,\ngradient,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst gradientType = gradient ? 'gradient' : 'solid';\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'pie',\n},\ncolors: chartColorsArr,\nresponsive: [\n{\nbreakpoint: 480,\noptions: {\nchart: {\nwidth: 200,\n},\nlegend: {\nposition: 'bottom',\n},\n},\n},\n],\ndataLabels: {\nenabled: displayLabels,\n},\nlabels: [\n'Comedy',\n'Action',\n'SciFi',\n'Drama',\n'Horror',\n'Romance',\n'Thriller',\n'Mystery',\n'Documentary',\n],\nfill: {\ntype: gradientType,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\n}),\n[legendPos, name, showLegend, titlePosition, chartColors, gradientType, displayLabels],\n);\nconst series = useMemo(\n() => Array.from({ length: 9 }, () => Math.floor(Math.random() * 150)),\n[],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Pie;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Pie.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaChartPie } from 'react-icons/fa';\nimport PieSettings, { BasicSettings } from './Pie.settings';\nexport default {\ncraft: {\ndisplayName: 'Pie',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(PieSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Pie',\nexposed: true,\nicon: FaChartPie,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Pie Chart name',\nlegendPosition: 'top',\ntitlePosition: 'center',\ngradient: false,\ndisplayLabels: true,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IPieProps>;\nexport interface IPieProps extends webforms.ComponentProps {\nname?: string;\nchartColors?: IColor[];\ngradient?: boolean;\ndisplayLabels?: boolean;\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\n}\nexport interface IColor {\ncolor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Pie.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IPieProps } from './Pie.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Pie: FC<IPieProps> = ({\ndisplayLabels,\nchartColors,\ngradient,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nconst gradientType = gradient ? 'gradient' : 'solid';\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend\n? legendPosition!\n: 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = {\nchart: {\ntype: 'pie',\n},\ncolors: chartColorsArr,\nresponsive: datas.options.responsive ?? [\n{\nbreakpoint: 480,\noptions: {\nchart: {\nwidth: 200,\n},\nlegend: {\nposition: 'bottom',\n},\n},\n},\n],\nlabels: datas.options.labels ?? [],\ndataLabels: {\nenabled: datas.options.dataLabels?.enabled ?? displayLabels,\n},\nfill: {\ntype: gradientType,\n},\nlegend: {\nshow: datas.options.legend?.show ?? showLegend,\nposition: datas.options.legend?.position ?? legendPos,\n},\ntitle: {\ntext: datas.options.title?.text ?? name,\nalign: datas.options.title?.align ?? titlePosition,\n},\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chartData.options}\nseries={chartData.series}\ntype={chartData.options.chart?.type ?? 'pie'}\n/>\n</div>\n);\n};\nexport default Pie;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Pie.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'gradient',\nlabel: 'Gradient',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display Labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Polar Area Sample.json", "file_contents": "{\n    \"series\": [\n        44,\n        55,\n        41,\n        17,\n        15\n    ],\n    \"options\": {\n        \"labels\": [\n            \"Rose A\",\n            \"Rose B\",\n            \"Rose C\",\n            \"Rose D\",\n            \"Rose E\"\n        ],\n        \"stroke\": {\n            \"colors\": [\n                \"#fff\"\n            ]\n        },\n        \"fill\": {\n            \"opacity\": 0.8\n        },\n        \"responsive\": [\n            {\n                \"breakpoint\": 480,\n                \"options\": {\n                    \"chart\": {\n                        \"width\": 200\n                    },\n                    \"legend\": {\n                        \"position\": \"bottom\"\n                    }\n                }\n            }\n        ]\n    }\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Polar.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IPolarProps } from './Polar.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Polar: FC<IPolarProps> = ({\ndisplayLabels,\nyAxisTickAmount,\nchartColors,\nyAxisMax,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'polarArea',\n},\nlabels: ['Rose A', 'Rose B', 'Rose C', 'Rose D', 'Rose E'],\ncolors: chartColorsArr,\ndataLabels: {\nenabled: displayLabels,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\nstroke: {\ncolors: chartColorsArr,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nyaxis: {\ntickAmount: yAxisTickAmount,\nmax: yAxisMax,\n},\n}),\n[\nlegendPos,\nname,\nshowLegend,\ntitlePosition,\ndisplayLabels,\nyAxisMax,\nyAxisTickAmount,\nchartColorsArr,\n],\n);\nconst series = [14, 23, 21, 17, 15];\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chart.options}\nseries={chart.series}\ntype={chart.options.chart?.type}\n/>\n</div>\n);\n};\nexport default Polar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Polar.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { PiChartPolar } from 'react-icons/pi';\nimport AreaSettings, { BasicSettings } from './Polar.settings';\nexport default {\ncraft: {\ndisplayName: 'Polar',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(AreaSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'Polar',\nexposed: true,\nicon: PiChartPolar,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Area Chart name',\nlegendPosition: 'top',\ntitlePosition: 'center',\ndisplayLabels: true,\nyAxisTickAmount: 8,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IPolarProps>;\nexport interface IPolarProps extends webforms.ComponentProps {\nname?: string;\nchartColors?: IColor[];\ndisplayLabels?: boolean;\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\nyAxisTickAmount?: number;\nyAxisMax?: number;\n}\nexport interface IColor {\ncolor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Polar.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IPolarProps } from './Polar.config';\nimport { ApexOptions } from 'apexcharts';\nimport ReactApexChart from 'react-apexcharts';\nconst Polar: FC<IPolarProps> = ({\ndisplayLabels,\nchartColors,\nyAxisTickAmount,\nyAxisMax,\ntitlePosition,\nlegendPosition,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend\n? legendPosition!\n: 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nconst options: ApexOptions = {\nchart: {\ntype: 'polarArea',\n},\ncolors: chartColorsArr,\nlabels: datas.options.labels ?? [],\ndataLabels: {\nenabled: datas.options.dataLabels?.enabled ?? displayLabels,\n},\nlegend: {\nshow: datas.options.legend?.show ?? showLegend,\nposition: datas.options.legend?.position ?? legendPos,\n},\nstroke: {\ncolors: datas.options.stroke?.colors ?? chartColorsArr,\n},\ntitle: {\ntext: datas.options.title?.text ?? name,\nalign: datas.options.title?.align ?? titlePosition,\n},\ngrid: {\nrow: {\ncolors: datas.options.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options.grid?.row?.opacity ?? 0.5,\n},\n},\nyaxis: {\ntickAmount: datas.options.yaxis?.tickAmount ?? yAxisTickAmount,\nmax: datas.options.yaxis?.max ?? yAxisMax,\n},\nresponsive: datas.options.responsive ?? [],\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart\noptions={chartData.options}\nseries={chartData.series}\ntype=\"polarArea\"\n/>\n</div>\n);\n};\nexport default Polar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Polar.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'yAxisTickAmount',\nlabel: 'Y Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMax',\nlabel: 'Y Axis max value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/Pubble Data Sample.json", "file_contents": "{\n    \"series\": [\n        {\n            \"name\": \"Bubble1\",\n            \"data\": [\n                {\n                    \"x\": \"2017-02-11\",\n                    \"y\": 30,\n                    \"z\": 20\n                },\n                {\n                    \"x\": \"2017-02-12\",\n                    \"y\": 40,\n                    \"z\": 35\n                },\n                {\n                    \"x\": \"2017-02-13\",\n                    \"y\": 20,\n                    \"z\": 25\n                }\n            ]\n        },\n        {\n            \"name\": \"Bubble2\",\n            \"data\": [\n                {\n                    \"x\": \"2017-02-11\",\n                    \"y\": 12,\n                    \"z\": 15\n                },\n                {\n                    \"x\": \"2017-02-12\",\n                    \"y\": 25,\n                    \"z\": 10\n                },\n                {\n                    \"x\": \"2017-02-13\",\n                    \"y\": 45,\n                    \"z\": 22\n                }\n            ]\n        }\n    ],\n    \"options\": {}\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/RangeBar Data Sample.json", "file_contents": "{\n\"series\": [\n{\n\"data\": [\n{\n\"x\": \"Team A\",\n\"y\": [1, 5]\n},\n{\n\"x\": \"Team B\",\n\"y\": [4, 6]\n},\n{\n\"x\": \"Team C\",\n\"y\": [5, 8]\n},\n{\n\"x\": \"Team D\",\n\"y\": [3, 11]\n}\n]\n},\n{\n\"data\": [\n{\n\"x\": \"Team A\",\n\"y\": [2, 6]\n},\n{\n\"x\": \"Team B\",\n\"y\": [1, 3]\n},\n{\n\"x\": \"Team C\",\n\"y\": [7, 8]\n},\n{\n\"x\": \"Team D\",\n\"y\": [5, 9]\n}\n]\n}\n],\n\"options\": {\n\"chart\": {\n\"type\": \"rangeBar\",\n\"height\": 350\n},\n\"plotOptions\": {\n\"bar\": {\n\"horizontal\": false\n}\n},\n\"dataLabels\": {\n\"enabled\": true\n}\n}\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/RangeBar.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IRangeBarProps } from './RangeBar.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Bar: FC<IRangeBarProps> = ({\ndisplayLabels,\nannotations,\nchartColors,\nxAxisTickAmount,\nyAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\nzoomable,\ntitlePosition,\nlegendPosition,\norientation,\nname,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst {\nconnectors: { connect },\n} = useEnhancedNode();\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend ? legendPosition! : 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nif (annotations && annotations.length != 0) {\nyaxis.push({\ny: '3',\ny2: '7',\nlabel: {\ntext: 'Annotation',\n},\n});\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = useMemo(\n() => ({\nchart: {\ntype: 'rangeBar',\nzoom: {\nenabled: zoomable,\n},\ntoolbar: {\ntools: {\ndownload: exportable,\n},\n},\n},\nplotOptions: {\nbar: {\nhorizontal: orientation === 'horizontal',\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: annotationsObj.yaxis,\nxaxis: annotationsObj.xaxis,\npoints: annotationsObj.points,\n},\ndataLabels: {\nenabled: displayLabels,\n},\nlegend: {\nshow: showLegend,\nposition: legendPos,\n},\ntitle: {\ntext: name,\nalign: titlePosition,\n},\ngrid: {\nrow: {\ncolors: ['#f3f3f3', 'transparent'],\nopacity: 0.5,\n},\n},\nxaxis: {\ntitle: {\ntext: xAxisTitle,\n},\ntickAmount: xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: yAxisTitle,\n},\ntickAmount: yAxisTickAmount,\nmin: yAxisMin,\nmax: yAxisMax,\n},\n}),\n[\nlegendPos,\nname,\norientation,\nshowLegend,\ntitlePosition,\nzoomable,\nexportable,\nannotations,\nxAxisTitle,\nyAxisTitle,\ndisplayLabels,\nyAxisMin,\nyAxisMax,\nxAxisTickAmount,\nyAxisTickAmount,\nchartColorsArr,\n],\n);\nconst series = useMemo(\n() => [\n{\ndata: [\n{\nx: 'Team A',\ny: [1, 5],\n},\n{\nx: 'Team B',\ny: [4, 6],\n},\n{\nx: 'Team C',\ny: [5, 8],\n},\n{\nx: 'Team D',\ny: [3, 11],\n},\n],\n},\n{\ndata: [\n{\nx: 'Team A',\ny: [2, 6],\n},\n{\nx: 'Team B',\ny: [1, 3],\n},\n{\nx: 'Team C',\ny: [7, 8],\n},\n{\nx: 'Team D',\ny: [5, 9],\n},\n],\n},\n],\n[yAxisMax],\n);\nconst chart = {\nseries: series,\noptions: options,\n};\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart options={chart.options} series={chart.series} type=\"rangeBar\" />\n</div>\n);\n};\nexport default Bar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/RangeBar.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { BsCalendar3Range } from 'react-icons/bs';\nimport RangeBarSettings, { BasicSettings } from './RangeBar.settings';\nexport default {\ncraft: {\ndisplayName: 'RangeBar',\nkind: EComponentKind.BASIC,\nprops: {\nname: '',\nclassNames: [],\nevents: [],\n},\nrelated: {\nsettings: Settings(RangeBarSettings, BasicSettings),\n},\n},\ninfo: {\ndisplayName: 'RangeBar',\nexposed: true,\nicon: BsCalendar3Range,\nevents: [\n{\nlabel: 'On Click',\nvalue: 'onclick',\n},\n{\nlabel: 'On Blur',\nvalue: 'onblur',\n},\n{\nlabel: 'On Focus',\nvalue: 'onfocus',\n},\n{\nlabel: 'On MouseEnter',\nvalue: 'onmouseenter',\n},\n{\nlabel: 'On MouseLeave',\nvalue: 'onmouseleave',\n},\n{\nlabel: 'On KeyDown',\nvalue: 'onkeydown',\n},\n{\nlabel: 'On KeyUp',\nvalue: 'onkeyup',\n},\n],\ndatasources: {\naccept: ['string', 'object'],\n},\n},\ndefaultProps: {\nname: 'Qodly Bar Chart name',\norientation: 'vertical',\nlegendPosition: 'top',\ntitlePosition: 'center',\nexportable: true,\nzoomable: true,\ndisplayLabels: true,\nxAxisTickAmount: 12,\nyAxisTickAmount: 8,\nstyle: {\nwidth: '500px',\n},\n},\n} as T4DComponentConfig<IRangeBarProps>;\nexport interface IRangeBarProps extends webforms.ComponentProps {\nname?: string;\norientation?: 'vertical' | 'horizontal';\nannotations?: IAnnotation[];\nchartColors?: IColor[];\nexportable?: boolean;\nzoomable?: boolean;\ndisplayLabels?: boolean;\nlegendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'hidden';\ntitlePosition?: 'center' | 'left' | 'right';\nxAxisTitle?: string;\nyAxisTitle?: string;\nyAxisTickAmount?: number;\nxAxisTickAmount?: number;\nyAxisMin?: number;\nyAxisMax?: number;\n}\nexport interface IColor {\ncolor: string;\n}\nexport interface IAnnotation {\ntext: string;\naxis: 'x' | 'y' | 'point';\ncoordType: 'string' | 'number' | 'datetime';\ncoordFrom: string;\ncoordTo: string;\nbackgroundColor: string;\nborderColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/RangeBar.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IAnnotation, IRangeBarProps } from './RangeBar.config';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\nconst Bar: FC<IRangeBarProps> = ({\ndisplayLabels,\nchartColors,\nannotations,\nyAxisTickAmount,\nxAxisTickAmount,\nyAxisMin,\nyAxisMax,\nxAxisTitle,\nyAxisTitle,\nexportable,\nzoomable,\ntitlePosition,\nlegendPosition,\nname,\norientation,\nstyle,\nclassName,\nclassNames = [],\n}) => {\nconst { connect } = useRenderer();\nconst [chartData, setChartData] = useState<any>(null);\nconst {\nsources: { datasource: ds },\n} = useSources();\nuseEffect(() => {\nif (!ds) return;\nconst listener = async () => {\nconst v = await ds.getValue<any>();\nvar datas;\nif (typeof v === 'string') datas = JSON.parse(v);\nelse datas = JSON.parse(JSON.stringify(v));\nconst showLegend = legendPosition !== 'hidden';\nconst legendPos: 'top' | 'bottom' | 'left' | 'right' = showLegend\n? legendPosition!\n: 'top';\nlet initialColors = [\n'#FF4560',\n'#008FFB',\n'#00E396',\n'#FEB019',\n'#FF5828',\n'#9E9E9E',\n'#36B37E',\n'#607D8B',\n'#4BC0C0',\n'#E91E63',\n'#9C27B0',\n'#673AB7',\n'#3F51B5',\n'#2196F3',\n'#03A9F4',\n'#00BCD4',\n'#009688',\n'#4CAF50',\n'#8BC34A',\n'#CDDC39',\n'#FFEB3B',\n'#FFC107',\n'#FF9800',\n'#FF5722',\n'#795548',\n];\nconst chartColorsArr = chartColors?.map((color) => color.color) ?? initialColors;\nvar yaxis: YAxisAnnotations[] = [];\nvar xaxis: XAxisAnnotations[] = [];\nvar points: PointAnnotations[] = [];\nfor (const annotation of annotations || []) {\nif (annotation.axis === 'y') {\nyaxis.push({\ny: applyCoordType(annotation.coordType, annotation.coordFrom),\ny2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'x') {\nxaxis.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\nx2: applyCoordType(annotation.coordType, annotation.coordTo),\nborderColor: annotation.borderColor,\nfillColor: annotation.backgroundColor,\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n} else if (annotation.axis === 'point') {\npoints.push({\nx: applyCoordType(annotation.coordType, annotation.coordFrom),\ny: parseFloat(annotation.coordTo),\nmarker: {\nsize: 4,\nfillColor: annotation.backgroundColor,\nstrokeColor: annotation.borderColor,\n},\nlabel: {\ntext: annotation.text,\nstyle: {\ncolor: '#fff',\nbackground: annotation.backgroundColor,\n},\n},\n});\n}\n}\nvar annotationsObj = { yaxis: yaxis, xaxis: xaxis, points: points };\nconst options: ApexOptions = {\nchart: {\ntype: 'rangeBar',\nzoom: {\nenabled: datas.options.chart?.zoom?.enabled ?? zoomable,\n},\ntoolbar: {\ntools: {\ndownload: datas.options.chart?.toolbar?.tools?.download ?? exportable,\n},\n},\n},\nplotOptions: {\nbar: {\nhorizontal: orientation === 'horizontal',\n},\n},\ncolors: chartColorsArr,\nannotations: {\nyaxis: datas.options.annotations?.yaxis ?? annotationsObj.yaxis,\nxaxis: datas.options.annotations?.xaxis ?? annotationsObj.xaxis,\npoints: datas.options.annotations?.points ?? annotationsObj.points,\n},\ndataLabels: {\nenabled: datas.options.dataLabels?.enabled ?? displayLabels,\n},\nlegend: {\nshow: datas.options.legend?.show ?? showLegend,\nposition: datas.options.legend?.position ?? legendPos,\n},\ntitle: {\ntext: datas.options.title?.text ?? name,\nalign: datas.options.title?.align ?? titlePosition,\n},\ngrid: {\nrow: {\ncolors: datas.options.grid?.row?.colors ?? ['#f3f3f3', 'transparent'],\nopacity: datas.options.grid?.row?.opacity ?? 0.5,\n},\n},\nxaxis: {\ntitle: {\ntext: datas.options.xaxis?.title?.text ?? xAxisTitle,\n},\ntickAmount: datas.options.xaxis?.tickAmount ?? xAxisTickAmount,\n},\nyaxis: {\ntitle: {\ntext: datas.options.yaxis?.title?.text ?? yAxisTitle,\n},\ntickAmount: datas.options.xaxis?.tickAmount ?? yAxisTickAmount,\nmin: datas.options.yaxis?.min ?? yAxisMin,\nmax: datas.options.yaxis?.max ?? yAxisMax,\n},\n};\nvar series: any[] = datas.series;\nvar chart = {\noptions: options,\nseries: series,\n};\nsetChartData(chart);\n};\nlistener();\nds.addListener('changed', listener);\nreturn () => {\nds.removeListener('changed', listener);\n};\n}, [ds]);\nif (!chartData) return null;\nreturn (\n<div ref={connect} style={style} className={cn(className, classNames)}>\n<ReactApexChart options={chartData.options} series={chartData.series} type=\"rangeBar\" />\n</div>\n);\n};\nfunction applyCoordType(type: IAnnotation['coordType'], value: string): string | number {\nswitch (type) {\ncase 'string':\nreturn value;\ncase 'number':\nreturn parseFloat(value);\ncase 'datetime':\nreturn new Date(value).getTime();\n}\n}\nexport default Bar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_ApexCharts/RangeBar.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\nCgAlignBottom,\nCgAlignLeft,\nCgAlignRight,\nCgAlignTop,\nCgAlignCenter,\nCgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n{\nkey: 'name',\nlabel: 'Title',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Qodly chart summary',\n},\n{\nkey: 'orientation',\nlabel: 'Orientation',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'vertical',\noptions: [\n{ value: 'vertical', icon: CgAlignBottom },\n{ value: 'horizontal', icon: CgAlignLeft },\n],\n},\n{\nkey: 'titlePosition',\nlabel: 'Title Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'center',\noptions: [\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'center', icon: CgAlignCenter },\n{ value: 'right', icon: CgAlignRight },\n],\n},\n{\nkey: 'legendPosition',\nlabel: 'Legend Position',\ntype: ESetting.RADIOGROUP,\ndefaultValue: 'top',\noptions: [\n{ value: 'top', icon: CgAlignTop },\n{ value: 'bottom', icon: CgAlignBottom },\n{ value: 'left', icon: CgAlignLeft },\n{ value: 'right', icon: CgAlignRight },\n{ value: 'hidden', icon: CgShortcut },\n],\n},\n{\nkey: 'xAxisTitle',\nlabel: 'X Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTitle',\nlabel: 'Y Axis Title',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'yAxisTickAmount',\nlabel: 'Y Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'xAxisTickAmount',\nlabel: 'X Axis tick amount',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMin',\nlabel: 'Y Axis min value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'yAxisMax',\nlabel: 'Y Axis max value',\ntype: ESetting.NUMBER_FIELD,\n},\n{\nkey: 'exportable',\nlabel: 'Exportable',\ntype: ESetting.CHECKBOX,\n},\n{\nkey: 'displayLabels',\nlabel: 'Display labels',\ntype: ESetting.CHECKBOX,\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'chartColors',\nname: 'chartColors',\nlabel: 'Chart colors',\ndata: [\n{\nkey: 'color',\nlabel: 'Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n{\ntype: ESetting.DATAGRID,\nkey: 'annotations',\nname: 'text',\nlabel: 'Annotations',\ndata: [\n{\nkey: 'text',\nlabel: 'Text',\ntype: ESetting.TEXT_FIELD,\ndefaultValue: 'Annotation',\n},\n{\nkey: 'axis',\nlabel: 'Axis',\ntype: ESetting.SELECT,\ndefaultValue: 'x',\noptions: [\n{ value: 'x', label: 'X' },\n{ value: 'y', label: 'Y' },\n{ value: 'point', label: 'Point' },\n],\n},\n{\nkey: 'coordType',\nlabel: 'Coordinate Type',\ntype: ESetting.SELECT,\ndefaultValue: 'string',\noptions: [\n{ value: 'string', label: 'String' },\n{ value: 'number', label: 'Number' },\n{ value: 'datetime', label: 'Datetime' },\n],\n},\n{\nkey: 'coordFrom',\nlabel: 'From (X for point)',\nplaceholder: '2021-01-01',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'coordTo',\nlabel: 'To (Y for point)',\nplaceholder: '2021-12-31',\ntype: ESetting.TEXT_FIELD,\n},\n{\nkey: 'backgroundColor',\nlabel: 'Background Color',\ntype: ESetting.COLOR_PICKER,\n},\n{\nkey: 'borderColor',\nlabel: 'Border Color',\ntype: ESetting.COLOR_PICKER,\n},\n],\n},\n];\nconst Settings: TSetting[] = [\n{\nkey: 'properties',\nlabel: 'Properties',\ntype: ESetting.GROUP,\ncomponents: commonSettings,\n},\n...load(DEFAULT_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport const BasicSettings: TSetting[] = [\n...commonSettings,\n...load(BASIC_SETTINGS).filter(\n'style.overflow',\n'display',\n'style.boxShadow',\n'style.textShadow',\n'style.textAlign',\n'style.textDecorationLine',\n'style.fontStyle',\n'style.textTransform',\n),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_OrgTree/index.tsx", "file_contents": "import Tree from './Tree';\nexport default {\n  Tree,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_OrgTree/Tree.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { Tree as OrgTree, TreeNode } from 'react-organizational-chart';\nimport { ITreeProps } from './Tree.config';\nconst Tree: FC<ITreeProps> = ({ style, className, classNames, lineHeight, lineWidth, lineColor, lineStyle, lineBorderRadius, nodePadding, nodeType, withPhoto }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const DefaultContainerStyle: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'column',\n    width: 'fit-content',\n    margin: 'auto',\n    backgroundColor: '#0000000a',\n    borderRadius: '10px',\n  };\n  const DefaultHeaderStyle: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: '100%',\n    boxShadow: '1px 2px 4px #00000022',\n    padding: '12px',\n    gap: '10px',\n    borderTopLeftRadius: '10px',\n    borderTopRightRadius: '10px',\n  };\n  const DefaultImageStyle: React.CSSProperties = {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n  };\n  const DefaultNameStyle: React.CSSProperties = {\n    fontWeight: 'bold',\n    fontFamily: 'Arial',\n    fontSize: '14px',\n  };\n  const FullImageStyle: React.CSSProperties = {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n    margin: 'auto',\n  };\n  const emptyImageStyle: React.CSSProperties = {\n    margin: 'auto',\n  };\n  const FullNameStyle: React.CSSProperties = {\n    fontWeight: 'bold',\n    fontFamily: 'Arial',\n    fontSize: '14px',\n  };\n  const PhotoNode: FC<{ withPhoto: boolean, photo: string, style?: React.CSSProperties }> = ({ withPhoto, photo, style }) => {\n    if (!withPhoto) return null;\n    return (<img style={style} src={photo} className='TreeNodeImg' />);\n  };\n  const StyledNode: FC<{ label: string, color?: string, type?: string, photo?: string }> = ({ label, color, photo }) => {\n    color = color || generateRandomColor();\n    photo = photo || `https:\n    switch (nodeType) {\n      case 'full': \n        var FullContainerStyle: React.CSSProperties = {\n          display: 'flex',\n          flexDirection: 'column',\n          width: 'fit-content',\n          margin: 'auto',\n          padding: '6px',\n          gap: '10px',\n          borderRadius: \"10px\",\n          minWidth: '130px',\n          backgroundColor: `#${color}44`,\n          border: `2px ${lineStyle} #${color}`,\n        };\n        return (\n          <div style={FullContainerStyle} className='TreeNode'>\n            <PhotoNode withPhoto={withPhoto} photo={photo} style={FullImageStyle} />\n            <div style={FullNameStyle} className='TreeNodeLabel'>{label}</div>\n          </div>\n        );\n      case 'empty': \n        return (\n          <div className='TreeNode'>\n            <PhotoNode withPhoto={withPhoto} photo={photo} style={emptyImageStyle} />\n            <span className='TreeNodeLabel'>{label}</span>\n          </div>\n        );\n      default: \n        var DefaultFooterStyle: React.CSSProperties = {\n          marginTop: 'auto',\n          borderBottomColor: `#${color}`,\n          borderBottomStyle: lineStyle,\n          borderBottomWidth: '10px',\n          borderBottomLeftRadius: '10px',\n          borderBottomRightRadius: '10px',\n        };\n        return (\n          <div style={DefaultContainerStyle}>\n            <div style={DefaultHeaderStyle}>\n              <PhotoNode withPhoto={withPhoto} photo={photo} style={DefaultImageStyle} />\n              <div style={DefaultNameStyle}>{label}</div>\n            </div>\n            <div style={DefaultFooterStyle}></div>\n          </div>\n        );\n    }\n  }\n  const generateRandomColor = () => {\n    const letters = '0123456789ABCDE'; \n    let color = '';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 15)]; \n    }\n    return color;\n  };\n  var tree = useMemo(() => {\n    return (\n      <OrgTree\n        label={<StyledNode label=\"Root\" />}\n        lineColor={lineColor}\n        lineWidth={lineWidth}\n        lineStyle={lineStyle}\n        lineBorderRadius={lineBorderRadius}\n        nodePadding={nodePadding}\n        lineHeight={lineHeight}\n      >\n        <TreeNode label={<StyledNode label=\"Child 1\" />}>\n          <TreeNode label={<StyledNode label=\"Grand Child 1\" />}>\n            <TreeNode label={<StyledNode label=\"Grand Grand Child 1\" />} />\n            <TreeNode label={<StyledNode label=\"Grand Grand Child 2\" />} />\n          </TreeNode>\n          <TreeNode label={<StyledNode label=\"Grand Child 2\" />} />\n        </TreeNode>\n        <TreeNode label={<StyledNode label=\"Child 2\" />}>\n          <TreeNode label={<StyledNode label=\"Grand Child 3\" />} />\n          <TreeNode label={<StyledNode label=\"Grand Child 4\" />} />\n        </TreeNode>\n      </OrgTree >\n    );\n  }, [lineHeight, lineWidth, lineColor, lineStyle, lineBorderRadius, nodePadding, nodeType, withPhoto]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {tree}\n    </div>\n  )\n};\nexport default Tree;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_OrgTree/Tree.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineTextSnippet } from 'react-icons/md';\nimport TreeSettings, { BasicSettings } from './Tree.settings';\nexport default {\n  craft: {\n    displayName: 'Tree',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(TreeSettings, BasicSettings),\n    },\n  },\n  info: {\n    settings: TreeSettings,\n    displayName: 'Tree',\n    exposed: true,\n    icon: MdOutlineTextSnippet,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    lineHeight: '20px',\n    lineWidth: '1px',\n    lineColor: '#000',\n    lineStyle: 'solid',\n    lineBorderRadius: '5px',\n    nodePadding: '5px',\n    nodeType: 'default',\n    withPhoto: true,\n  },\n} as T4DComponentConfig<ITreeProps>;\nexport interface ITreeProps extends webforms.ComponentProps {\n  lineHeight: string;\n  lineWidth: string;\n  lineColor: string;\n  lineStyle: \"none\" | \"solid\" | \"dotted\" | \"dashed\" | \"hidden\" | \"double\" | \"groove\" | \"ridge\" | \"inset\" | \"outset\";\n  lineBorderRadius: string;\n  nodePadding: string;\n  nodeType: \"default\" | \"full\" | \"empty\";\n  withPhoto: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_OrgTree/Tree.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { Tree as OrgTree, TreeNode } from 'react-organizational-chart';\nimport { ITreeProps } from './Tree.config';\ninterface TreeNodeData {\n  label: string;\n  photo?: string;\n  children?: TreeNodeData[];\n}\nconst Tree: FC<ITreeProps> = ({\n  style,\n  className,\n  classNames = [],\n  lineHeight,\n  lineWidth,\n  lineColor,\n  lineStyle,\n  lineBorderRadius,\n  nodePadding,\n  nodeType,\n  withPhoto,\n}) => {\n  const { connect } = useRenderer();\n  const [tree, setTree] = useState<any>(null);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const DefaultContainerStyle: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'column',\n    width: 'fit-content',\n    margin: 'auto',\n    backgroundColor: '#0000000a',\n    borderRadius: '10px',\n  };\n  const DefaultHeaderStyle: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: '100%',\n    boxShadow: '1px 2px 4px #00000022',\n    padding: '12px',\n    gap: '10px',\n    borderTopLeftRadius: '10px',\n    borderTopRightRadius: '10px',\n  };\n  const DefaultImageStyle: React.CSSProperties = {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n  };\n  const DefaultNameStyle: React.CSSProperties = {\n    fontWeight: 'bold',\n    fontFamily: 'Arial',\n    fontSize: '14px',\n  };\n  const FullImageStyle: React.CSSProperties = {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n    margin: 'auto',\n  };\n  const emptyImageStyle: React.CSSProperties = {\n    margin: 'auto',\n  };\n  const FullNameStyle: React.CSSProperties = {\n    fontWeight: 'bold',\n    fontFamily: 'Arial',\n    fontSize: '14px',\n  };\n  const PhotoNode: FC<{ withPhoto: boolean, photo: string, style?: React.CSSProperties }> = ({ withPhoto, photo, style }) => {\n    if (!withPhoto) return null;\n    return (<img style={style} src={photo} className='TreeNodeImg' />);\n  };\n  const StyledNode: FC<{ label: string, color?: string, type?: string, photo?: string }> = ({ label, color, photo }) => {\n    color = color || generateRandomColor();\n    photo = photo || `https:\n    switch (nodeType) {\n      case 'full': \n        var FullContainerStyle: React.CSSProperties = {\n          display: 'flex',\n          flexDirection: 'column',\n          width: 'fit-content',\n          margin: 'auto',\n          padding: '6px',\n          gap: '10px',\n          borderRadius: \"10px\",\n          minWidth: '130px',\n          backgroundColor: `#${color}44`,\n          border: `2px ${lineStyle} #${color}`,\n        };\n        return (\n          <div style={FullContainerStyle} className='TreeNode'>\n            <PhotoNode withPhoto={withPhoto} photo={photo} style={FullImageStyle} />\n            <div style={FullNameStyle} className='TreeNodeLabel'>{label}</div>\n          </div>\n        );\n      case 'empty': \n        return (\n          <div className='TreeNode'>\n            <PhotoNode withPhoto={withPhoto} photo={photo} style={emptyImageStyle} />\n            <span className='TreeNodeLabel'>{label}</span>\n          </div>\n        );\n      default: \n        var DefaultFooterStyle: React.CSSProperties = {\n          marginTop: 'auto',\n          borderBottomColor: `#${color}`,\n          borderBottomStyle: lineStyle,\n          borderBottomWidth: '10px',\n          borderBottomLeftRadius: '10px',\n          borderBottomRightRadius: '10px',\n        };\n        return (\n          <div style={DefaultContainerStyle} className='TreeNode'>\n            <div style={DefaultHeaderStyle}>\n              <PhotoNode withPhoto={withPhoto} photo={photo} style={DefaultImageStyle} />\n              <div style={DefaultNameStyle} className='TreeNodeLabel'>{label}</div>\n            </div>\n            <div style={DefaultFooterStyle} className='TreeNodeFooter'></div>\n          </div>\n        );\n    }\n  }\n  const generateRandomColor = () => {\n    const letters = '0123456789ABCDE'; \n    let color = '';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 15)]; \n    }\n    return color;\n  };\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<any>();\n      var data: TreeNodeData;\n      if (typeof v === 'string')\n        data = JSON.parse(v);\n      else\n        data = JSON.parse(JSON.stringify(v));\n      interface TreeNodeRecursiveProps {\n        node: TreeNodeData;\n      }\n      const TreeNodeRecursive: React.FC<TreeNodeRecursiveProps> = ({ node }) => {\n        return (\n          <TreeNode label={<StyledNode label={node.label} photo={node.photo} />}>\n            {node.children &&\n              node.children.map((child, index) => (\n                <TreeNodeRecursive key={index} node={child} />\n              ))}\n          </TreeNode>\n        );\n      };\n      const OrganizationalChart: React.FC = () => {\n        return (\n          <OrgTree\n            label={<StyledNode label={data.label} photo={data.photo} />}\n            lineHeight={lineHeight}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            lineStyle={lineStyle}\n            lineBorderRadius={lineBorderRadius}\n            nodePadding={nodePadding}\n          >\n            {data.children?.map((child, index) => (\n              <TreeNodeRecursive key={index} node={child} />\n            ))}\n          </OrgTree>\n        );\n      };\n      setTree(<OrganizationalChart />);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  if (!tree) return null;\n  return (\n    <span ref={connect} style={style} className={cn(className, classNames)}>\n      {tree}\n    </span>\n  );\n};\nexport default Tree;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/LimpalaerCyril/Qodly_OrgTree/Tree.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'lineHeight',\n    label: 'Tree line height',\n    type: ESetting.TEXT_FIELD,\n    placeholder: '20px',\n  },\n  {\n    key: 'lineWidth',\n    label: 'Tree line width',\n    type: ESetting.TEXT_FIELD,\n    placeholder: '1px',\n  },\n  {\n    key: 'lineColor',\n    label: 'Tree line color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#000',\n  },\n  {\n    key: 'lineStyle',\n    label: 'Tree line style',\n    type: ESetting.SELECT,\n    defaultValue: 'solid',\n    options: [\n      { label: 'None', value: 'none' },\n      { label: 'Solid', value: 'solid' },\n      { label: 'Dotted', value: 'dotted' },\n      { label: 'Dashed', value: 'dashed' },\n      { label: 'Hidden', value: 'hidden' },\n      { label: 'Double', value: 'double' },\n      { label: 'Groove', value: 'groove' },\n      { label: 'Ridge', value: 'ridge' },\n      { label: 'Inset', value: 'inset' },\n      { label: 'Outset', value: 'outset' },\n    ],\n  },\n  {\n    key: 'lineBorderRadius',\n    label: 'Tree line radius',\n    type: ESetting.TEXT_FIELD,\n    placeholder: '5px',\n  },\n  {\n    key: 'nodePadding',\n    label: 'Tree node padding',\n    type: ESetting.TEXT_FIELD,\n    placeholder: '5px',\n  },\n  {\n    key: 'nodeType',\n    label: 'Tree node type',\n    type: ESetting.SELECT,\n    defaultValue: 'default',\n    options: [\n      { label: 'Default', value: 'default' },\n      { label: 'Full', value: 'full' },\n      { label: 'Empty', value: 'empty' },\n    ],\n  },\n  {\n    key: 'withPhoto',\n    label: 'With photos',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-carousel/Carousel.build.tsx", "file_contents": "import {\n  useEnhancedNode,\n  useEnhancedEditor,\n  selectResolver,\n  IteratorProvider,\n} from '@ws-ui/webform-editor';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\nimport { FC, CSSProperties } from 'react';\nimport { EmblaOptionsType } from 'embla-carousel';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { ICarouselProps } from './Carousel.config';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nconst Carousel: FC<ICarouselProps> = ({\n  arrows,\n  direction,\n  icon1,\n  dots,\n  loop,\n  axis,\n  icon2,\n  style,\n  datasource,\n  className,\n  classNames = [],\n}) => {\n  const options: EmblaOptionsType = { direction: direction, axis: axis, loop: loop };\n  const Css: CSSProperties = {\n    width: style?.width || '100%',\n  };\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const {\n    connectors: { connect },\n  } = useEnhancedNode((node) => {\n    return { linkedNodes: node.data.linkedNodes };\n  });\n  const [emblaRef, emblaApi] = useEmblaCarousel(options);\n  const handlePrev = () => emblaApi && emblaApi.scrollPrev();\n  const handleNext = () => emblaApi && emblaApi.scrollNext();\n  return (\n    <div ref={connect} style={style} className={cn('carousel', className, classNames)}>\n      <div className=\"carousel_container overflow-hidden border h-full\" ref={emblaRef}>\n        {datasource ? (\n          <div className=\"carousel_slides h-full \">\n            <div className=\"carousel_slide relative h-full  w-full\" style={Css}>\n              <IteratorProvider>\n                <Element\n                  id=\"carousel\"\n                  className=\"h-full w-full\"\n                  role=\"carousel-header\"\n                  is={resolver.StyleBox}\n                  deletable={false}\n                  canvas\n                />\n              </IteratorProvider>\n            </div>\n            <div className=\"flex justify-center\">\n              {arrows && (\n                <div>\n                  <button\n                    onClick={handlePrev}\n                    className=\" absolute left-0 top-1/2 transform -translate-y-1/2 carousel_button\"\n                  >\n                    <span\n                      className={cn(\n                        'fa fd-component',\n                        'fd-icon',\n                        icon2,\n                        classNames,\n                        'w-7 h-auto fill-current text-gray-400 hover:text-gray-700 text-4xl',\n                      )}\n                    ></span>\n                  </button>\n                  <button\n                    onClick={handleNext}\n                    className=\"absolute text-zinc-950 hover:text-zinc-400 right-0 top-1/2 transform -translate-y-1/2 right-0 carousel_button\"\n                  >\n                    <span\n                      className={cn(\n                        'fa fd-component',\n                        'fd-icon',\n                        icon1,\n                        classNames,\n                        'w-7 h-auto fill-current ml-2 text-gray-400 hover:text-gray-700 text-4xl ',\n                      )}\n                    ></span>\n                  </button>\n                </div>\n              )}\n              {dots && (\n                <div className=\"carousel_dots absolute bottom-1 w-full flex justify-center right-2\">\n                  <div className=\"carousel_dot w-8 h-1 bg-gray-400 hover:bg-gray-600 rounded-full mx-2 cursor-pointer transition duration-300\"></div>\n                  <div className=\"carousel_dot w-8 h-1 bg-gray-400 hover:bg-gray-600 rounded-full mx-2 cursor-pointer transition duration-300\"></div>\n                  <div className=\"carousel_dot w-8 h-1 bg-gray-400 hover:bg-gray-600 rounded-full mx-2 cursor-pointer transition duration-300\"></div>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n            <BsFillInfoCircleFill className=\"mb-1 h-8 w-8\" />\n            <p>Please attach a datasource</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Carousel;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-carousel/Carousel.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineViewCarousel } from 'react-icons/md';\nimport CarouselSettings, { BasicSettings } from './Carousel.settings';\nexport default {\n  craft: {\n    displayName: 'Carousel',\n    rules: {\n      canMoveIn: () => true,\n      canMoveOut: () => true,\n    },\n    sanityCheck: {\n      keys: [{ name: 'datasource', require: true, isDatasource: true }],\n    },\n    requiredFields: {\n      keys: ['datasource'],\n      all: false,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(CarouselSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Carousel',\n    exposed: true,\n    icon: MdOutlineViewCarousel,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['entitysel'],\n    },\n  },\n  defaultProps: {\n    iterable: true,\n    style: {\n      height: '400px',\n    },\n    loop: true,\n    direction: 'ltr',\n    dots: true,\n    arrows: true,\n    axis: 'x',\n    autoplayInterval: 5000,\n    autoplay: true,\n    icon1: 'fa-chevron-right',\n    icon2: 'fa-chevron-left',\n  },\n} as T4DComponentConfig<ICarouselProps>;\nexport interface ICarouselProps extends webforms.ComponentProps {\n  loop?: boolean;\n  direction?: 'ltr' | 'rtl';\n  dots?: boolean;\n  axis?: 'y' | 'x';\n  arrows?: boolean;\n  autoplayInterval?: number;\n  autoplay: boolean;\n  icon1: string;\n  icon2: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-carousel/Carousel.render.tsx", "file_contents": "import { FC, useCallback, useEffect, useState } from 'react';\nimport {\n  useSources,\n  useEnhancedEditor,\n  selectResolver,\n  EntityProvider,\n  useDataLoader,\n  unsubscribeFromDatasource,\n  useEnhancedNode,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { CgDanger } from 'react-icons/cg';\nimport { EmblaOptionsType } from 'embla-carousel';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { ICarouselProps } from './Carousel.config';\nimport CarouselDots from './CarouselDots';\nimport CarouselArrows from './CarouselArrows';\nconst Carousel: FC<ICarouselProps> = ({\n  direction,\n  loop,\n  icon1,\n  icon2,\n  arrows,\n  axis,\n  dots,\n  style,\n  iterator,\n  className,\n  classNames = [],\n  autoplayInterval = 5000,\n  autoplay,\n}) => {\n  const options: EmblaOptionsType = { direction: direction, axis: axis, loop: loop };\n  const { resolver, query } = useEnhancedEditor(selectResolver);\n  const {\n    linkedNodes,\n    connectors: { connect },\n  } = useEnhancedNode((node) => {\n    return { linkedNodes: node.data.linkedNodes };\n  });\n  const child = linkedNodes.carousel ? query.node(linkedNodes.carousel).get() : null;\n  const childStyle = child?.data.props.style;\n  const {\n    sources: { datasource: ds, currentElement: currentDs },\n  } = useSources();\n  const { entities, fetchIndex } = useDataLoader({\n    source: ds,\n  });\n  const [emblaRef, emblaApi] = useEmblaCarousel(options);\n  const [SelectedScrollSnap, setSelectedScrollSnap] = useState(0);\n  useEffect(() => {\n    fetchIndex(0);\n  }, []);\n  useEffect(() => {\n    if (!ds) {\n      return;\n    }\n    const cb = () => {\n      ds.getValue('length').then((_length) => {\n        fetchIndex(0);\n      });\n    };\n    ds.addListener('changed', cb);\n    return () => {\n      unsubscribeFromDatasource(ds, cb);\n    };\n  }, [ds, fetchIndex]);\n  useEffect(() => {\n    let autoplayTimer: NodeJS.Timeout;\n    const startAutoplay = () => {\n      autoplayTimer = setInterval(() => {\n        emblaApi && emblaApi.scrollNext();\n      }, autoplayInterval);\n    };\n    const stopAutoplay = () => {\n      clearInterval(autoplayTimer);\n    };\n    if (emblaApi && autoplay) {\n      startAutoplay();\n    }\n    return () => {\n      stopAutoplay();\n    };\n  }, [emblaApi, autoplayInterval, autoplay]);\n  const handlePrev = () => emblaApi && emblaApi.scrollPrev();\n  const handleNext = () => emblaApi && emblaApi.scrollNext();\n  const onSelect = useCallback(() => {\n    if (emblaApi) {\n      setSelectedScrollSnap(emblaApi.selectedScrollSnap());\n    }\n  }, [emblaApi]);\n  useEffect(() => {\n    if (!emblaApi) return;\n    emblaApi.on('reInit', onSelect);\n    emblaApi.on('select', onSelect);\n  }, [emblaApi, onSelect]);\n  return (\n    <>\n      {ds?.initialValue !== undefined ? (\n        <div\n          ref={connect}\n          style={style}\n          className={cn('carousel', className, classNames)}\n          dir={direction}\n        >\n          <div className=\"carousel_container overflow-hidden border h-full\" ref={emblaRef}>\n            <div\n              className={cn('carousel_slides h-full flex', {\n                'flex-col': axis === 'y',\n              })}\n            >\n              {entities.map((entity, index) => (\n                <div\n                  key={entity.__KEY}\n                  className={`\"${index === SelectedScrollSnap ? 'border-2 border-black ' : 'border-1'} carousel_slide relative h-full flex-shrink-0 w-full\"`}\n                  style={childStyle}\n                >\n                  <EntityProvider\n                    index={index}\n                    selection={ds}\n                    current={currentDs?.id}\n                    iterator={iterator}\n                  >\n                    <Element\n                      id=\"carousel\"\n                      className=\"h-full w-full \"\n                      role=\"carousel-header\"\n                      is={resolver.StyleBox}\n                      canvas\n                    />\n                  </EntityProvider>\n                </div>\n              ))}\n            </div>\n          </div>\n          {emblaApi && (\n            <>\n              {dots && (\n                <CarouselDots\n                  totalDots={entities.length}\n                  selectedDot={SelectedScrollSnap}\n                  onDotClick={(index) => emblaApi.scrollTo(index)}\n                />\n              )}\n              {arrows && (\n                <CarouselArrows\n                  onPrevClick={handlePrev}\n                  onNextClick={handleNext}\n                  iconPrev={icon2}\n                  iconNext={icon1}\n                  classNames={classNames}\n                />\n              )}\n            </>\n          )}\n        </div>\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <CgDanger className=\"mb-1 h-8 w-8\" />\n          <p>Missing a datasource</p>\n        </div>\n      )}\n    </>\n  );\n};\nexport default Carousel;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-carousel/Carousel.settings.ts", "file_contents": "import { ESetting, TSetting, DEFAULT_ITERATOR } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load, ETextFieldModifier } from '@ws-ui/webform-editor';\nimport { FaLongArrowAltRight, FaLongArrowAltLeft } from 'react-icons/fa';\nimport { LuFlipVertical2, LuFlipHorizontal2 } from 'react-icons/lu';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'autoplay',\n    label: 'Auto play',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'loop',\n    label: 'Loop',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'dots',\n    label: 'Dots',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'arrows',\n    label: 'Arrows',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    label: 'Direction',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'ltr',\n    key: 'direction',\n    multiple: false,\n    options: [\n      {\n        value: 'rtl',\n        tooltip: 'Righ to Left',\n        icon: FaLongArrowAltLeft,\n      },\n      {\n        value: 'ltr',\n        tooltip: 'Left to Right',\n        icon: FaLongArrowAltRight,\n      },\n    ],\n  },\n  {\n    label: 'Orientation',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'x',\n    key: 'axis',\n    multiple: false,\n    options: [\n      {\n        value: 'y',\n        tooltip: 'vertical',\n        icon: LuFlipVertical2,\n      },\n      {\n        value: 'x',\n        tooltip: 'Horizontal',\n        icon: LuFlipHorizontal2,\n      },\n    ],\n  },\n  {\n    key: 'icon1',\n    label: 'Icon next',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-chevron-right',\n  },\n  {\n    key: 'icon2',\n    label: 'Icon previous',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-chevron-left',\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'DataSource',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'iterator',\n    label: 'Iterate with',\n    type: ESetting.TEXT_FIELD,\n    modifier: ETextFieldModifier.ITERATOR,\n    placeholder: DEFAULT_ITERATOR,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'dataAccess',\n    'style.color',\n    'font',\n    'color.boxshadow',\n    'style.overflow',\n    'background',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.color',\n    'font',\n    'color.boxshadow',\n    'style.overflow',\n    'background',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-carousel/CarouselArrows.tsx", "file_contents": "import { FC } from 'react';\nimport cn from 'classnames';\ninterface CarouselArrowsProps {\n  onPrevClick: () => void;\n  onNextClick: () => void;\n  iconPrev: string;\n  iconNext: string;\n  classNames: string[];\n}\nconst CarouselArrows: FC<CarouselArrowsProps> = ({\n  onPrevClick,\n  onNextClick,\n  iconPrev,\n  iconNext,\n  classNames,\n}) => {\n  return (\n    <div className=\"flex justify-between\">\n      <button onClick={onPrevClick} className=\"carousel_button\">\n        <span\n          className={cn(\n            'fa fd-component',\n            'fd-icon',\n            iconPrev,\n            classNames,\n            'w-7 h-auto fill-current text-gray-400 hover:text-gray-700',\n            'text-3xl',\n          )}\n        ></span>\n      </button>\n      <button onClick={onNextClick} className=\"carousel_button\">\n        <span\n          className={cn(\n            'fa fd-component',\n            'fd-icon',\n            iconNext,\n            classNames,\n            'w-7 h-auto fill-current text-gray-400 hover:text-gray-700',\n            'text-3xl',\n          )}\n        ></span>\n      </button>\n    </div>\n  );\n};\nexport default CarouselArrows;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-carousel/CarouselDots.tsx", "file_contents": "import { FC } from 'react';\nimport cn from 'classnames';\ninterface CarouselDotsProps {\n  totalDots: number;\n  selectedDot: number;\n  onDotClick: (index: number) => void;\n}\nconst CarouselDots: FC<CarouselDotsProps> = ({ totalDots, selectedDot, onDotClick }) => {\n  const dotsToShow = () => {\n    if (totalDots <= 5) {\n      return Array.from({ length: totalDots }).map((_, index) => index);\n    }\n    const dots = [];\n    if (selectedDot < 2) {\n      dots.push(0, 1, 2, 3, totalDots - 1);\n    } else if (selectedDot > totalDots - 3) {\n      dots.push(0, totalDots - 4, totalDots - 3, totalDots - 2, totalDots - 1);\n    } else {\n      dots.push(0, selectedDot - 1, selectedDot, selectedDot + 1, totalDots - 1);\n    }\n    return Array.from(new Set(dots)).sort((a, b) => a - b);\n  };\n  return (\n    <div className=\"flex justify-center relative bottom-2 hover:bg-black carousel_dots\">\n      {dotsToShow().map((index) => (\n        <div key={index} onClick={() => onDotClick(index)}>\n          <div\n            className={cn(\n              'carousel_dot w-8 h-1 bg-gray-400 hover:bg-gray-600 rounded-full mx-1 cursor-pointer transition duration-300',\n              {\n                'active bg-gray-900 hover:bg-gray-700': index === selectedDot,\n              },\n            )}\n          ></div>\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default CarouselDots;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-carousel/index.tsx", "file_contents": "import Carousel from './Carousel';\nexport default {\n  Carousel,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/index.css", "file_contents": "@import 'react-grid-layout/css/styles.css';\n@import 'react-resizable/css/styles.css';"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/index.tsx", "file_contents": "import Layouts from './Layouts';\nexport default {\n  Layouts,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/LayoutElement.tsx", "file_contents": "import { Element } from '@ws-ui/craftjs-core';\nimport { FC } from 'react';\nexport interface ILayoutElementProps {\n  resolver: any;\n  id: string;\n}\nconst LayoutElement: FC<ILayoutElementProps> = ({ resolver, id }) => {\n  return (\n    <Element\n      id={`panel-${id}`}\n      className=\"h-full w-full\"\n      role=\"card-header\"\n      is={resolver.StyleBox}\n      deletable={false}\n      canvas\n    />\n  );\n};\nexport default LayoutElement;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/LayoutFilter.tsx", "file_contents": "import { FC, useRef, useState } from 'react';\nimport { ICards } from './Layouts.config';\nimport cn from 'classnames';\ninterface ILayoutFilterProps {\n  cards: ICards[];\n  selectedCards?: ICards[];\n  onFilter?: (filteredData: ICards[]) => void;\n}\nconst LayoutFilter: FC<ILayoutFilterProps> = ({\n  cards,\n  selectedCards = [],\n  onFilter = () => {},\n}) => {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  const inputRefs: { [key: string]: React.RefObject<HTMLInputElement> } = {};\n  cards.forEach((item) => {\n    inputRefs[item.i] = useRef<HTMLInputElement>(null);\n  });\n  const toggleCheckbox = (value: string) => {\n    const selectedItems = selectedCards.map((item) => item.i);\n    const updatedSelection = selectedItems.includes(value)\n      ? selectedItems.filter((item) => item !== value)\n      : [...selectedItems, value];\n    const filteredData = cards.filter((item) => updatedSelection.includes(item.i));\n    onFilter(filteredData);\n  };\n  const handleClick = () => {\n    setIsVisible(true);\n  };\n  const handleMouseLeave = () => {\n    setIsVisible(false);\n  };\n  return (\n    <div className={cn('filter-box', 'p-2 flex flex-col items-end relative')}>\n      <div\n        className={cn(\n          'filter-select-multi',\n          'p-2 h-fit w-36 border-2 border-gray-300 cursor-pointer rounded-md',\n        )}\n      >\n        <div className={cn('filter-text', 'text-gray-500')} onClick={handleClick}>\n          Filter by cards:\n        </div>\n      </div>\n      {cards.length > 0 && (\n        <div\n          className={cn(\n            'filter-check',\n            'absolute top-14 z-10 bg-white flex flex-col p-2 h-fit w-36 border-2 border-gray-300 rounded-md',\n            { hidden: !isVisible },\n          )}\n          onMouseLeave={() => handleMouseLeave()}\n        >\n          <div className=\"relative\">\n            {cards.map((item) => (\n              <div key={item.i} className={cn('filter-select-item', 'flex p-2 justify-between')}>\n                <label>{item.i}</label>\n                <input\n                  className={cn('filter-select-checkbox', 'cursor-pointer')}\n                  ref={inputRefs[item.i]}\n                  type=\"checkbox\"\n                  checked={!!selectedCards.find((elemnt) => elemnt.i === item.i)}\n                  onChange={() => toggleCheckbox(item.i)}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default LayoutFilter;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/Layouts.build.tsx", "file_contents": "import { useEnhancedNode, useEnhancedEditor, selectResolver } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState, useEffect } from 'react';\nimport GridLayout from 'react-grid-layout';\nimport LayoutElement from './LayoutElement';\nimport { ILayoutsProps } from './Layouts.config';\nimport LayoutFilter from './LayoutFilter';\nconst Layouts: FC<ILayoutsProps> = ({\n  filterMode,\n  cards = [],\n  marginX = 10,\n  marginY = 10,\n  rowHeight = 30,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const [numCols, setNumCols] = useState(12);\n  const [gridWidth, setGridWidth] = useState(1200);\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 1200) {\n        setNumCols(12);\n        setGridWidth(1200);\n      } else {\n        setNumCols(10);\n        setGridWidth(996);\n      }\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {filterMode && <LayoutFilter cards={[]} />}\n      <GridLayout\n        className=\"layout\"\n        margin={[marginX, marginY]}\n        layout={cards}\n        cols={numCols}\n        rowHeight={rowHeight}\n        width={gridWidth}\n      >\n        {cards.map((card) => (\n          <div key={card.id} data-grid={{ ...card, isDraggable: false, isResizable: false }}>\n            <LayoutElement resolver={resolver} id={card.id} />\n          </div>\n        ))}\n      </GridLayout>\n    </div>\n  );\n};\nexport default Layouts;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/Layouts.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { RiLayoutMasonryLine } from 'react-icons/ri';\nimport LayoutsSettings, { BasicSettings } from './Layouts.settings';\nexport default {\n  craft: {\n    displayName: 'Layouts',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n      cards: [\n        {\n          id: 'Card_1',\n          i: 'Card_1',\n          title: 'Card_1',\n          x: 0,\n          y: 0,\n          w: 2,\n          h: 2,\n          static: false,\n          isResizable: true,\n          isDraggable: true,\n        },\n      ],\n    },\n    related: {\n      settings: Settings(LayoutsSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Layouts',\n    exposed: true,\n    icon: RiLayoutMasonryLine,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    marginX: 10,\n    marginY: 10,\n    rowHeight: 100,\n    filterMode: true,\n    saveInStorage: false,\n    preventCollision: true,\n  },\n} as T4DComponentConfig<ILayoutsProps>;\nexport interface ILayoutsProps extends webforms.ComponentProps {\n  cards: ICards[];\n  marginX: number;\n  marginY: number;\n  rowHeight: number;\n  preventCollision: boolean;\n  filterMode?: boolean;\n  saveInStorage?: boolean;\n}\nexport interface ICards {\n  id: string;\n  i: string;\n  title: string;\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  static: boolean;\n  isResizable?: boolean;\n  isDraggable?: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/Layouts.render.tsx", "file_contents": "import { useRenderer, useSources, useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useRef, useState, useMemo } from 'react';\nimport { useEnhancedEditor, selectResolver } from '@ws-ui/webform-editor';\nimport { ICards, ILayoutsProps } from './Layouts.config';\nimport { WidthProvider, Responsive } from 'react-grid-layout';\nimport LayoutElement from './LayoutElement';\nimport LayoutFilter from './LayoutFilter';\nconst Layouts: FC<ILayoutsProps> = ({\n  filterMode,\n  saveInStorage,\n  cards = [],\n  marginX,\n  marginY,\n  rowHeight = 30,\n  preventCollision = true,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const { id } = useEnhancedNode();\n  const gridLayoutRef = useRef(null);\n  const [value, setValue] = useState(cards.map((card) => ({ ...card, i: card.title })));\n  const [layoutData, setLayoutData] = useState<ICards[]>([]);\n  const [isDragDone, setIsDragDone] = useState(false);\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const ResponsiveReactGridLayout = useMemo(() => WidthProvider(Responsive), []);\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      if (!ds) return;\n      const updatedCards = (await ds.getValue()) || [];\n      const updatedLayout = value.map((oldCard) => {\n        const matchingNewCard = updatedCards.find((newCard: any) => newCard.i === oldCard.i);\n        return matchingNewCard ? { ...oldCard, ...matchingNewCard } : oldCard;\n      });\n      const filteredValue =\n        updatedCards.length > 0\n          ? value\n              .filter((item) => updatedCards.some((newCard: any) => newCard.i === item.i))\n              .map((oldCard) => {\n                const matchingNewCard = updatedCards.find(\n                  (newCard: any) => newCard.i === oldCard.i,\n                );\n                return matchingNewCard ? { ...oldCard, ...matchingNewCard } : oldCard;\n              })\n          : updatedLayout;\n      setValue(updatedLayout);\n      setLayoutData(filteredValue);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  useEffect(() => {\n    const storedLayout = localStorage.getItem(`updatedCards_${id}`);\n    if (!ds && saveInStorage && storedLayout) {\n      const parsedLayout = JSON.parse(storedLayout);\n      if (parsedLayout.length > 0) {\n        const filteredValue = value\n          .filter((item) => parsedLayout.some((newCard: any) => newCard.i === item.i))\n          .map((oldCard) => {\n            const matchingNewCard = parsedLayout.find((newCard: any) => newCard.i === oldCard.i);\n            return matchingNewCard ? { ...oldCard, ...matchingNewCard } : oldCard;\n          });\n        const updatedLayout = value.map((oldCard) => {\n          const matchingNewCard = parsedLayout.find((newCard: any) => newCard.i === oldCard.i);\n          return matchingNewCard ? { ...oldCard, ...matchingNewCard } : oldCard;\n        });\n        setValue(updatedLayout);\n        setLayoutData(filteredValue);\n      }\n    }\n    return () => {\n      gridLayoutRef.current = null;\n    };\n  }, []);\n  useEffect(() => {\n    if ((!ds && !saveInStorage) || !filterMode) {\n      setLayoutData(value);\n    }\n  }, []);\n  const onLayoutChange = (newLayout: any) => {\n    if (isFirstLoad) {\n      setIsFirstLoad(false);\n      return;\n    }\n    if (saveInStorage && filterMode && !ds && isDragDone) {\n      localStorage.setItem(`updatedCards_${id}`, JSON.stringify(newLayout));\n    }\n    if (ds && !isFirstLoad) {\n      ds.setValue(null, newLayout);\n    }\n  };\n  const filteringCards = (fitleredData: any) => {\n    if (saveInStorage && filterMode && !ds) {\n      localStorage.setItem(`updatedCards_${id}`, JSON.stringify(fitleredData));\n    }\n    setLayoutData(fitleredData);\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {filterMode && (\n        <LayoutFilter cards={value} selectedCards={layoutData} onFilter={filteringCards} />\n      )}\n      <ResponsiveReactGridLayout\n        ref={gridLayoutRef}\n        className=\"layout\"\n        margin={[marginX, marginY]}\n        onLayoutChange={onLayoutChange}\n        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\n        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n        rowHeight={rowHeight}\n        preventCollision={preventCollision}\n        onDragStop={() => {\n          setIsDragDone(true);\n        }}\n        draggableCancel=\"[class^='fd-']:not(.fd-stylebox)\"\n      >\n        {layoutData.map((card) => (\n          <div\n            key={card.title}\n            data-grid={{\n              ...card,\n              isDraggable: !card.static || card.isDraggable,\n              isResizable: !card.static || card.isResizable,\n            }}\n          >\n            <LayoutElement resolver={resolver} id={card.id} />\n          </div>\n        ))}\n      </ResponsiveReactGridLayout>\n    </div>\n  );\n};\nexport default Layouts;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly-grid-layout/Layouts.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'panels',\n    label: 'Panels',\n    type: ESetting.GROUP,\n    components: [\n      { key: 'filterMode', label: 'Filter Mode', type: ESetting.CHECKBOX, defaultValue: true },\n      {\n        key: 'saveInStorage',\n        label: 'Save in local storage',\n        type: ESetting.CHECKBOX,\n        defaultValue: false,\n      },\n      {\n        key: 'preventCollision',\n        label: 'Prevent Collision',\n        type: ESetting.CHECKBOX,\n        defaultValue: true,\n      },\n      { key: 'rowHeight', label: 'Row Height', type: ESetting.NUMBER_FIELD, defaultValue: 30 },\n      { key: 'marginX', label: 'Margin X', type: ESetting.NUMBER_FIELD, defaultValue: 10 },\n      { key: 'marginY', label: 'Margin Y', type: ESetting.NUMBER_FIELD, defaultValue: 10 },\n      {\n        key: 'cards',\n        label: 'Cards',\n        name: 'cards',\n        type: ESetting.DATAGRID,\n        data: [\n          {\n            key: 'title',\n            label: 'Title',\n            type: ESetting.TEXT_FIELD,\n            defaultValue: '',\n          },\n          {\n            key: 'x',\n            label: 'X',\n            type: ESetting.NUMBER_FIELD,\n            defaultValue: 0,\n          },\n          {\n            key: 'y',\n            label: 'Y',\n            type: ESetting.NUMBER_FIELD,\n            defaultValue: 0,\n          },\n          {\n            key: 'h',\n            label: 'Height',\n            type: ESetting.NUMBER_FIELD,\n            defaultValue: 1,\n          },\n          {\n            key: 'w',\n            label: 'Width',\n            type: ESetting.NUMBER_FIELD,\n            defaultValue: 1,\n          },\n          { key: 'static', label: 'Static', type: ESetting.CHECKBOX, defaultValue: false },\n          { key: 'isResizable', label: 'Resizable', type: ESetting.CHECKBOX, defaultValue: true },\n          { key: 'isDraggable', label: 'Draggable', type: ESetting.CHECKBOX, defaultValue: true },\n        ],\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('display'),\n];\nconsole.log('DEFAULT_SETTINGS', DEFAULT_SETTINGS);\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow', 'display'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_accordion/Accordion.build.tsx", "file_contents": "import { useEnhancedNode, useEnhancedEditor, selectResolver } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState } from 'react';\nimport { IAccordionProps } from './Accordion.config';\nimport AccordionItem from './AccordionItem';\nconst Accordion: FC<IAccordionProps> = ({\n  style,\n  variant,\n  className,\n  multiple,\n  classNames = [],\n  items,\n  transition,\n  position,\n  radius,\n  openChevron,\n  closeChevron,\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const [accordion, setAccordion] = useState<number[]>([]);\n  const toggleAccordion = (i: number) => {\n    multiple\n      ? accordion.includes(i)\n        ? setAccordion(accordion.filter((item) => item !== i))\n        : setAccordion([...accordion, i])\n      : accordion.includes(i)\n        ? setAccordion([])\n        : setAccordion([i]);\n  };\n  const { resolver } = useEnhancedEditor(selectResolver);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div\n        className={cn(\n          'accordion',\n          'overflow-hidden',\n          {\n            'divide-y': variant === 'default' || variant === 'contained',\n            border: variant === 'contained',\n          },\n          `${variant === 'contained' ? radius : ''}`,\n        )}\n      >\n        {items?.map((item: any, index: number) => (\n          <AccordionItem\n            position={position}\n            resolver={resolver}\n            key={item.id}\n            onClick={() => toggleAccordion(index)}\n            active={accordion.includes(index)}\n            item={item}\n            variant={variant}\n            transition={transition}\n            radius={radius}\n            openChevron={openChevron}\n            closeChevron={closeChevron}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Accordion;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_accordion/Accordion.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { TfiLayoutAccordionMerged } from 'react-icons/tfi';\nimport { generate } from 'short-uuid';\nimport AccordionSettings, { BasicSettings } from './Accordion.settings';\nexport interface IAccordion {\n  id: string;\n  title: string;\n  initialSsRef: string;\n}\nexport default {\n  craft: {\n    displayName: 'Accordion',\n    rules: {\n      canMoveIn: () => true,\n      canMoveOut: () => true,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n      items: [\n        {\n          id: generate(),\n          title: 'Accordion 1',\n          initialSsRef: 'accordion_1',\n        },\n      ],\n      variant: 'default' as string,\n    },\n    related: {\n      settings: Settings(AccordionSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Accordion',\n    exposed: true,\n    icon: TfiLayoutAccordionMerged,\n    events: [\n      {\n        label: 'On Change',\n        value: 'onchange',\n      },\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n    ],\n    datasources: {\n      canAttach: () => false,\n    },\n  },\n  defaultProps: {\n    multiple: false,\n    transition: 'duration-300',\n    position: 'right',\n    radius: 'rounded-none',\n    openChevron: 'fa-chevron-up',\n    closeChevron: 'fa-chevron-down',\n  },\n} as T4DComponentConfig<IAccordionProps>;\nexport interface IAccordionProps extends webforms.ComponentProps {\n  items?: IAccordion[];\n  variant?: 'default' | 'contained' | 'filled' | 'separated';\n  openChevron?: string;\n  closeChevron?: string;\n  multiple?: boolean;\n  transition?:\n    | 'duration-0'\n    | 'duration-75'\n    | 'duration-100'\n    | 'duration-150'\n    | 'duration-200'\n    | 'duration-300'\n    | 'duration-500'\n    | 'duration-700'\n    | 'duration-1000';\n  position?: 'left' | 'right';\n  radius?:\n    | 'rounded-none'\n    | 'rounded-sm'\n    | 'rounded'\n    | 'rounded-md'\n    | 'rounded-lg'\n    | 'rounded-xl'\n    | 'rounded-2xl'\n    | 'rounded-3xl';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_accordion/Accordion.render.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState } from 'react';\nimport { useEnhancedEditor, selectResolver } from '@ws-ui/webform-editor';\nimport { IAccordionProps } from './Accordion.config';\nimport AccordionItem from './AccordionItem';\nconst Accordion: FC<IAccordionProps> = ({\n  style,\n  variant,\n  className,\n  multiple,\n  classNames = [],\n  items,\n  transition,\n  position,\n  radius,\n  openChevron,\n  closeChevron,\n}) => {\n  const { connect } = useRenderer();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const [accordion, setAccordion] = useState<number[]>([]);\n  const toggleAccordion = (i: number) => {\n    multiple\n      ? accordion.includes(i)\n        ? setAccordion(accordion.filter((item) => item !== i))\n        : setAccordion([...accordion, i])\n      : accordion.includes(i)\n        ? setAccordion([])\n        : setAccordion([i]);\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div\n        className={cn(\n          'accordion',\n          'overflow-hidden',\n          {\n            'divide-y': variant === 'default' || variant === 'contained',\n            border: variant === 'contained',\n          },\n          `${variant === 'contained' ? radius : ''}`,\n        )}\n      >\n        {items?.map((item: any, index: number) => (\n          <AccordionItem\n            resolver={resolver}\n            key={item.id}\n            onClick={() => toggleAccordion(index)}\n            active={accordion.includes(index)}\n            item={item}\n            variant={variant}\n            transition={transition}\n            position={position}\n            radius={radius}\n            openChevron={openChevron}\n            closeChevron={closeChevron}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Accordion;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_accordion/Accordion.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { FaHandPointRight, FaHandPointLeft } from 'react-icons/fa';\nconst commonSettings: TSetting[] = [\n  {\n    type: ESetting.SELECT,\n    label: 'Variant',\n    isClearable: false,\n    options: [\n      {\n        label: 'Default',\n        value: 'default',\n      },\n      {\n        label: 'Contained',\n        value: 'contained',\n      },\n      {\n        label: 'Filled',\n        value: 'filled',\n      },\n      {\n        label: 'Separated',\n        value: 'separated',\n      },\n    ],\n    key: 'variant',\n    isSearchable: false,\n  },\n  {\n    key: 'openChevron',\n    label: 'Open Chevron',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-chevron-up',\n  },\n  {\n    key: 'closeChevron',\n    label: 'CLose Chevron',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-chevron-down',\n  },\n  {\n    type: ESetting.SELECT,\n    label: 'radius',\n    key: 'radius',\n    isClearable: false,\n    isSearchable: false,\n    options: [\n      {\n        label: 'None',\n        value: 'rounded-none',\n      },\n      {\n        label: 'Small',\n        value: 'rounded-sm',\n      },\n      {\n        label: 'Medium',\n        value: 'rounded',\n      },\n      {\n        label: 'Large',\n        value: 'rounded-lg',\n      },\n      {\n        label: 'Extra Large',\n        value: 'rounded-xl',\n      },\n      {\n        label: 'Extra Extra Large',\n        value: 'rounded-2xl',\n      },\n      {\n        label: 'Extra Extra Extra Large',\n        value: 'rounded-3xl',\n      },\n    ],\n  },\n  {\n    type: ESetting.CHECKBOX,\n    label: 'Multiple',\n    key: 'multiple',\n    defaultValue: false,\n  },\n  {\n    type: ESetting.RADIOGROUP,\n    label: 'Chevron Position',\n    key: 'position',\n    defaultValue: 'right',\n    options: [\n      {\n        icon: FaHandPointRight,\n        value: 'right',\n      },\n      {\n        icon: FaHandPointLeft,\n        value: 'left',\n      },\n    ],\n  },\n  {\n    type: ESetting.SELECT,\n    label: 'Transition',\n    key: 'transition',\n    defaultValue: 'ease-in-out',\n    options: [\n      {\n        label: '0 ms',\n        value: 'duration-0',\n      },\n      {\n        label: '75 ms',\n        value: 'duration-75',\n      },\n      {\n        label: '100 ms',\n        value: 'duration-100',\n      },\n      {\n        label: '150 ms',\n        value: 'duration-150',\n      },\n      {\n        label: '200 ms',\n        value: 'duration-200',\n      },\n      {\n        label: '300 ms',\n        value: 'duration-300',\n      },\n      {\n        label: '500 ms',\n        value: 'duration-500',\n      },\n      {\n        label: '700 ms',\n        value: 'duration-700',\n      },\n      {\n        label: '1000 ms',\n        value: 'duration-1000',\n      },\n    ],\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'items',\n    name: 'Items',\n    label: 'Items',\n    titleProperty: 'title',\n    data: [\n      {\n        key: 'title',\n        label: 'Title',\n        type: ESetting.TEXT_FIELD,\n        defaultValue: '',\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('datasource'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'display',\n    'style.overflow',\n    'style.overflow',\n    'style.textAlign',\n    'style.fontSize',\n    'style.fontWeight',\n    'style.fontFamily',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_accordion/AccordionItem.tsx", "file_contents": "import { FC } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\ninterface IAccordionItemProps {\n  variant?: 'default' | 'contained' | 'filled' | 'separated' | 'rounded';\n  item: any;\n  active: boolean;\n  onClick: () => void;\n  resolver: any;\n  transition?: string;\n  position?: 'left' | 'right';\n  openChevron?: string;\n  closeChevron?: string;\n  radius?:\n    | 'rounded-none'\n    | 'rounded-sm'\n    | 'rounded'\n    | 'rounded-md'\n    | 'rounded-lg'\n    | 'rounded-xl'\n    | 'rounded-2xl'\n    | 'rounded-3xl';\n}\nconst AccordionItem: FC<IAccordionItemProps> = ({\n  variant,\n  onClick,\n  active,\n  item,\n  resolver,\n  transition,\n  position,\n  radius,\n  openChevron,\n  closeChevron,\n}) => {\n  return (\n    <div\n      className={cn(\n        'accordion-item',\n        `${variant === 'filled' || variant === 'separated' ? radius : ''}`,\n        {\n          active: active,\n          'm-1': variant === 'separated' || variant === 'filled',\n          'bg-gray-100':\n            (variant === 'separated' && !active) ||\n            (variant === 'filled' && active) ||\n            (variant === 'contained' && active),\n          border: variant === 'separated' && active,\n        },\n      )}\n    >\n      <div\n        className={cn('accordion-title', 'flex mx-1 justify-between items-center gap-2', {\n          'flex-row-reverse': position === 'left',\n        })}\n      >\n        <Element\n          id={`accordion_${item.id}`}\n          className=\"h-fit\"\n          role=\"accordion-header\"\n          is={resolver.StyleBox}\n          deletable={false}\n          canvas\n        />\n        <span\n          onClick={onClick}\n          className={cn(\n            'fa cursor-pointer self-center p-2',\n            'accordion-chevron',\n            active ? openChevron : closeChevron,\n          )}\n        ></span>\n      </div>\n      <div\n        className={cn(\n          'accordion-content p-1 overflow-hidden transition-max-height ease-in-out',\n          `${transition}`,\n          {\n            'max-h-0 opacity-0': !active,\n            'max-h-screen opacity-100': active,\n          },\n        )}\n      >\n        <Element\n          serverSideRef={item.initialSsRef}\n          id={`body${item.id}`}\n          role=\"accordion-content\"\n          is={resolver.StyleBox}\n          deletable={false}\n          canvas\n        />\n      </div>\n    </div>\n  );\n};\nexport default AccordionItem;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_accordion/index.tsx", "file_contents": "import Accordion from './Accordion';\nexport default {\n  Accordion,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_AGGrid/AgGrid.build.tsx", "file_contents": "import { useDatasourceSub, useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { IAgGridProps } from './AgGrid.config';\nimport { ColDef, themeQuartz } from 'ag-grid-community';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nconst AgGrid: FC<IAgGridProps> = ({\n  datasource,\n  columns,\n  spacing,\n  accentColor,\n  backgroundColor,\n  textColor,\n  fontSize,\n  oddRowBackgroundColor,\n  borderColor,\n  wrapperBorderRadius,\n  rowBorder,\n  columnBorder,\n  headerBackgroundColor,\n  headerTextColor,\n  headerColumnBorder,\n  headerVerticalPaddingScale,\n  headerFontSize,\n  headerFontWeight,\n  cellHorizontalPaddingScale,\n  rowVerticalPaddingScale,\n  iconSize,\n  disabled,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const colDefs: ColDef[] = columns.map((col) => ({ field: col.title }));\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      flex: 1,\n      minWidth: 100,\n    };\n  }, []);\n  const rowData: any[] = Array.from({ length: 20 }, () => {\n    const row: any = {};\n    columns.forEach((col) => {\n      row[col.title] = col.source;\n    });\n    return row;\n  });\n  const theme = themeQuartz.withParams({\n    spacing,\n    accentColor,\n    backgroundColor,\n    textColor,\n    fontSize,\n    borderColor,\n    wrapperBorderRadius,\n    rowBorder,\n    columnBorder,\n    oddRowBackgroundColor,\n    headerBackgroundColor,\n    headerTextColor,\n    headerColumnBorder,\n    headerVerticalPaddingScale,\n    headerFontSize,\n    headerFontWeight,\n    cellHorizontalPaddingScale,\n    rowVerticalPaddingScale,\n    iconSize,\n    rangeSelectionBorderColor: 'transparent',\n  });\n  useDatasourceSub();\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {datasource ? (\n        columns.length > 0 ? (\n          <AgGridReact\n            rowData={rowData}\n            columnDefs={colDefs}\n            defaultColDef={defaultColDef}\n            theme={theme}\n            className={cn({ 'pointer-events-none opacity-40': disabled })}\n          />\n        ) : (\n          <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n            <BsFillInfoCircleFill className=\"mb-1 h-8 w-8\" />\n            <p>Please add columns</p>\n          </div>\n        )\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <BsFillInfoCircleFill className=\"mb-1 h-8 w-8\" />\n          <p>Please attach a datasource</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default AgGrid;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_AGGrid/AgGrid.config.tsx", "file_contents": "import {\n  EComponentKind,\n  T4DComponentConfig,\n  isDatasourcePayload,\n  isAttributePayload,\n  getDataTransferSourceID,\n  splitDatasourceID,\n  Settings,\n  T4DComponentDatasourceDeclaration,\n  IExostiveElementProps,\n} from '@ws-ui/webform-editor';\nimport { MdOutlineGridOn } from 'react-icons/md';\nimport capitalize from 'lodash/capitalize';\nimport cloneDeep from 'lodash/cloneDeep';\nimport findIndex from 'lodash/findIndex';\nimport AgGridSettings, { BasicSettings } from './AgGrid.settings';\nimport { generate } from 'short-uuid';\nconst types: string[] = [\n  'bool',\n  'word',\n  'string',\n  'text',\n  'uuid',\n  'short',\n  'long',\n  'number',\n  'long64',\n  'duration',\n  'object',\n  'date',\n  'image',\n  'blob',\n];\nexport default {\n  craft: {\n    displayName: 'AgGrid',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(AgGridSettings, BasicSettings),\n    },\n  },\n  info: {\n    settings: AgGridSettings,\n    sanityCheck: {\n      keys: [\n        { name: 'datasource', require: true, isDatasource: true },\n        { name: 'currentElement', require: false, isDatasource: false },\n        { name: 'state', require: false, isDatasource: false },\n      ],\n    },\n    displayName: 'AgGrid',\n    exposed: true,\n    icon: MdOutlineGridOn,\n    events: [\n      {\n        label: 'On Select',\n        value: 'onselect',\n      },\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On HeaderClick',\n        value: 'onheaderclick',\n      },\n      {\n        label: 'On CellClick',\n        value: 'oncellclick',\n      },\n      {\n        label: 'On SaveState',\n        value: 'onsavestate',\n      },\n    ],\n    datasources: {\n      declarations: (props) => {\n        const { columns, currentElement = '', datasource = '' } = props;\n        const declarations: T4DComponentDatasourceDeclaration[] = [\n          { path: datasource, iterable: true },\n        ];\n        if (currentElement) {\n          declarations.push({ path: currentElement });\n        }\n        if (columns) {\n          const { id: ds, namespace } = splitDatasourceID(datasource?.trim()) || {};\n          const { id: currentDs, namespace: currentDsNamespace } =\n            splitDatasourceID(currentElement) || {};\n          if (!ds && !currentDs) {\n            return;\n          }\n          columns.forEach((col) => {\n            if (currentDs && currentDsNamespace === namespace) {\n              const colSrcID = `${currentDs}.${col.source.trim()}`;\n              declarations.push({\n                path: namespace ? `${namespace}:${colSrcID}` : colSrcID,\n              });\n            }\n            const colSrcID = `${ds}.[].${col.source.trim()}`;\n            const iterable = ds.startsWith('$');\n            declarations.push({\n              path: namespace ? `${namespace}:${colSrcID}` : colSrcID,\n              iterable,\n            });\n          });\n        }\n        return declarations;\n      },\n      set: (nodeId, query, payload) => {\n        const new_props = cloneDeep(query.node(nodeId).get().data.props) as IExostiveElementProps;\n        payload.forEach((item) => {\n          if (isDatasourcePayload(item)) {\n            if (\n              item.source.type === 'entitysel' ||\n              (item.source.type === 'scalar' && item.source.dataType === 'array')\n            ) {\n              new_props.datasource = getDataTransferSourceID(item);\n            }\n            if (\n              item.source.type === 'entity' ||\n              (item.source.type === 'scalar' && item.source.dataType === 'object')\n            ) {\n              new_props.currentElement = getDataTransferSourceID(item);\n            }\n          } else if (isAttributePayload(item)) {\n            if (\n              item.attribute.kind === 'relatedEntities' ||\n              item.attribute.type?.includes('Selection') ||\n              item.attribute.behavior === 'relatedEntities'\n            ) {\n              new_props.datasource = getDataTransferSourceID(item);\n            } else if (\n              item.attribute.kind === 'relatedEntity' ||\n              item.attribute.behavior === 'relatedEntity' ||\n              !types.includes(item.attribute.type)\n            ) {\n              new_props.currentElement = getDataTransferSourceID(item);\n            } else {\n              if (findIndex(new_props.columns, { source: item.attribute.name }) === -1)\n                new_props.columns = [\n                  ...(new_props.columns || []),\n                  {\n                    title: capitalize(item.attribute.name),\n                    source: item.attribute.name,\n                    width: 150,\n                    flex: 1,\n                    sorting: false,\n                    filtering: false,\n                    locked: false,\n                    sizing: true,\n                    id: generate(),\n                    ...(item.attribute.type === 'image'\n                      ? {\n                          dataType: item.attribute.type,\n                        }\n                      : item.attribute.type === 'bool'\n                        ? {\n                            dataType: item.attribute.type,\n                            format: 'boolean',\n                          }\n                        : ['blob', 'object'].includes(item.attribute.type)\n                          ? {}\n                          : {\n                              format: '',\n                              dataType: item.attribute.type,\n                            }),\n                  } as any,\n                ];\n            }\n          }\n        });\n        return {\n          [nodeId]: new_props,\n        };\n      },\n    },\n  },\n  defaultProps: {\n    columns: [],\n    state: '',\n    saveLocalStorage: false,\n    style: {\n      height: '300px',\n    },\n    spacing: '8px',\n    accentColor: '#2196F3',\n    backgroundColor: '#fff',\n    textColor: '#000',\n    fontSize: '14px',\n    oddRowBackgroundColor: '',\n    borderColor: '#e0e0e0',\n    wrapperBorderRadius: '4px',\n    headerBackgroundColor: '',\n    headerTextColor: '',\n    rowBorder: true,\n    columnBorder: false,\n    headerColumnBorder: false,\n    headerVerticalPaddingScale: 1,\n    headerFontSize: '14px',\n    headerFontWeight: 700,\n    cellHorizontalPaddingScale: 1.3,\n    rowVerticalPaddingScale: 1.2,\n    iconSize: '16px',\n  },\n} as T4DComponentConfig<IAgGridProps>;\nexport interface IAgGridProps extends webforms.ComponentProps {\n  columns: IColumn[];\n  state?: string;\n  saveLocalStorage: boolean;\n  spacing: string;\n  accentColor: string;\n  backgroundColor: string;\n  textColor: string;\n  fontSize: string;\n  oddRowBackgroundColor: string;\n  borderColor: string;\n  wrapperBorderRadius: string;\n  rowBorder: boolean;\n  columnBorder: boolean;\n  headerBackgroundColor: string;\n  headerTextColor: string;\n  headerColumnBorder: boolean;\n  headerVerticalPaddingScale: number;\n  headerFontSize: string;\n  headerFontWeight: number;\n  cellHorizontalPaddingScale: number;\n  rowVerticalPaddingScale: number;\n  iconSize: string;\n}\nexport interface IColumn {\n  title: string;\n  source: string;\n  sorting: boolean;\n  filtering: boolean;\n  locked: boolean;\n  sizing: boolean;\n  width: number;\n  format: string;\n  id: string;\n  dataType: string;\n  flex: number;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_AGGrid/AgGrid.render.tsx", "file_contents": "import {\n  useDataLoader,\n  useRenderer,\n  useSources,\n  useDsChangeHandler,\n  entitySubject,\n  EntityActions,\n  useEnhancedNode,\n  useWebformPath,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useCallback, useMemo, useRef, useState } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { IAgGridProps } from './AgGrid.config';\nimport {\n  ColDef,\n  GridApi,\n  GridReadyEvent,\n  IGetRowsParams,\n  SortModelItem,\n  StateUpdatedEvent,\n  themeQuartz,\n} from 'ag-grid-community';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport CustomCell from './CustomCell';\nimport { format } from 'date-fns';\nconst AgGrid: FC<IAgGridProps> = ({\n  datasource,\n  columns,\n  state = '',\n  spacing,\n  accentColor,\n  backgroundColor,\n  textColor,\n  fontSize,\n  borderColor,\n  wrapperBorderRadius,\n  oddRowBackgroundColor,\n  rowBorder,\n  columnBorder,\n  headerBackgroundColor,\n  headerTextColor,\n  headerColumnBorder,\n  headerVerticalPaddingScale,\n  headerFontSize,\n  headerFontWeight,\n  cellHorizontalPaddingScale,\n  rowVerticalPaddingScale,\n  iconSize,\n  style,\n  disabled = false,\n  saveLocalStorage,\n  className,\n  classNames = [],\n}) => {\n  const { connect, emit } = useRenderer({\n    autoBindEvents: !disabled,\n    omittedEvents: ['onselect', 'onclick', 'onheaderclick', 'oncellclick', 'onsavestate'],\n  });\n  const {\n    sources: { datasource: ds, currentElement },\n  } = useSources({ acceptIteratorSel: true });\n  const { id: nodeID } = useEnhancedNode();\n  const prevSortModelRef = useRef<SortModelItem[]>([]);\n  const gridRef = useRef<AgGridReact>(null);\n  const searchDs = useMemo(() => {\n    if (ds) {\n      const clone: any = cloneDeep(ds);\n      clone.id = `${clone.id}_clone`;\n      clone.children = {};\n      return clone;\n    }\n    return null;\n  }, [ds?.id, (ds as any)?.entitysel]);\n  const { fetchIndex } = useDataLoader({\n    source: ds,\n  });\n  const { fetchIndex: fetchIndexClone } = useDataLoader({\n    source: searchDs,\n  });\n  const path = useWebformPath();\n  const stateDS = window.DataSource.getSource(state, path);\n  const [selected, setSelected] = useState(-1);\n  const [_scrollIndex, setScrollIndex] = useState(0);\n  const [_count, setCount] = useState(0);\n  const colDefs: ColDef[] = useMemo(\n    () =>\n      columns.map((col) => ({\n        field: col.title,\n        cellRendererParams: {\n          format: col.format,\n          dataType: col.dataType,\n        },\n        lockPosition: col.locked,\n        sortable: col.dataType !== 'image' && col.dataType !== 'object' && col.sorting,\n        resizable: col.sizing,\n        width: col.width,\n        flex: col.flex,\n        filter:\n          col.filtering &&\n          (col.dataType === 'text' || col.dataType === 'string'\n            ? 'agTextColumnFilter'\n            : col.dataType === 'long' || col.dataType === 'number'\n              ? 'agNumberColumnFilter'\n              : col.dataType === 'date'\n                ? 'agDateColumnFilter'\n                : false),\n        filterParams: {\n          filterOptions:\n            col.dataType === 'text' || col.dataType === 'string'\n              ? ['contains', 'equals', 'notEqual', 'startsWith', 'endsWith']\n              : col.dataType === 'long' || col.dataType === 'number'\n                ? [\n                    'equals',\n                    'notEqual',\n                    'greaterThan',\n                    'greaterThanOrEqual',\n                    'lessThan',\n                    'lessThanOrEqual',\n                    'inRange',\n                  ]\n                : col.dataType === 'date'\n                  ? ['equals', 'notEqual', 'greaterThan', 'lessThan', 'inRange']\n                  : [],\n          defaultOption: 'equals',\n        },\n      })),\n    [],\n  );\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      minWidth: 100,\n      sortingOrder: ['asc', 'desc'],\n      cellRenderer: CustomCell,\n    };\n  }, []);\n  const theme = themeQuartz.withParams({\n    spacing,\n    accentColor,\n    backgroundColor,\n    textColor,\n    fontSize,\n    oddRowBackgroundColor,\n    borderColor,\n    rowBorder,\n    columnBorder,\n    wrapperBorderRadius,\n    headerBackgroundColor,\n    headerTextColor,\n    headerColumnBorder,\n    headerVerticalPaddingScale,\n    headerFontSize,\n    headerFontWeight,\n    cellHorizontalPaddingScale,\n    rowVerticalPaddingScale,\n    iconSize,\n    foregroundColor: textColor,\n    borderRadius: wrapperBorderRadius,\n    rangeSelectionBorderColor: 'transparent',\n  });\n  const { updateCurrentDsValue } = useDsChangeHandler({\n    source: ds,\n    currentDs: currentElement,\n    selected,\n    setSelected,\n    setScrollIndex,\n    setCount,\n    fetchIndex,\n    onDsChange: (length, selected) => {\n      if (!gridRef.current) return;\n      gridRef.current.api?.refreshInfiniteCache();\n      if (selected >= 0) {\n        updateCurrentDsValue({\n          index: selected < length ? selected : 0,\n          forceUpdate: true,\n        });\n      }\n    },\n    onCurrentDsChange: (selected) => {\n      if (!gridRef.current) return;\n      const rowNode = gridRef.current.api?.getRowNode(selected.toString());\n      gridRef.current.api?.ensureIndexVisible(selected);\n      rowNode?.setSelected(true);\n      entitySubject.next({\n        action: EntityActions.UPDATE,\n        payload: {\n          nodeID,\n          rowIndex: selected,\n        },\n      });\n    },\n  });\n  const selectRow = useCallback(async (event: any) => {\n    if (!ds) return;\n    await updateCurrentDsValue({\n      index: event.rowIndex,\n    });\n    emit('onselect');\n  }, []);\n  const selectCell = useCallback((event: any) => {\n    if (!ds) return;\n    emit('oncellclick', {\n      column: event.column.getColId(),\n      value: event.value,\n    });\n  }, []);\n  const selectHeader = useCallback((event: any) => {\n    emit('onheaderclick', {\n      column: event.column,\n    });\n  }, []);\n  const stateUpdated = useCallback((params: StateUpdatedEvent) => {\n    if (params.type === 'stateUpdated' && !params.sources.includes('gridInitializing')) {\n      const columnState = params.api.getColumnState();\n      if (saveLocalStorage) {\n        localStorage.setItem(`gridState_${nodeID}`, JSON.stringify(columnState));\n      } else if (stateDS) {\n        stateDS.setValue(null, columnState);\n      }\n      emit('onsavestate', columnState);\n    }\n  }, []);\n  const getState = useCallback(async (params: any) => {\n    if (saveLocalStorage) {\n      const storedState = localStorage.getItem(`gridState_${nodeID}`);\n      if (storedState) {\n        params.api.applyColumnState({ state: JSON.parse(storedState), applyOrder: true });\n      }\n    } else if (stateDS) {\n      const dsValue = await stateDS?.getValue();\n      params.api.applyColumnState({ state: dsValue, applyOrder: true });\n    }\n  }, []);\n  const buildFilterQuery = useCallback((filter: any, source: string): string => {\n    const filterType = filter.filterType;\n    const filterValue = filter.filter;\n    switch (filterType) {\n      case 'text':\n        switch (filter.type) {\n          case 'contains':\n            return `${source} == \"@${filterValue}@\"`;\n          case 'equals':\n            return `${source} == \"${filterValue}\"`;\n          case 'notEqual':\n            return `${source} != \"${filterValue}\"`;\n          case 'startsWith':\n            return `${source} begin \"${filterValue}\"`;\n          case 'endsWith':\n            return `${source} == \"@${filterValue}\"`;\n          default:\n            return '';\n        }\n      case 'number':\n        switch (filter.type) {\n          case 'equals':\n            return `${source} == ${filterValue}`;\n          case 'notEqual':\n            return `${source} != ${filterValue}`;\n          case 'greaterThan':\n            return `${source} > ${filterValue}`;\n          case 'greaterThanOrEqual':\n            return `${source} >= ${filterValue}`;\n          case 'lessThan':\n            return `${source} < ${filterValue}`;\n          case 'lessThanOrEqual':\n            return `${source} <= ${filterValue}`;\n          case 'inRange':\n            return `${source} >= ${filter.filter} AND ${source} <= ${filter.filterTo}`;\n          default:\n            return '';\n        }\n      case 'date':\n        const dateFrom = new Date(filter.dateFrom);\n        switch (filter.type) {\n          case 'equals':\n            return `${source} == ${format(dateFrom, 'yyyy-MM-dd')}`;\n          case 'notEqual':\n            return `${source} != ${format(dateFrom, 'yyyy-MM-dd')}`;\n          case 'lessThan':\n            return `${source} < ${format(dateFrom, 'yyyy-MM-dd')}`;\n          case 'greaterThan':\n            return `${source} > ${format(dateFrom, 'yyyy-MM-dd')}`;\n          case 'inRange':\n            return `${source} > ${format(dateFrom, 'yyyy-MM-dd')} AND ${source} < ${format(new Date(filter.dateTo), 'yyyy-MM-dd')}`;\n          default:\n            return '';\n        }\n      default:\n        return '';\n    }\n  }, []);\n  const buildFilterQueries = useCallback(\n    (filterModel: any, columns: any[]): string[] => {\n      return Object.keys(filterModel).map((key) => {\n        const filter = filterModel[key];\n        const column = columns.find((col) => col.title === key);\n        if (!column) return '';\n        const source = column.source;\n        if (filter.operator && filter.conditions) {\n          const conditionQueries = filter.conditions.map((condition: any) =>\n            buildFilterQuery(condition, source),\n          );\n          return `(${conditionQueries.join(` ${filter.operator} `)})`;\n        } else {\n          return buildFilterQuery(filter, source);\n        }\n      });\n    },\n    [buildFilterQuery],\n  );\n  const applySorting = useCallback(async (params: IGetRowsParams, columns: any[], ds: any) => {\n    if (params.sortModel.length > 0 && !isEqual(params.sortModel, prevSortModelRef.current)) {\n      prevSortModelRef.current = params.sortModel;\n      const sortingString = params.sortModel\n        .map((sort) => `${columns.find((c) => c.title === sort.colId)?.source} ${sort.sort}`)\n        .join(', ');\n      await ds.orderBy(sortingString);\n    }\n  }, []);\n  const fetchData = useCallback(async (fetchIndex: any, params: IGetRowsParams) => {\n    const entities = await fetchIndex(params.startRow);\n    const rowData = entities.map((data: any) => {\n      const row: any = {};\n      columns.forEach((col) => {\n        row[col.title] = data[col.source];\n      });\n      return row;\n    });\n    return { entities, rowData };\n  }, []);\n  const getSelectedRow = useCallback(async (api: GridApi) => {\n    if (currentElement && selected === -1) {\n      try {\n        let index = -1;\n        if (currentElement.type === 'entity') {\n          const entity = (currentElement as any).getEntity();\n          if (entity) {\n            const pos = entity.getPos();\n            const ownerSel = entity.getSelection();\n            const sel = (ds as any)?.getSelection();\n            if (sel && sel !== ownerSel) {\n              sel.findEntityPosition(entity).then((posInSel: number) => {\n                if (posInSel === pos) {\n                  const rowNode = api.getRowNode(pos.toString());\n                  api.ensureIndexVisible(pos, 'middle');\n                  rowNode?.setSelected(true);\n                }\n              });\n            } else {\n              index = pos;\n            }\n          }\n        } else if (\n          currentElement.type === 'scalar' &&\n          currentElement.dataType === 'object' &&\n          currentElement.parentSource\n        ) {\n          index = (currentElement as any).getPos();\n        }\n        const rowNode = api.getRowNode(index.toString());\n        api.ensureIndexVisible(index, 'middle');\n        rowNode?.setSelected(true);\n      } catch (e) {\n      }\n    }\n  }, []);\n  const onGridReady = useCallback((params: GridReadyEvent) => {\n    params.api.setGridOption('datasource', {\n      getRows: async (rowParams: IGetRowsParams) => {\n        let entities = null;\n        let length = 0;\n        let rowData: any[] = [];\n        if (!isEqual(rowParams.filterModel, {})) {\n          const filterQueries = buildFilterQueries(rowParams.filterModel, columns);\n          const queryStr = filterQueries.filter(Boolean).join(' AND ');\n          const { entitysel } = searchDs as any;\n          const dataSetName = entitysel?.getServerRef();\n          (searchDs as any).entitysel = searchDs.dataclass.query(queryStr, {\n            dataSetName,\n            filterAttributes: searchDs.filterAttributesText || searchDs._private.filterAttributes,\n          });\n          await applySorting(rowParams, columns, searchDs);\n          const result = await fetchData(fetchIndexClone, rowParams);\n          entities = result.entities;\n          rowData = result.rowData;\n          length = searchDs.entitysel._private.selLength;\n        } else {\n          await applySorting(rowParams, columns, ds);\n          const result = await fetchData(fetchIndex, rowParams);\n          entities = result.entities;\n          rowData = result.rowData;\n          length = (ds as any).entitysel._private.selLength;\n        }\n        if (Array.isArray(entities)) {\n          rowParams.successCallback(rowData, length);\n        } else {\n          rowParams.failCallback();\n        }\n        getSelectedRow(params.api);\n      },\n    });\n    getState(params);\n  }, []);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {datasource ? (\n        <AgGridReact\n          ref={gridRef}\n          columnDefs={colDefs}\n          defaultColDef={defaultColDef}\n          onRowClicked={selectRow}\n          onGridReady={onGridReady}\n          rowModelType=\"infinite\"\n          rowSelection={{ mode: 'singleRow', enableClickSelection: true, checkboxes: false }}\n          cacheBlockSize={100}\n          maxBlocksInCache={10}\n          cacheOverflowSize={2}\n          maxConcurrentDatasourceRequests={1}\n          rowBuffer={0}\n          onStateUpdated={stateUpdated}\n          onCellClicked={selectCell}\n          onColumnHeaderClicked={selectHeader}\n          theme={theme}\n          className={cn({ 'pointer-events-none opacity-40': disabled })}\n        />\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <p>Error</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default AgGrid;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_AGGrid/AgGrid.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { validateServerSide } from '@ws-ui/shared';\nconst commonSettings: TSetting[] = [\n  {\n    type: ESetting.DATAGRID,\n    key: 'columns',\n    label: 'Columns',\n    titleProperty: 'title',\n    data: [\n      {\n        label: 'Title',\n        defaultValue: '',\n        type: ESetting.TEXT_FIELD,\n        key: 'title',\n      },\n      {\n        label: 'Source',\n        type: ESetting.DS_AUTO_SUGGEST,\n        key: 'source',\n      },\n      {\n        label: 'Format',\n        defaultValue: '',\n        type: ESetting.FORMAT_FIELD,\n        key: 'format',\n        labelClassName: 'mr-4 ml-2 w-16',\n        className: 'mb-2',\n      },\n      {\n        label: 'Width',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 150,\n        key: 'width',\n      },\n      {\n        label: 'Flex',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 1,\n        key: 'flex',\n      },\n      {\n        label: 'Enable Sorting',\n        defaultValue: false,\n        type: ESetting.CHECKBOX,\n        key: 'sorting',\n      },\n      {\n        label: 'Enable filtering',\n        defaultValue: false,\n        type: ESetting.CHECKBOX,\n        key: 'filtering',\n      },\n      {\n        label: 'Locked Position',\n        defaultValue: false,\n        type: ESetting.CHECKBOX,\n        key: 'locked',\n      },\n      {\n        label: 'Enable Sizing',\n        defaultValue: true,\n        type: ESetting.CHECKBOX,\n        key: 'sizing',\n      },\n    ],\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Qodly Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'state',\n    label: 'State Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'saveLocalStorage',\n    label: 'Save In Local Storage',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    hasError: validateServerSide,\n    validateOnEnter: true,\n  },\n];\nconst basicSettings: TSetting[] = [\n  {\n    key: 'disabled',\n    label: 'Disabled',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'classNames',\n    label: 'Class',\n    type: ESetting.CSSCLASS_SELECTOR,\n    placeholder: '.example',\n  },\n  {\n    key: 'style.width',\n    label: 'Width',\n    type: ESetting.UNITFIELD,\n    tags: ['width'],\n    units: [\n      'px',\n      'em',\n      'rem',\n      'vw',\n      'vh',\n      'pt',\n      '%',\n      'auto',\n      'none',\n      'unset',\n      'inherit',\n      'fit-content',\n    ],\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  {\n    key: 'style.height',\n    label: 'Height',\n    type: ESetting.UNITFIELD,\n    tags: ['Height', 'height'],\n    units: [\n      'px',\n      'em',\n      'rem',\n      'vw',\n      'vh',\n      'pt',\n      '%',\n      'auto',\n      'none',\n      'unset',\n      'inherit',\n      'fit-content',\n    ],\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  {\n    key: 'spacing',\n    label: 'Spacing',\n    type: ESetting.UNITFIELD,\n    tags: ['Spacing', 'spacing'],\n    units: ['px', 'em', 'rem', 'vw', 'vh', 'pt', '%'],\n    defaultValue: '8',\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  {\n    key: 'accentColor',\n    label: 'Accent Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#2196F3',\n  },\n  {\n    key: 'backgroundColor',\n    label: 'Background Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#FFF',\n  },\n  {\n    key: 'textColor',\n    label: 'Text Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#000',\n  },\n  {\n    key: 'oddRowBackgroundColor',\n    label: 'Odd Row Background Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#21222C',\n  },\n  {\n    key: 'borderColor',\n    label: 'Border Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#e0e0e0',\n  },\n  {\n    key: 'wrapperBorderRadius',\n    label: 'Border Radius',\n    type: ESetting.UNITFIELD,\n    tags: ['border-radius'],\n    units: ['px', 'em', 'rem', 'vw', 'vh', 'pt', '%'],\n    defaultValue: '0',\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  { key: 'rowBorder', label: 'Row Border', type: ESetting.CHECKBOX, defaultValue: true },\n  { key: 'columnBorder', label: 'Column Border', type: ESetting.CHECKBOX, defaultValue: false },\n];\nconst generalSettings: TSetting[] = [\n  {\n    key: 'disabled',\n    label: 'Disabled',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'classNames',\n    label: 'Class',\n    type: ESetting.CSSCLASS_SELECTOR,\n    placeholder: '.example',\n  },\n  {\n    key: 'style.width',\n    label: 'Width',\n    type: ESetting.UNITFIELD,\n    tags: ['width'],\n    units: [\n      'px',\n      'em',\n      'rem',\n      'vw',\n      'vh',\n      'pt',\n      '%',\n      'auto',\n      'none',\n      'unset',\n      'inherit',\n      'fit-content',\n    ],\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  {\n    key: 'style.height',\n    label: 'Height',\n    type: ESetting.UNITFIELD,\n    tags: ['Height', 'height'],\n    units: [\n      'px',\n      'em',\n      'rem',\n      'vw',\n      'vh',\n      'pt',\n      '%',\n      'auto',\n      'none',\n      'unset',\n      'inherit',\n      'fit-content',\n    ],\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  {\n    key: 'spacing',\n    label: 'Spacing',\n    type: ESetting.UNITFIELD,\n    tags: ['Spacing', 'spacing'],\n    units: ['px', 'em', 'rem', 'vw', 'vh', 'pt', '%'],\n    defaultValue: '8',\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  {\n    key: 'accentColor',\n    label: 'Accent Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#2196F3',\n  },\n  {\n    key: 'backgroundColor',\n    label: 'Background Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#FFF',\n  },\n  {\n    key: 'textColor',\n    label: 'Text Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#000',\n  },\n  {\n    key: 'fontSize',\n    label: 'Font Size',\n    type: ESetting.UNITFIELD,\n    tags: ['font-size'],\n    units: ['px', 'em', 'rem', 'vw', 'vh', 'pt', '%'],\n    defaultValue: '14px',\n    hasLabel: true,\n    isSmallInput: true,\n  },\n];\nconst borderSettings: TSetting[] = [\n  {\n    key: 'borderColor',\n    label: 'Border Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#e0e0e0',\n  },\n  {\n    key: 'wrapperBorderRadius',\n    label: 'Border Radius',\n    type: ESetting.UNITFIELD,\n    tags: ['border-radius'],\n    units: ['px', 'em', 'rem', 'vw', 'vh', 'pt', '%'],\n    defaultValue: '0',\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  { key: 'rowBorder', label: 'Row Border', type: ESetting.CHECKBOX, defaultValue: true },\n  { key: 'columnBorder', label: 'Column Border', type: ESetting.CHECKBOX, defaultValue: false },\n];\nconst headerSettings: TSetting[] = [\n  {\n    key: 'headerBackgroundColor',\n    label: 'Header Background Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '',\n  },\n  {\n    key: 'headerTextColor',\n    label: 'Header Text Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '',\n  },\n  {\n    key: 'headerVerticalPaddingScale',\n    label: 'Header Vertical Padding Scale',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 1,\n  },\n  {\n    key: 'headerColumnBorder',\n    label: 'Header Column Border',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'headerFontSize',\n    label: 'Header Font Size',\n    type: ESetting.UNITFIELD,\n    tags: ['font-size'],\n    units: ['px', 'em', 'rem', 'vw', 'vh', 'pt', '%'],\n    defaultValue: '14px',\n    hasLabel: true,\n    isSmallInput: true,\n  },\n  {\n    key: 'headerFontWeight',\n    label: 'Header Font Weight',\n    type: ESetting.SELECT,\n    defaultValue: 700,\n    options: [\n      { label: '400', value: '400' },\n      { label: '500', value: '500' },\n      { label: '600', value: '600' },\n      { label: '700', value: '700' },\n      { label: '800', value: '800' },\n      { label: '900', value: '900' },\n    ],\n  },\n];\nconst cellSettings: TSetting[] = [\n  {\n    key: 'oddRowBackgroundColor',\n    label: 'Odd Row Background Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#21222C',\n  },\n  {\n    key: 'cellHorizontalPaddingScale',\n    label: 'Cell Horizontal Padding Scale',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 1,\n  },\n  {\n    key: 'rowVerticalPaddingScale',\n    label: 'Row Vertical Padding Scale',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 1,\n  },\n];\nconst iconSettings: TSetting[] = [\n  {\n    key: 'iconSize',\n    label: 'Icon Size',\n    type: ESetting.UNITFIELD,\n    tags: ['icon-size'],\n    units: ['px', 'em', 'rem', 'vw', 'vh', 'pt', '%'],\n    defaultValue: '16px',\n    hasLabel: true,\n    isSmallInput: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  {\n    key: 'general',\n    label: 'General',\n    type: ESetting.GROUP,\n    components: generalSettings,\n  },\n  {\n    key: 'border',\n    label: 'Border',\n    type: ESetting.GROUP,\n    components: borderSettings,\n  },\n  {\n    key: 'header',\n    label: 'Header',\n    type: ESetting.GROUP,\n    components: headerSettings,\n  },\n  {\n    key: 'cell',\n    label: 'Cell',\n    type: ESetting.GROUP,\n    components: cellSettings,\n  },\n  {\n    key: 'icon',\n    label: 'Icon',\n    type: ESetting.GROUP,\n    components: iconSettings,\n  },\n];\nexport const BasicSettings: TSetting[] = [\n  ...dataAccessSettings,\n  ...commonSettings,\n  ...basicSettings,\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_AGGrid/CustomCell.tsx", "file_contents": "import { formatValue } from '@ws-ui/webform-editor';\nimport { MdCheck, MdClose } from 'react-icons/md';\nconst CustomCell = ({ format, dataType, value }: { format: any; dataType: string; value: any }) => {\n  switch (true) {\n    case value && typeof value === 'object' && !(value instanceof Date):\n      return (\n        <>\n          {value?.__deferred?.image ? (\n            <img className=\"image h-full\" src={value?.__deferred?.uri} alt=\"\" />\n          ) : (\n            JSON.stringify(value)\n          )}\n        </>\n      );\n    case dataType === 'number' && typeof value === 'boolean' && format === 'checkbox':\n      return <input type=\"checkbox\" checked={value} disabled />;\n    case dataType === 'number' && typeof value === 'boolean' && format === 'icon':\n      return value ? <MdCheck /> : <MdClose />;\n    case dataType === 'number' && typeof value === 'number' && format === 'slider':\n      return <input type=\"range\" value={value} disabled />;\n    case dataType === 'bool' && typeof value === 'boolean' && format === 'boolean':\n      return <div className=\"cell\">{value.toString()}</div>;\n    default:\n      const customValue =\n        value !== undefined && value !== null\n          ? format\n            ? formatValue(value, dataType, format)\n            : value.toString()\n          : value;\n      return <div  className=\"cell whitespace-nowrap\">{customValue}</div>;\n  }\n};\nexport default CustomCell;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_AGGrid/index.tsx", "file_contents": "import AgGrid from './AgGrid';\nexport default {\n  AgGrid,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bar.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IBarProps } from './Bar.config';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar as BarChart } from 'react-chartjs-2';\nimport { randomColor } from '../shared/colorUtils';\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst Bar: FC<IBarProps> = ({\n  name,\n  legendPosition,\n  style,\n  grid = false,\n  tooltip = true,\n  xAxis = true,\n  yAxis = true,\n  stacked = false,\n  datasets = [],\n  orientation,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const labels = ['January', 'February', 'March', 'April', 'May', 'June'];\n  const data = useMemo(\n    () => ({\n      labels: labels,\n      datasets: datasets.map((set) => {\n        const color = randomColor();\n        return {\n          label: set.label,\n          data: labels.map(() => Math.random() * 10),\n          borderColor: set.borderColor || set.backgroundColor,\n          backgroundColor: set.backgroundColor || set.borderColor || color,\n          borderSkipped:\n            set.borderSkipped === 'false' ||\n            (set.borderSkipped as 'start' | 'end' | 'middle' | 'bottom' | 'left' | 'top' | 'right'),\n          borderRadius: set.borderRadius,\n          borderWidth: set.borderWidth,\n        };\n      }),\n    }),\n    [datasets],\n  );\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      indexAxis: orientation,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          stacked: stacked,\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, name, orientation, stacked],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <BarChart options={options} data={data} />\n    </div>\n  );\n};\nexport default Bar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bar.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaRegChartBar } from 'react-icons/fa';\nimport BarSettings, { BasicSettings } from './Bar.settings';\nexport default {\n  craft: {\n    displayName: 'Bar',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(BarSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Bar',\n    exposed: true,\n    icon: FaRegChartBar,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    name: 'Qodly chart summary',\n    grid: true,\n    tooltip: true,\n    xAxis: true,\n    yAxis: true,\n    stacked: false,\n    legendPosition: 'top',\n    orientation: 'x',\n    style: {\n      height: '200px',\n      width: '400px',\n    },\n  },\n} as T4DComponentConfig<IBarProps>;\nexport interface IBarProps extends webforms.ComponentProps {\n  name?: string;\n  grid?: boolean;\n  tooltip?: boolean;\n  xAxis?: boolean;\n  yAxis?: boolean;\n  stacked?: boolean;\n  legendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'chartArea';\n  orientation: 'x' | 'y';\n  datasets?: IDataSet[];\n}\nexport interface IDataSet {\n  label: string;\n  backgroundColor: string;\n  borderColor: string;\n  borderRadius: number;\n  borderWidth: number;\n  borderSkipped:\n    | 'start'\n    | 'end'\n    | 'middle'\n    | 'bottom'\n    | 'left'\n    | 'top'\n    | 'right'\n    | 'true'\n    | 'false';\n  source: any;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bar.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo } from 'react';\nimport { IBarProps } from './Bar.config';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar as BarChart } from 'react-chartjs-2';\nimport { randomColor } from '../shared/colorUtils';\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst Bar: FC<IBarProps> = ({\n  name,\n  legendPosition,\n  grid = false,\n  tooltip = true,\n  xAxis = true,\n  yAxis = true,\n  stacked = false,\n  datasets = [],\n  orientation,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const empty: any[] = [];\n  const [value, setValue] = useState({\n    labels: empty,\n    datasets: datasets.map((set) => {\n      const color = randomColor();\n      return {\n        label: set.label,\n        data: empty,\n        borderColor: set.borderColor || set.backgroundColor,\n        backgroundColor: set.backgroundColor || set.borderColor || color,\n        borderSkipped:\n          set.borderSkipped === 'false' ||\n          (set.borderSkipped as 'start' | 'end' | 'middle' | 'bottom' | 'left' | 'top' | 'right'),\n        borderRadius: set.borderRadius,\n        borderWidth: set.borderWidth,\n      };\n    }),\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<Array<any>>();\n      setValue((prevValue) => ({\n        ...prevValue,\n        labels: v.map((e) => e.x),\n        datasets: datasets.map((_set, index) => ({\n          ...prevValue.datasets[index],\n          data: v.map((e) => e[_set.source]),\n        })),\n      }));\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      indexAxis: orientation,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          stacked: stacked,\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, name, orientation, stacked],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <BarChart options={options} data={value} />\n    </div>\n  );\n};\nexport default Bar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bar.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  CgAlignBottom,\n  CgAlignLeft,\n  CgAlignRight,\n  CgAlignTop,\n  CgAlignCenter,\n  CgAlignMiddle,\n  CgShortcut,\n} from 'react-icons/cg';\nimport { BiMoveHorizontal, BiMoveVertical } from 'react-icons/bi';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'name',\n    label: 'Title',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly chart summary',\n  },\n  {\n    key: 'legendPosition',\n    label: 'Legend Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: CgAlignTop },\n      { value: 'bottom', icon: CgAlignBottom },\n      { value: 'left', icon: CgAlignLeft },\n      { value: 'right', icon: CgAlignRight },\n      { value: 'center', icon: CgAlignCenter },\n      { value: 'chartArea', icon: CgAlignMiddle },\n      { value: 'hidden', icon: CgShortcut },\n    ],\n  },\n  {\n    key: 'orientation',\n    label: 'Orientation',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'y',\n    options: [\n      {\n        value: 'x',\n        tooltip: 'Vertical',\n        icon: BiMoveVertical,\n      },\n      {\n        value: 'y',\n        icon: BiMoveHorizontal,\n        tooltip: 'Horizontal',\n      },\n    ],\n  },\n  {\n    key: 'grid',\n    label: 'Display grid',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tooltip',\n    label: 'Display tooltip',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'datasets',\n    name: 'Data',\n    label: 'Data',\n    data: [\n      {\n        key: 'label',\n        label: 'Label',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'source',\n        label: 'Source',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'backgroundColor',\n        label: 'Background Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'borderColor',\n        label: 'Border Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'borderWidth',\n        label: 'Border Width',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 1,\n      },\n      {\n        key: 'borderRadius',\n        label: 'Border Radius',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 0,\n      },\n      {\n        key: 'borderSkipped',\n        label: 'Border Skipped',\n        type: ESetting.SELECT,\n        defaultValue: 'start',\n        options: [\n          { value: 'start', label: 'Start' },\n          { value: 'end', label: 'End' },\n          { value: 'middle', label: 'Middle' },\n          { value: 'bottom', label: 'Bottom' },\n          { value: 'left', label: 'Left' },\n          { value: 'top', label: 'Top' },\n          { value: 'right', label: 'Right' },\n          { value: 'false', label: 'All' },\n          { value: 'true', label: 'None' },\n        ],\n      },\n    ],\n  },\n  {\n    key: 'xAxis',\n    label: 'Display x-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'yAxis',\n    label: 'Display y-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'stacked',\n    label: 'Stacked Bar',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bubble.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IBubbleProps } from './Bubble.config';\nimport { Chart as ChartJS, LinearScale, PointElement, Tooltip, Legend } from 'chart.js';\nimport { Bubble as BubbleChart } from 'react-chartjs-2';\nimport { randomColor } from '../shared/colorUtils';\nChartJS.register(LinearScale, PointElement, Tooltip, Legend);\nconst Bubble: FC<IBubbleProps> = ({\n  name,\n  datasets = [],\n  legendPosition = 'top',\n  grid = false,\n  tooltip = true,\n  xAxis = true,\n  yAxis = true,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n          beginAtZero: true,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, name],\n  );\n  const data = useMemo(\n    () => ({\n      datasets: datasets.map((set) => {\n        const color = randomColor();\n        return {\n          label: set.label,\n          data: Array.from({ length: 20 }, () => ({\n            x: Math.floor(Math.random() * 41) - 20,\n            y: Math.floor(Math.random() * 41) - 20,\n            r: Math.floor(Math.random() * 5) + 1,\n          })),\n          pointBackgroundColor: set.pointBackgroundColor || set.pointBorderColor || color,\n          pointBorderColor: set.pointBorderColor || set.pointBackgroundColor || color,\n          pointStyle: set.pointStyle,\n        };\n      }),\n    }),\n    [datasets],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <BubbleChart options={options} data={data} />\n    </div>\n  );\n};\nexport default Bubble;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bubble.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineBubbleChart } from 'react-icons/md';\nimport BubbleSettings, { BasicSettings } from './Bubble.settings';\nexport default {\n  craft: {\n    displayName: 'Bubble',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(BubbleSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Bubble',\n    exposed: true,\n    icon: MdOutlineBubbleChart,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    name: 'Qodly chart summary',\n    grid: false,\n    tooltip: true,\n    xAxis: true,\n    yAxis: true,\n    legendPosition: 'top',\n    style: {\n      height: '200px',\n      width: '400px',\n    },\n  },\n} as T4DComponentConfig<IBubbleProps>;\nexport interface IBubbleProps extends webforms.ComponentProps {\n  name?: string;\n  datasets?: IDataSet[];\n  grid?: boolean;\n  tooltip?: boolean;\n  xAxis?: boolean;\n  yAxis?: boolean;\n  legendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'chartArea';\n}\nexport interface IDataSet {\n  label: string;\n  pointBorderColor: string;\n  pointBackgroundColor: string;\n  source: any;\n  pointStyle?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bubble.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo } from 'react';\nimport { IBubbleProps } from './Bubble.config';\nimport { randomColor } from '../shared/colorUtils';\nimport { Chart as ChartJS, LinearScale, PointElement, Tooltip, Legend } from 'chart.js';\nimport { Bubble as BubbleChart } from 'react-chartjs-2';\nChartJS.register(LinearScale, PointElement, Tooltip, Legend);\nconst Bubble: FC<IBubbleProps> = ({\n  name,\n  datasets = [],\n  legendPosition = 'top',\n  grid = false,\n  tooltip = true,\n  xAxis = true,\n  yAxis = true,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const empty: any[] = [];\n  const [value, setValue] = useState({\n    datasets: datasets.map((set) => {\n      const color = randomColor();\n      return {\n        label: set.label,\n        data: empty,\n        pointBackgroundColor: set.pointBackgroundColor || set.pointBackgroundColor || color,\n        pointBorderColor: set.pointBackgroundColor || set.pointBackgroundColor || color,\n        pointStyle: set.pointStyle,\n      };\n    }),\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n          beginAtZero: true,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, name],\n  );\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<Array<any>>();\n      setValue((prevValue) => ({\n        ...prevValue,\n        datasets: datasets.map((_set, index) => ({\n          ...prevValue.datasets[index],\n          data: v,\n        })),\n      }));\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <BubbleChart options={options} data={value} />\n    </div>\n  );\n};\nexport default Bubble;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Bubble.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  CgAlignBottom,\n  CgAlignLeft,\n  CgAlignRight,\n  CgAlignTop,\n  CgAlignCenter,\n  CgAlignMiddle,\n  CgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'name',\n    label: 'Name',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly chart summary',\n  },\n  {\n    key: 'legendPosition',\n    label: 'Legend Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: CgAlignTop },\n      { value: 'bottom', icon: CgAlignBottom },\n      { value: 'left', icon: CgAlignLeft },\n      { value: 'right', icon: CgAlignRight },\n      { value: 'center', icon: CgAlignCenter },\n      { value: 'chartArea', icon: CgAlignMiddle },\n      { value: 'hidden', icon: CgShortcut },\n    ],\n  },\n  {\n    key: 'grid',\n    label: 'Display grid',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tooltip',\n    label: 'Display tooltip',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'datasets',\n    name: 'Data',\n    label: 'Data',\n    data: [\n      {\n        key: 'label',\n        label: 'Label',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'source',\n        label: 'Source',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'pointBackgroundColor',\n        label: 'Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'pointBorderColor',\n        label: 'Border Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'pointStyle',\n        label: 'Point Styles',\n        type: ESetting.SELECT,\n        options: [\n          { value: 'circle', label: 'Circle' },\n          { value: 'cross', label: 'Cross' },\n          { value: 'crossRot', label: 'CrossRot' },\n          { value: 'dash', label: 'Dash' },\n          { value: 'line', label: 'Line' },\n          { value: 'rect', label: 'Rect' },\n          { value: 'rectRounded', label: 'RectRounded' },\n          { value: 'rectRot', label: 'RectRot' },\n          { value: 'star', label: 'Star' },\n          { value: 'triangle', label: 'Triangle' },\n          { value: '', label: 'none' },\n        ],\n      },\n    ],\n  },\n  {\n    key: 'xAxis',\n    label: 'Display x-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'yAxis',\n    label: 'Display y-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/colorUtils.tsx", "file_contents": "import { TinyColor, random } from '@ctrl/tinycolor';\nexport const randomColor = (): string => {\n  const color = random();\n  return color.toHexString();\n};\nexport const colorToHex = (baseColor: string): string => {\n  const color = new TinyColor(baseColor);\n  return color.toHexString();\n};\nexport const generateColorPalette = (\n  numberOfColorsPerColor: number,\n  ...baseColors: string[]\n): string[] => {\n  const colorPalette: string[] = [];\n  let colors;\n  if (baseColors.length === 0) {\n    colors = new TinyColor(randomColor()).polyad(numberOfColorsPerColor);\n  } else if (baseColors.length === 1) {\n    colors = new TinyColor(baseColors[0]).polyad(numberOfColorsPerColor);\n  } else {\n    const len =\n      numberOfColorsPerColor > baseColors.length\n        ? Math.round(numberOfColorsPerColor / baseColors.length) > 1\n          ? Math.round(numberOfColorsPerColor / baseColors.length)\n          : 2\n        : 1;\n    colors = baseColors.reduce<any[]>((acc, color) => {\n      const polyad = new TinyColor(color).polyad(len);\n      return [...acc, ...polyad].slice(0, numberOfColorsPerColor);\n    }, []);\n  }\n  colorPalette.push(...colors.map((t) => t.toHexString()));\n  return colorPalette;\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/index.tsx", "file_contents": "import Mixed from './Mixed';\nimport Bubble from './Bubble';\nimport Bar from './Bar';\nimport Radar from './Radar';\nimport Polar from './Polar';\nimport Line from './Line';\nimport Pie from './Pie';\nexport default {\n  Mixed,\n  Bubble,\n  Bar,\n  Radar,\n  Polar,\n  Line,\n  Pie,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Line.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { ILineProps } from './Line.config';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n} from 'chart.js';\nimport { randomColor } from '../shared/colorUtils';\nimport { Line as LineChart } from 'react-chartjs-2';\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n);\nconst Line: FC<ILineProps> = ({\n  name,\n  datasets = [],\n  legendPosition = 'top',\n  grid = true,\n  tooltip = true,\n  xAxis = true,\n  yAxis = true,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const data = useMemo(\n    () => ({\n      datasets: datasets.map((set) => {\n        const color = randomColor();\n        return {\n          fill: set.fill,\n          label: set.label,\n          data: [\n            { x: 'value 1', y: Math.random() * 10 },\n            { x: 'value 2', y: Math.random() * 10 },\n            { x: 'value 3', y: Math.random() * 10 },\n            { x: 'value 4', y: Math.random() * 10 },\n          ],\n          tension: set.tension,\n          borderColor: set.borderColor || set.backgroundColor || color,\n          backgroundColor: set.backgroundColor || set.borderColor || color,\n          pointBackgroundColor: set.pointBackgroundColor || set.backgroundColor || color,\n          pointBorderColor: set.pointBackgroundColor || set.backgroundColor || color,\n          pointStyle: set.pointStyle,\n          pointRadius: set.pointSize,\n          stepped: set.stepped,\n        };\n      }),\n    }),\n    [datasets],\n  );\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, name],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <LineChart options={options} data={data} />\n    </div>\n  );\n};\nexport default Line;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Line.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { PiChartLine } from 'react-icons/pi';\nimport LineSettings, { BasicSettings } from './Line.settings';\nexport default {\n  craft: {\n    displayName: 'Line',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(LineSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Line',\n    exposed: true,\n    icon: PiChartLine,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    name: 'Qodly chart summary',\n    grid: true,\n    tooltip: true,\n    xAxis: true,\n    yAxis: true,\n    legendPosition: 'top',\n    style: {\n      height: '200px',\n      width: '400px',\n    },\n  },\n} as T4DComponentConfig<ILineProps>;\nexport interface ILineProps extends webforms.ComponentProps {\n  name?: string;\n  datasets?: IDataSet[];\n  grid?: boolean;\n  tooltip?: boolean;\n  xAxis?: boolean;\n  yAxis?: boolean;\n  legendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'chartArea';\n}\nexport interface IDataSet {\n  label: string;\n  backgroundColor: string;\n  borderColor: string;\n  pointBackgroundColor: string;\n  pointSize: number;\n  tension: number;\n  fill: boolean;\n  stepped: boolean;\n  source: any;\n  pointStyle?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Line.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo, useState, useEffect } from 'react';\nimport { ILineProps } from './Line.config';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n} from 'chart.js';\nimport { randomColor } from '../shared/colorUtils';\nimport { Line as LineChart } from 'react-chartjs-2';\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n);\nconst Line: FC<ILineProps> = ({\n  name,\n  datasets = [],\n  legendPosition = 'top',\n  style,\n  tooltip,\n  grid,\n  xAxis,\n  yAxis,\n  className,\n  classNames = [],\n}) => {\n  const empty: any[] = [];\n  const { connect } = useRenderer();\n  const [value, setValue] = useState({\n    datasets: datasets.map((set) => {\n      const color = randomColor();\n      return {\n        fill: set.fill,\n        label: set.label,\n        data: empty,\n        parsing: {\n          yAxisKey: set.source,\n        },\n        tension: set.tension,\n        borderColor: set.borderColor || set.backgroundColor || color,\n        backgroundColor: set.backgroundColor || set.borderColor || color,\n        pointBackgroundColor: set.pointBackgroundColor || set.backgroundColor || color,\n        pointBorderColor: set.pointBackgroundColor || set.backgroundColor || color,\n        pointStyle: set.pointStyle,\n        pointRadius: set.pointSize,\n        stepped: set.stepped,\n      };\n    }),\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<Array<any>>();\n      setValue((prevValue) => ({\n        ...prevValue,\n        datasets: datasets.map((_set, index) => ({\n          ...prevValue.datasets[index],\n          data: v,\n        })),\n      }));\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, name],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <LineChart options={options} data={value} />\n    </div>\n  );\n};\nexport default Line;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Line.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  CgAlignBottom,\n  CgAlignLeft,\n  CgAlignRight,\n  CgAlignTop,\n  CgAlignCenter,\n  CgAlignMiddle,\n  CgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'name',\n    label: 'Title',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly chart summary',\n  },\n  {\n    key: 'legendPosition',\n    label: 'Legend Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: CgAlignTop },\n      { value: 'bottom', icon: CgAlignBottom },\n      { value: 'left', icon: CgAlignLeft },\n      { value: 'right', icon: CgAlignRight },\n      { value: 'center', icon: CgAlignCenter },\n      { value: 'chartArea', icon: CgAlignMiddle },\n      { value: 'hidden', icon: CgShortcut },\n    ],\n  },\n  {\n    key: 'grid',\n    label: 'Display grid',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tooltip',\n    label: 'Display tooltip',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'datasets',\n    name: 'Data',\n    label: 'Data',\n    data: [\n      {\n        key: 'label',\n        label: 'Label',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'source',\n        label: 'Source',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'backgroundColor',\n        label: 'Background Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'borderColor',\n        label: 'Border Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'pointBackgroundColor',\n        label: 'Point Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'pointStyle',\n        label: 'Point Styles',\n        type: ESetting.SELECT,\n        options: [\n          { value: 'circle', label: 'Circle' },\n          { value: 'cross', label: 'Cross' },\n          { value: 'crossRot', label: 'CrossRot' },\n          { value: 'dash', label: 'Dash' },\n          { value: 'line', label: 'Line' },\n          { value: 'rect', label: 'Rect' },\n          { value: 'rectRounded', label: 'RectRounded' },\n          { value: 'rectRot', label: 'RectRot' },\n          { value: 'star', label: 'Star' },\n          { value: 'triangle', label: 'Triangle' },\n          { value: '', label: 'none' },\n        ],\n      },\n      {\n        key: 'pointSize',\n        label: 'Point Size',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 5,\n      },\n      {\n        key: 'tension',\n        label: 'Tension',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 0,\n      },\n      {\n        key: 'fill',\n        label: 'Fill',\n        type: ESetting.CHECKBOX,\n      },\n      {\n        key: 'stepped',\n        label: 'Stepped',\n        type: ESetting.CHECKBOX,\n        defaultValue: false,\n      },\n    ],\n  },\n  {\n    key: 'xAxis',\n    label: 'Display x-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'yAxis',\n    label: 'Display y-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Mixed.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport {\n  Chart as ChartJS,\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip,\n  LineController,\n  BarController,\n} from 'chart.js';\nimport { Chart } from 'react-chartjs-2';\nimport { randomColor } from '../shared/colorUtils';\nimport { IMixedProps } from './Mixed.config';\nChartJS.register(\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip,\n  LineController,\n  BarController,\n);\nconst Mixed: FC<IMixedProps> = ({\n  title,\n  legendPosition,\n  grid,\n  tooltip,\n  xAxis,\n  yAxis,\n  stacked,\n  style,\n  dataSets = [],\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const data = useMemo(\n    () => ({\n      datasets: dataSets.map((set, index) => {\n        const color = randomColor();\n        return {\n          type: set.type,\n          label: set.label,\n          data: [\n            { x: 'January', y: Math.random() * 10 },\n            { x: 'February', y: Math.random() * 10 },\n            { x: 'March', y: Math.random() * 10 },\n            { x: 'April', y: Math.random() * 10 },\n            { x: 'May', y: Math.random() * 10 },\n            { x: 'June', y: Math.random() * 10 },\n          ],\n          fill: set.fill || false,\n          borderColor: set.borderColor || color,\n          backgroundColor: set.backgroundColor || set.borderColor || color + '50',\n          borderWidth: set.borderWidth || 1,\n          order: index,\n          tension: set.tension || 0,\n          stepped: set.stepped || false,\n        };\n      }),\n    }),\n    [dataSets],\n  );\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: title !== '',\n          text: title,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          stacked: stacked,\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, title, stacked],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <Chart type=\"bar\" data={data} options={options} />\n    </div>\n  );\n};\nexport default Mixed;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Mixed.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineAreaChart } from 'react-icons/md';\nimport MixedSettings, { BasicSettings } from './Mixed.settings';\nexport default {\n  craft: {\n    displayName: 'Mixed Chart',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(MixedSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Mixed Chart',\n    exposed: true,\n    icon: MdOutlineAreaChart,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    title: 'Qodly chart summary',\n    legendPosition: 'top',\n    grid: true,\n    tooltip: true,\n    xAxis: true,\n    yAxis: true,\n    stacked: false,\n    style: {\n      display: 'block',\n      height: '200px',\n      width: '400px',\n    },\n  },\n} as T4DComponentConfig<IMixedProps>;\nexport interface IMixedProps extends webforms.ComponentProps {\n  title?: string;\n  legendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'chartArea';\n  grid?: boolean;\n  tooltip?: boolean;\n  xAxis?: boolean;\n  yAxis?: boolean;\n  stacked?: boolean;\n  dataSets?: IDataSet[];\n}\nexport interface IDataSet {\n  label?: string;\n  type: 'line' | 'bar' | 'radar' | 'pie' | 'doughnut' | 'polarArea' | 'bubble' | 'scatter';\n  backgroundColor: string;\n  borderColor: string;\n  borderWidth?: number;\n  tension?: number;\n  fill?: boolean;\n  stepped?: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Mixed.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo } from 'react';\nimport {\n  Chart as ChartJS,\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip,\n  LineController,\n  BarController,\n} from 'chart.js';\nimport { Chart } from 'react-chartjs-2';\nimport { randomColor, colorToHex } from '../shared/colorUtils';\nimport { IMixedProps } from './Mixed.config';\nChartJS.register(\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip,\n  LineController,\n  BarController,\n);\nconst Mixed: FC<IMixedProps> = ({\n  title,\n  legendPosition,\n  grid,\n  tooltip,\n  xAxis,\n  yAxis,\n  stacked,\n  style,\n  dataSets = [],\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const empty: any[] = [];\n  const [value, setValue] = useState({\n    datasets: dataSets.map((set, index) => {\n      const color = randomColor();\n      return {\n        type: set.type,\n        label: set.label,\n        data: empty,\n        fill: set.fill || false,\n        borderColor: colorToHex(set.borderColor || color),\n        backgroundColor: colorToHex(set.backgroundColor || set.borderColor || color) + '50',\n        borderWidth: set.borderWidth || 1,\n        order: index,\n        tension: set.tension || 0,\n        stepped: set.stepped || false,\n      };\n    }),\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<Array<any>>();\n      setValue((prevValue) => ({\n        ...prevValue,\n        datasets: dataSets.map((_set, index) => ({\n          ...prevValue.datasets[index],\n          data: v[index]?.data,\n          label: v[index]?.label || _set.label,\n          fill: v[index]?.fill || _set.fill,\n          borderWidth: v[index]?.borderWidth || _set.borderWidth,\n          tension: v[index]?.tension || _set.tension,\n          stepped: v[index]?.stepped || _set.stepped,\n        })),\n      }));\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: title !== '',\n          text: title,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        x: {\n          stacked: stacked,\n          display: xAxis,\n          grid: {\n            display: grid,\n          },\n        },\n        y: {\n          grid: {\n            display: grid,\n          },\n          display: yAxis,\n        },\n      },\n    }),\n    [legendPosition, style, grid, xAxis, yAxis, tooltip, title, stacked],\n  );\n  return (\n    <span ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <Chart type=\"bar\" data={value} options={options} />\n    </span>\n  );\n};\nexport default Mixed;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Mixed.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  CgAlignBottom,\n  CgAlignLeft,\n  CgAlignRight,\n  CgAlignTop,\n  CgAlignCenter,\n  CgAlignMiddle,\n  CgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'title',\n    label: 'Title',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly chart summary',\n  },\n  {\n    key: 'legendPosition',\n    label: 'Legend Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: CgAlignTop },\n      { value: 'bottom', icon: CgAlignBottom },\n      { value: 'left', icon: CgAlignLeft },\n      { value: 'right', icon: CgAlignRight },\n      { value: 'center', icon: CgAlignCenter },\n      { value: 'chartArea', icon: CgAlignMiddle },\n      { value: 'hidden', icon: CgShortcut },\n    ],\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'dataSets',\n    name: 'Charts',\n    label: 'Charts',\n    data: [\n      {\n        key: 'label',\n        label: 'Label',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'type',\n        label: 'Type',\n        type: ESetting.SELECT,\n        defaultValue: 'line',\n        options: [\n          { value: 'line', label: 'Line' },\n          { value: 'bar', label: 'Bar' },\n          { value: 'scatter', label: 'Scatter' },\n          { value: 'bubble', label: 'Bubble' },\n          { value: 'radar', label: 'Radar' },\n          { value: 'polarArea', label: 'Polar Area' },\n        ],\n      },\n      {\n        key: 'backgroundColor',\n        label: 'Background Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'borderColor',\n        label: 'Border Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'borderWidth',\n        label: 'Border Width',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 2,\n      },\n      {\n        key: 'tension',\n        label: 'Tension',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 0.5,\n      },\n      {\n        key: 'fill',\n        label: 'Fill',\n        type: ESetting.CHECKBOX,\n      },\n      {\n        key: 'stepped',\n        label: 'Stepped',\n        type: ESetting.CHECKBOX,\n      },\n    ],\n  },\n  {\n    key: 'grid',\n    label: 'Display grid',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tooltip',\n    label: 'Display tooltip',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'xAxis',\n    label: 'Display x-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'yAxis',\n    label: 'Display y-Axis Value',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'stacked',\n    label: 'Stacked Bar',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Pie.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie as PieChart } from 'react-chartjs-2';\nimport { generateColorPalette, randomColor } from '../shared/colorUtils';\nChartJS.register(ArcElement, Tooltip, Legend);\nimport { IPieProps } from './Pie.config';\nconst Pie: FC<IPieProps> = ({\n  colors = [],\n  legendPosition,\n  title,\n  cutout,\n  tooltip,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const labels = ['Value 1', 'Value 2', 'Value 3', 'Value 4', 'Value 5'];\n  const colorgenerated = useMemo(\n    () => generateColorPalette(labels.length, ...colors.map((e) => e.color || randomColor())),\n    [colors],\n  );\n  const data = useMemo(\n    () => ({\n      datasets: [\n        {\n          data: labels.map(() => 1),\n          backgroundColor: colorgenerated.map((e) => e + '50'),\n          borderColor: colorgenerated,\n        },\n      ],\n      labels: labels,\n    }),\n    [labels, colorgenerated],\n  );\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      cutout: cutout,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: title !== '',\n          text: title,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n    }),\n    [legendPosition, tooltip, style, title, cutout],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <PieChart data={data} options={options} />\n    </div>\n  );\n};\nexport default Pie;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Pie.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlinePieChart } from 'react-icons/md';\nimport PieSettings, { BasicSettings } from './Pie.settings';\nexport default {\n  craft: {\n    displayName: 'Pie',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(PieSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Pie',\n    exposed: true,\n    icon: MdOutlinePieChart,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    title: 'Qodly chart summary',\n    cutout: 0,\n    tooltip: true,\n    legendPosition: 'top',\n    style: {\n      height: '300px',\n      width: '300px',\n    },\n  },\n} as T4DComponentConfig<IPieProps>;\nexport interface IPieProps extends webforms.ComponentProps {\n  title?: string;\n  cutout?: number;\n  colors?: IColors[];\n  legendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'chartArea';\n  tooltip?: boolean;\n}\nexport interface IColors {\n  color?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Pie.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo } from 'react';\nimport { IPieProps } from './Pie.config';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie as PieChart } from 'react-chartjs-2';\nimport { generateColorPalette, colorToHex, randomColor } from '../shared/colorUtils';\nChartJS.register(ArcElement, Tooltip, Legend);\nconst Pie: FC<IPieProps> = ({\n  colors = [],\n  title,\n  legendPosition,\n  tooltip,\n  cutout,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const empty: any[] = [];\n  const { connect } = useRenderer();\n  const [value, setValue] = useState({\n    datasets: [\n      {\n        data: empty,\n        backgroundColor: empty,\n        borderColor: empty,\n      },\n    ],\n    labels: empty,\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<Array<any>>();\n      const colorgenerated = generateColorPalette(\n        v.length,\n        ...colors.map((e) => e.color || randomColor()),\n      );\n      const data = {\n        datasets: [\n          {\n            data: v.map((e) => e.value),\n            backgroundColor: v.map(\n              (e, index) =>\n                (e.color && (e.borderColor ? e.color : colorToHex(e.color) + '50')) ||\n                colorgenerated[index] + '50',\n            ),\n            borderColor: v.map((e, index) => e.borderColor || e.color || colorgenerated[index]),\n          },\n        ],\n        labels: v.map((e) => e.label),\n      };\n      setValue(data);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      cutout: cutout,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: title !== '',\n          text: title,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n    }),\n    [legendPosition, tooltip, style, title, cutout],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <PieChart data={value} options={options} />\n    </div>\n  );\n};\nexport default Pie;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Pie.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  CgAlignBottom,\n  CgAlignLeft,\n  CgAlignRight,\n  CgAlignTop,\n  CgAlignCenter,\n  CgAlignMiddle,\n  CgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'title',\n    label: 'Title',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly chart summary',\n  },\n  {\n    key: 'legendPosition',\n    label: 'Legend Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: CgAlignTop },\n      { value: 'bottom', icon: CgAlignBottom },\n      { value: 'left', icon: CgAlignLeft },\n      { value: 'right', icon: CgAlignRight },\n      { value: 'center', icon: CgAlignCenter },\n      { value: 'chartArea', icon: CgAlignMiddle },\n      { value: 'hidden', icon: CgShortcut },\n    ],\n  },\n  {\n    key: 'cutout',\n    label: 'Cut Out',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 0,\n  },\n  {\n    key: 'tooltip',\n    label: 'Display tooltip',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'colors',\n    name: 'Colors',\n    label: 'Color',\n    data: [\n      {\n        key: 'color',\n        label: 'Color',\n        type: ESetting.COLOR_PICKER,\n        defaultValue: '',\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Polar.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IPolarProps } from './Polar.config';\nimport { Chart as ChartJS, RadialLinearScale, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { PolarArea } from 'react-chartjs-2';\nimport { generateColorPalette, randomColor } from '../shared/colorUtils';\nChartJS.register(RadialLinearScale, ArcElement, Tooltip, Legend);\nconst Polar: FC<IPolarProps> = ({\n  name,\n  legendPosition,\n  tooltip = true,\n  tooltipLabel,\n  grid = true,\n  min,\n  max,\n  step,\n  tick,\n  colors = [],\n  style,\n  centerPointLabels,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const labels = ['Value 1', 'Value 2', 'Value 3', 'Value 4', 'Value 5'];\n  const colorgenerated = useMemo(\n    () => generateColorPalette(labels.length, ...colors.map((e) => e.color || randomColor())),\n    [colors],\n  );\n  const data = useMemo(\n    () => ({\n      labels: labels,\n      datasets: [\n        {\n          label: tooltipLabel,\n          data: [7, 10, 7, 5, 4],\n          backgroundColor: colorgenerated.map((e) => e + '50'),\n          borderColor: colorgenerated,\n        },\n      ],\n    }),\n    [labels, tooltipLabel],\n  );\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            font: {\n              family: style?.fontFamily || 'inherit',\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        r: {\n          display: grid,\n          suggestedMin: min,\n          suggestedMax: max,\n          ticks: {\n            display: tick,\n            stepSize: step,\n          },\n          pointLabels: {\n            display: centerPointLabels,\n            centerPointLabels: centerPointLabels,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n      },\n    }),\n    [legendPosition, style, name, grid, tooltip, min, max, step, tick, centerPointLabels],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <PolarArea data={data} options={options} />\n    </div>\n  );\n};\nexport default Polar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Polar.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { PiChartPolar } from 'react-icons/pi';\nimport PolarSettings, { BasicSettings } from './Polar.settings';\nexport default {\n  craft: {\n    displayName: 'Polar',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(PolarSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Polar',\n    exposed: true,\n    icon: PiChartPolar,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    name: 'Qodly chart summary',\n    legendPosition: 'top',\n    tooltip: true,\n    tick: true,\n    tooltipLabel: 'Value',\n    grid: true,\n    centerPointLabels: false,\n    style: {\n      height: '300px',\n      width: '300px',\n    },\n  },\n} as T4DComponentConfig<IPolarProps>;\nexport interface IPolarProps extends webforms.ComponentProps {\n  name?: string;\n  legendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'chartArea';\n  tooltip?: boolean;\n  tooltipLabel?: string;\n  grid?: boolean;\n  colors?: IColor[];\n  min?: number;\n  max?: number;\n  step?: number;\n  tick?: boolean;\n  centerPointLabels?: boolean;\n}\nexport interface IColor {\n  label: string;\n  color: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Polar.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo } from 'react';\nimport { IPolarProps } from './Polar.config';\nimport { Chart as ChartJS, RadialLinearScale, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { PolarArea } from 'react-chartjs-2';\nimport { generateColorPalette, randomColor, colorToHex } from '../shared/colorUtils';\nChartJS.register(RadialLinearScale, ArcElement, Tooltip, Legend);\nconst Polar: FC<IPolarProps> = ({\n  name,\n  legendPosition,\n  tooltip = true,\n  tooltipLabel,\n  grid = true,\n  min,\n  max,\n  step,\n  tick = true,\n  colors = [],\n  centerPointLabels,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const empty: any[] = [];\n  const [value, setValue] = useState({\n    labels: empty,\n    datasets: [\n      {\n        label: tooltipLabel, \n        data: empty,\n        backgroundColor: empty,\n        borderColor: empty,\n      },\n    ],\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<Array<any>>();\n      const colorgenerated = generateColorPalette(\n        v.length,\n        ...colors.map((e) => e.color || randomColor()),\n      );\n      setValue((prevValue) => ({\n        ...prevValue,\n        labels: v.map((e) => e.label),\n        datasets: prevValue.datasets.map((_set, index) => ({\n          ...prevValue.datasets[index],\n          data: v.map((e) => e.value),\n          backgroundColor: v.map(\n            (e, index) =>\n              (e.color && (e.borderColor ? e.color : colorToHex(e.color) + '50')) ||\n              colorgenerated[index] + '50',\n          ),\n          borderColor: v.map((e, index) => e.borderColor || e.color || colorgenerated[index]),\n        })),\n      }));\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            font: {\n              family: style?.fontFamily || 'inherit',\n            },\n          },\n        },\n        title: {\n          display: name !== '',\n          text: name,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        r: {\n          display: grid,\n          suggestedMin: min,\n          suggestedMax: max,\n          ticks: {\n            display: tick,\n            stepSize: step,\n          },\n          pointLabels: {\n            display: centerPointLabels,\n            centerPointLabels: centerPointLabels,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n      },\n    }),\n    [legendPosition, style, name, grid, tooltip, min, max, tick, step, centerPointLabels],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <PolarArea data={value} options={options} />\n    </div>\n  );\n};\nexport default Polar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Polar.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  CgAlignBottom,\n  CgAlignLeft,\n  CgAlignRight,\n  CgAlignTop,\n  CgAlignCenter,\n  CgAlignMiddle,\n  CgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'name',\n    label: 'Title',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly chart summary',\n  },\n  {\n    key: 'legendPosition',\n    label: 'Legend Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: CgAlignTop },\n      { value: 'bottom', icon: CgAlignBottom },\n      { value: 'left', icon: CgAlignLeft },\n      { value: 'right', icon: CgAlignRight },\n      { value: 'center', icon: CgAlignCenter },\n      { value: 'chartArea', icon: CgAlignMiddle },\n      { value: 'hidden', icon: CgShortcut },\n    ],\n  },\n  {\n    key: 'grid',\n    label: 'Display grid',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tooltip',\n    label: 'Display tooltip',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tick',\n    label: 'Display ticks',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tooltipLabel',\n    label: 'Tooltip Label',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Value',\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'colors',\n    name: 'Colors',\n    label: 'Colors',\n    data: [\n      {\n        key: 'color',\n        label: 'Color',\n        type: ESetting.COLOR_PICKER,\n      },\n    ],\n  },\n  {\n    key: 'min',\n    label: 'Suggested Min',\n    type: ESetting.NUMBER_FIELD,\n  },\n  {\n    key: 'max',\n    label: 'Suggested Max',\n    type: ESetting.NUMBER_FIELD,\n  },\n  {\n    key: 'step',\n    label: 'Suggested Step',\n    type: ESetting.NUMBER_FIELD,\n  },\n  {\n    key: 'centerPointLabels',\n    label: 'Center Point Labels',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Radar.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IRadarProps } from './Radar.config';\nimport { randomColor } from '../shared/colorUtils';\nimport {\n  Chart as ChartJS,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Radar as RadarChart } from 'react-chartjs-2';\nChartJS.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend);\nconst Radar: FC<IRadarProps> = ({\n  title,\n  labels = [],\n  legendPosition,\n  grid,\n  tooltip,\n  tick,\n  min,\n  max,\n  step,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const random = randomColor();\n  const data = useMemo(\n    () => ({\n      labels: labels.map((e) => e.label),\n      datasets: [\n        {\n          fill: true,\n          label: 'Dataset 1',\n          data: labels.map((_e, index) => index + 1 * 2),\n          borderColor: random,\n          pointBackgroundColor: random,\n          pointBorderColor: random,\n          backgroundColor: random + '50',\n          pointStyle: 'rectRounded',\n        },\n      ],\n    }),\n    [labels],\n  );\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: title !== '',\n          text: title,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        r: {\n          ticks: {\n            display: tick,\n            stepSize: step,\n          },\n          grid: {\n            display: grid,\n          },\n          suggestedMin: min,\n          suggestedMax: max,\n        },\n      },\n    }),\n    [legendPosition, style, grid, tooltip, tick, title, min, max, step],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <RadarChart data={data} options={options} />\n    </div>\n  );\n};\nexport default Radar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Radar.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineRadar } from 'react-icons/md';\nimport RadarSettings, { BasicSettings } from './Radar.settings';\nexport default {\n  craft: {\n    displayName: 'Radar',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(RadarSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Radar',\n    exposed: true,\n    icon: MdOutlineRadar,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    label: 'Qodly chart summary',\n    grid: true,\n    tooltip: true,\n    tick: true,\n    legendPosition: 'top',\n    style: {\n      height: '300px',\n      width: '300px',\n    },\n  },\n} as T4DComponentConfig<IRadarProps>;\nexport interface IRadarProps extends webforms.ComponentProps {\n  labels?: IDataSet[];\n  title?: string;\n  tick?: boolean;\n  grid?: boolean;\n  min?: number;\n  max?: number;\n  step?: number;\n  tooltip?: boolean;\n  legendPosition?: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'chartArea';\n}\nexport interface IDataSet {\n  label: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Radar.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo } from 'react';\nimport { IRadarProps } from './Radar.config';\nimport { generateColorPalette, randomColor } from '../shared/colorUtils';\nimport {\n  Chart as ChartJS,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Radar as RadarChart } from 'react-chartjs-2';\nChartJS.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend);\nconst Radar: FC<IRadarProps> = ({\n  title,\n  labels = [],\n  legendPosition,\n  grid,\n  tooltip,\n  tick,\n  min,\n  max,\n  step,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const empty: any[] = [];\n  const { connect } = useRenderer();\n  const [value, setValue] = useState({\n    labels: labels.map((e) => e.label),\n    datasets: empty,\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<Array<any>>();\n      const colorgenerated = generateColorPalette(\n        v.length,\n        ...v.map((e) => e.backgroundColor || e.borderColor || randomColor()),\n      );\n      setValue((prevValue) => ({\n        ...prevValue,\n        datasets: v.map((set, index) => ({\n          label: set.label,\n          data: set.data,\n          backgroundColor: set.backgroundColor || colorgenerated[index] + '50', \n          borderColor: set.borderColor || set.backgroundColor || colorgenerated[index],\n          pointBackgroundColor: set.borderColor || set.backgroundColor || colorgenerated[index],\n          pointBorderColor:\n            set.pointBorderColor || set.borderColor || set.backgroundColor || colorgenerated[index],\n          pointStyle: set.pointStyle || 'circle',\n          fill: set.fill || false,\n          pointRadius: set.pointSize || 5,\n        })),\n      }));\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      plugins: {\n        legend: {\n          display: (legendPosition as string) !== 'hidden',\n          position: legendPosition,\n          labels: {\n            color: style?.color,\n            font: {\n              size: (style?.fontSize as number) || 14,\n              family: style?.fontFamily || 'inherit',\n              weight: style?.fontWeight as number,\n            },\n          },\n        },\n        title: {\n          display: title !== '',\n          text: title,\n          color: style?.color,\n          font: {\n            size: (style?.fontSize as number) || 14,\n            family: style?.fontFamily || 'inherit',\n            weight: style?.fontWeight as number,\n          },\n        },\n        tooltip: {\n          enabled: tooltip,\n        },\n      },\n      scales: {\n        r: {\n          ticks: {\n            display: tick,\n            stepSize: step,\n          },\n          grid: {\n            display: grid,\n          },\n          suggestedMin: min,\n          suggestedMax: max,\n        },\n      },\n    }),\n    [legendPosition, style, grid, tooltip, tick, title, min, max, step],\n  );\n  return (\n    <div ref={connect} style={style} className={cn('chart', className, classNames)}>\n      <RadarChart data={value} options={options} />\n    </div>\n  );\n};\nexport default Radar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_chart/Radar.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  CgAlignBottom,\n  CgAlignLeft,\n  CgAlignRight,\n  CgAlignTop,\n  CgAlignCenter,\n  CgAlignMiddle,\n  CgShortcut,\n} from 'react-icons/cg';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'title',\n    label: 'Title',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly chart summary',\n  },\n  {\n    key: 'legendPosition',\n    label: 'Legend Position',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: CgAlignTop },\n      { value: 'bottom', icon: CgAlignBottom },\n      { value: 'left', icon: CgAlignLeft },\n      { value: 'right', icon: CgAlignRight },\n      { value: 'center', icon: CgAlignCenter },\n      { value: 'chartArea', icon: CgAlignMiddle },\n      { value: 'hidden', icon: CgShortcut },\n    ],\n  },\n  {\n    key: 'grid',\n    label: 'Display Grid',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tick',\n    label: 'Display Ticks',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    key: 'tooltip',\n    label: 'Display Tooltip',\n    type: ESetting.CHECKBOX,\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'labels',\n    name: 'Labels',\n    label: 'Labels',\n    data: [\n      {\n        key: 'label',\n        label: 'Label',\n        type: ESetting.TEXT_FIELD,\n      },\n    ],\n  },\n  {\n    key: 'min',\n    label: 'Suggested Min',\n    type: ESetting.NUMBER_FIELD,\n  },\n  {\n    key: 'max',\n    label: 'Suggested Max',\n    type: ESetting.NUMBER_FIELD,\n  },\n  {\n    key: 'step',\n    label: 'Suggested Step',\n    type: ESetting.NUMBER_FIELD,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'display',\n    'style.boxShadow',\n    'style.textShadow',\n    'style.textAlign',\n    'style.textDecorationLine',\n    'style.fontStyle',\n    'style.textTransform',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_color_input/ColorInput.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { IColorInputProps } from './ColorInput.config';\nimport { HexAlphaColorPicker } from 'react-colorful';\nconst ColorInput: FC<IColorInputProps> = ({ defaultColor, style, className, classNames = [] }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  return (\n    <div ref={connect} className={cn('w-fit h-fit', className, classNames)}>\n      <HexAlphaColorPicker color={defaultColor} style={style} />\n    </div>\n  );\n};\nexport default ColorInput;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_color_input/ColorInput.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdColorLens } from 'react-icons/md';\nimport ColorInputSettings, { BasicSettings } from './ColorInput.settings';\nexport default {\n  craft: {\n    displayName: 'Color Input',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(ColorInputSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Color Input',\n    exposed: true,\n    icon: MdColorLens,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    defaultColor: '#fff',\n  },\n} as T4DComponentConfig<IColorInputProps>;\nexport interface IColorInputProps extends webforms.ComponentProps {\n  defaultColor: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_color_input/ColorInput.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { HexAlphaColorPicker } from 'react-colorful';\nimport { IColorInputProps } from './ColorInput.config';\nconst ColorInput: FC<IColorInputProps> = ({ defaultColor, style, className, classNames = [] }) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState(() => defaultColor);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      setValue(v || defaultColor);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const changeColor = (color: string) => {\n    ds ? ds.setValue<string>(null, color) : setValue(color);\n  };\n  return (\n    <div ref={connect} className={cn('w-fit h-fit', className, classNames)}>\n      <HexAlphaColorPicker color={value} style={style} onChange={changeColor} />\n    </div>\n  );\n};\nexport default ColorInput;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_color_input/ColorInput.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'defaultColor',\n    label: 'Default Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#000000',\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_color_input/index.tsx", "file_contents": "import ColorInput from './ColorInput';\nexport default {\n  ColorInput,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_filemanager/FileManager.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState } from 'react';\nimport { IFileManagerProps } from './FileManager.config';\nimport { TbFile, TbFolder } from 'react-icons/tb';\nconst FileManager: FC<IFileManagerProps> = ({ style, className, classNames = [] }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const [currentFolder, setCurrentFolder] = useState<{\n    name: string;\n    type: string;\n    children?: { name: string; type: string }[];\n  } | null>(null);\n  const mockItems = [\n    {\n      name: 'Documents',\n      type: 'folder',\n      children: [\n        { name: 'File1.txt', type: 'file' },\n        { name: 'File2.txt', type: 'file' },\n      ],\n    },\n    {\n      name: 'Images',\n      type: 'folder',\n      children: [\n        { name: 'Image1.png', type: 'file' },\n        { name: 'Image2.jpg', type: 'file' },\n      ],\n    },\n  ];\n  const handleItemClick = (item: { name: string; type: string }) => {\n    if (item.type === 'folder') {\n      setCurrentFolder(item);\n    }\n  };\n  return (\n    <div ref={connect} style={style} className={cn('file-manager', className, ...classNames)}>\n      <div className=\"w-1/4 border-r border-gray-200 bg-gray-50 p-2\">\n        <h3 className=\"font-semibold text-gray-600\">Navigation</h3>\n        <div className=\"mt-2\">\n          {mockItems.map((item, index) => (\n            <div\n              key={index}\n              className=\"flex items-center cursor-pointer hover:bg-gray-100 p-1\"\n              onClick={() => handleItemClick(item)}\n            >\n              {item.type === 'folder' ? (\n                <TbFolder className=\"size-6 mr-1 text-yellow-500\" />\n              ) : (\n                <TbFile className=\"size-6 mr-1 text-gray-500\" />\n              )}\n              <span className=\"text-sm\">{item.name}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"w-3/4 p-2\">\n        <h3 className=\"font-semibold text-gray-600\">Content</h3>\n        <div className=\"mt-2\">\n          {currentFolder && currentFolder.children ? (\n            currentFolder.children.map((child, index) => (\n              <div\n                key={index}\n                className=\"flex items-center p-2 hover:bg-gray-100 rounded cursor-pointer\"\n              >\n                {child.type === 'folder' ? (\n                  <TbFolder className=\"size-6 mr-2 text-yellow-500\" />\n                ) : (\n                  <TbFile className=\"size-6 mr-2 text-gray-500\" />\n                )}\n                <span>{child.name}</span>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-gray-500\">Select a folder to view its contents...</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default FileManager;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_filemanager/FileManager.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineFolder } from 'react-icons/md';\nimport FileManagertSettings, { BasicSettings } from './FileManager.settings';\nexport interface IFileItem {\n  name: string;\n  type: 'file' | 'folder';\n  lastModified?: string;\n  size?: number;\n  children?: IFileItem[];\n}\nexport interface IFileManagerProps extends webforms.ComponentProps {\n  items: IFileItem[];\n}\nexport default {\n  craft: {\n    displayName: 'File manager',\n    sanityCheck: {\n      keys: [{ name: 'datasource', require: true, isDatasource: true }],\n    },\n    requiredFields: {\n      keys: ['datasource'],\n      all: false,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      items: [],\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(FileManagertSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'File Manager',\n    exposed: true,\n    icon: MdOutlineFolder,\n    events: [\n      {\n        label: 'On File Click',\n        value: 'onfileclick',\n      },\n      {\n        label: 'On File Right Click',\n        value: 'onfilerightclick',\n      },\n      {\n        label: 'On Folder Click',\n        value: 'onfolderclick',\n      },\n    ],\n    datasources: {\n      accept: ['array'],\n    },\n  },\n  defaultProps: {\n    items: [],\n    style: {\n      display: 'flex',\n      height: '100%',\n      backgroundColor: 'white',\n      borderRadius: '0.25rem',\n      borderWidth: '1px',\n      borderColor: '#e5e7eb',\n      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n    },\n  },\n} as T4DComponentConfig<IFileManagerProps>;\nexport interface IFileManagerProps extends webforms.ComponentProps {\n  name?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_filemanager/FileManager.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState, useEffect } from 'react';\nimport { IFileManagerProps, IFileItem } from './FileManager.config';\nimport {\n  TbCircleDashedX,\n  TbInfoCircle,\n  TbFile,\n  TbFolder,\n  TbChevronDown,\n  TbChevronRight,\n  TbArrowNarrowLeft,\n} from 'react-icons/tb';\nimport { TEmit } from '@ws-ui/webform-editor/dist/hooks/use-emit';\nconst FileManagerItem: FC<{\n  item: IFileItem;\n  level: number;\n  onFileClick: (item: IFileItem) => void;\n  onFolderClick: (item: IFileItem) => void;\n  emit: TEmit;\n}> = ({ item, level, emit, onFileClick, onFolderClick }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleArrowClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpen(!isOpen);\n  };\n  const handleItemClick = () => {\n    if (item.type === 'folder') {\n      onFolderClick(item);\n    } else {\n      onFileClick(item);\n    }\n  };\n  return (\n    <div className={cn('file-item select-none', { 'ml-4': level > 0 })}>\n      <div\n        className=\"file-item-row flex items-center cursor-pointer hover:bg-gray-200 p-2 rounded\"\n        onClick={handleItemClick}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          if (item.type === 'file') emit('onfilerightclick', item);\n        }}\n      >\n        {item.type === 'folder' && (\n          <span onClick={handleArrowClick}>\n            {isOpen ? (\n              <TbChevronDown className=\"size-6 mr-2 text-gray-500\" />\n            ) : (\n              <TbChevronRight className=\"size-6 mr-2 text-gray-500\" />\n            )}\n          </span>\n        )}\n        {item.type === 'folder' ? (\n          <TbFolder className=\"size-6 mr-2 text-yellow-500\" />\n        ) : (\n          <TbFile className=\"size-6 mr-2 text-gray-500\" />\n        )}\n        <span className=\"text-sm font-medium text-gray-700\">{item.name}</span>\n      </div>\n      {isOpen && item.children && (\n        <div className=\"file-item-children ml-4\">\n          {item.children.map((child, index) => (\n            <FileManagerItem\n              key={index}\n              item={child}\n              level={level + 1}\n              onFileClick={onFileClick}\n              onFolderClick={onFolderClick}\n              emit={emit}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\nconst FileManager: FC<IFileManagerProps> = ({ style, className, classNames = [] }) => {\n  const { connect, emit } = useRenderer();\n  const [items, setItems] = useState<IFileItem[]>([]);\n  const [currentItem, setCurrentItem] = useState<IFileItem | null>(null);\n  const [path, setPath] = useState<IFileItem[]>([]);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const handleFileClick = (item: IFileItem) => {\n    setCurrentItem(item);\n    emit('onfileclick', item);\n  };\n  const handleFolderClick = (item: IFileItem) => {\n    setCurrentItem(item);\n    setPath((prevPath) => [...prevPath, item]);\n    emit('onfolderclick', item);\n  };\n  const handleBackClick = () => {\n    setPath((prevPath) => {\n      const newPath = [...prevPath];\n      newPath.pop();\n      const parentFolder = newPath[newPath.length - 1] || null;\n      setCurrentItem(parentFolder);\n      return newPath;\n    });\n  };\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const value = await ds.getValue();\n      if (Array.isArray(value)) {\n        setItems(value);\n      }\n    };\n    ds.addListener('changed', listener);\n    listener();\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const renderNavigationPane = () => (\n    <div className=\"navigation-pane w-1/4 border-r border-gray-300 bg-gray-50 p-4\">\n      <h3 className=\"font-semibold text-gray-600 text-lg mb-4\">Navigation</h3>\n      <div className=\"mt-2 space-y-2\">\n        {items.map((item, index) => (\n          <FileManagerItem\n            key={index}\n            item={item}\n            level={0}\n            onFileClick={handleFileClick}\n            onFolderClick={handleFolderClick}\n            emit={emit}\n          />\n        ))}\n      </div>\n    </div>\n  );\n  const renderContentView = () => (\n    <div className=\"content-pane w-3/4 p-4\">\n      <h3 className=\"font-semibold text-gray-600 text-lg mb-4\">Content</h3>\n      <div className=\"mb-4\">\n        {path.length > 0 && (\n          <button className=\"text-blue-500 hover:text-blue-700 underline\" onClick={handleBackClick}>\n            <TbArrowNarrowLeft className=\"size-6\" />\n          </button>\n        )}\n      </div>\n      {currentItem ? (\n        <div className=\"mt-2 space-y-2\">\n          {currentItem.type === 'folder' ? (\n            currentItem.children && currentItem.children.length > 0 ? (\n              currentItem.children.map((child, index) => (\n                <div\n                  key={index}\n                  className=\"file-item-row flex items-center p-2 hover:bg-gray-200 rounded cursor-pointer\"\n                  onClick={() => {\n                    child.type === 'folder' ? handleFolderClick(child) : handleFileClick(child);\n                  }}\n                  onContextMenu={(e) => {\n                    e.preventDefault();\n                    if (child.type === 'file') emit('onfilerightclick', child);\n                  }}\n                >\n                  {child.type === 'folder' ? (\n                    <TbFolder className=\"size-6 mr-2 text-yellow-500\" />\n                  ) : (\n                    <TbFile className=\"size-6 mr-2 text-gray-500\" />\n                  )}\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-gray-700\">{child.name}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      {child.lastModified && <span>Last Modified: {child.lastModified} | </span>}\n                      {child.size && <span>Size: {child.size} KB</span>}\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"empty-state flex items-center justify-center text-gray-500\">\n                <TbCircleDashedX className=\"size-6 mr-2\" /> No files to display...\n              </div>\n            )\n          ) : (\n            <div className=\"file-details p-4 border rounded bg-white shadow\">\n              <h4 className=\"font-semibold text-gray-700 text-xl\">{currentItem.name}</h4>\n              <div className=\"text-sm text-gray-500 mt-2\">\n                {currentItem.lastModified && <p>Last Modified: {currentItem.lastModified}</p>}\n                {currentItem.size && <p>Size: {currentItem.size} KB</p>}\n              </div>\n              <div className=\"mt-4\">{}</div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"empty-state flex items-center justify-center text-gray-500\">\n          <TbInfoCircle className=\"size-6 mr-2\" /> Select a folder or file to view contents...\n        </div>\n      )}\n    </div>\n  );\n  return (\n    <div ref={connect} style={style} className={cn('file-manage shadow', className, ...classNames)}>\n      {renderNavigationPane()}\n      {renderContentView()}\n    </div>\n  );\n};\nexport default FileManager;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_filemanager/FileManager.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'name',\n    label: 'Name',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'Qodly',\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('display'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow', 'display'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_filemanager/index.tsx", "file_contents": "import FileManager from './FileManager';\nexport default {\n  FileManager,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_popover/index.tsx", "file_contents": "import Popover from './Popover';\nexport default {\n  Popover,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_popover/Popover.build.tsx", "file_contents": "import {\n  useEnhancedNode,\n  useEnhancedEditor,\n  selectResolver,\n  useWebformPath,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { IPopoverProps } from './Popover.config';\nimport PopOver from './Popover';\nimport kebabCase from 'lodash/kebabCase';\nconst Popover: FC<IPopoverProps> = ({ position, isShown, style, className, classNames = [] }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const path = useWebformPath();\n  const dialogRoot = document.querySelector(`#__wf-${kebabCase(path)} .craftjs-renderer`);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <PopOver\n        position={position}\n        isShown={isShown}\n        handleToggle={() => true}\n        dialogRoot={dialogRoot}\n        trigger={\n          <Element id=\"PopoverTrigger\" is={resolver.StyleBox} canvas>\n            <Element\n              is={resolver.Text}\n              doc={[\n                {\n                  type: 'paragraph',\n                  children: [{ text: 'Pop Over Trigger (you can delete this!).' }],\n                },\n              ]}\n            />\n          </Element>\n        }\n      >\n        <Element\n          id=\"PopoverContent\"\n          is={resolver.StyleBox}\n          canvas\n          style={{\n            boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px',\n            backgroundColor: 'white',\n          }}\n        >\n          <Element\n            is={resolver.Text}\n            doc={[\n              {\n                type: 'paragraph',\n                children: [{ text: 'Pop Over Content (you can delete this!).' }],\n              },\n            ]}\n          />\n        </Element>\n      </PopOver>\n    </div>\n  );\n};\nexport default Popover;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_popover/Popover.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdArrowDropDown } from 'react-icons/md';\nimport PopoverSettings, { BasicSettings } from './Popover.settings';\ntype Position =\n  | 'bottom-center'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'top-center'\n  | 'top-left'\n  | 'top-right'\n  | 'left-center'\n  | 'right-center';\nexport default {\n  craft: {\n    displayName: 'Popover',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(PopoverSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Popover',\n    exposed: true,\n    icon: MdArrowDropDown,\n    events: [],\n    datasources: {},\n  },\n  defaultProps: {\n    position: 'bottom-center',\n    isShown: false,\n    action: 'click',\n    style: {\n      minWidth: '48px',\n      width: 'fit-content',\n    },\n  },\n} as T4DComponentConfig<IPopoverProps>;\nexport interface IPopoverProps extends webforms.ComponentProps {\n  position: Position;\n  isShown: boolean;\n  action: 'click' | 'hover';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_popover/Popover.render.tsx", "file_contents": "import { selectResolver, useEnhancedEditor, useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState } from 'react';\nimport { IPopoverProps } from './Popover.config';\nimport PopOver from './Popover';\nimport { Element } from '@ws-ui/craftjs-core';\nconst Popover: FC<IPopoverProps> = ({ action, position, style, className, classNames = [] }) => {\n  const { connect } = useRenderer();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const dialogRoot = document.getElementById('dialogs-root');\n  const [isShown, setIsShown] = useState(false);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <PopOver\n        position={position}\n        trigger={<Element id=\"PopoverTrigger\" is={resolver.StyleBox} canvas />}\n        isShown={isShown}\n        action={action}\n        handleToggle={setIsShown}\n        dialogRoot={dialogRoot}\n      >\n        <Element id=\"PopoverContent\" is={resolver.StyleBox} canvas />\n      </PopOver>\n    </div>\n  );\n};\nexport default Popover;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_popover/Popover.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'position',\n    label: 'Position',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'bottom-center', label: 'Bottom Center' },\n      { value: 'bottom-left', label: 'Bottom Left' },\n      { value: 'bottom-right', label: 'Bottom Right' },\n      { value: 'top-center', label: 'Top Center' },\n      { value: 'top-left', label: 'Top Left' },\n      { value: 'top-right', label: 'Top Right' },\n      { value: 'left-center', label: 'Left Center' },\n      { value: 'right-center', label: 'Right Center' },\n    ],\n    defaultValue: 'bottom-center',\n  },\n  {\n    key: 'action',\n    label: 'Action',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'click', label: 'Click' },\n      { value: 'hover', label: 'Hover' },\n    ],\n    defaultValue: 'click',\n  },\n  {\n    key: 'isShown',\n    label: 'Is Shown in Build Mode',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('datasource'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_popover/Popover.tsx", "file_contents": "import { FC, useState, ReactNode, useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\ninterface PopoverProps {\n  children: ReactNode;\n  trigger: ReactNode;\n  position?: Position;\n  isShown?: boolean;\n  handleToggle?: (arg0: boolean) => void;\n  dialogRoot?: Element | null;\n  action?: 'click' | 'hover';\n}\ntype Position =\n  | 'bottom-center'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'top-center'\n  | 'top-left'\n  | 'top-right'\n  | 'left-center'\n  | 'right-center';\nconst Popover: FC<PopoverProps> = ({\n  children,\n  trigger,\n  position = 'bottom-center',\n  isShown = false,\n  handleToggle = () => {},\n  dialogRoot,\n  action = 'click',\n}) => {\n  const [coords, setCoords] = useState({\n    left: 0,\n    top: 0,\n  });\n  const [display, setDisplay] = useState<string>('hidden');\n  const triggerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  let qodlyCanva: any = document.getElementsByClassName('fd-canvas')[0];\n  const updatePopoverPosition = () => {\n    if (isShown && triggerRef.current && contentRef.current) {\n      const triggerRect = triggerRef.current.getBoundingClientRect();\n      const popoverRect = contentRef.current.getBoundingClientRect();\n      let calculatedCoords = getPopoverCoords(triggerRect, popoverRect, position);\n      calculatedCoords = adjustPopoverPosition(calculatedCoords, popoverRect);\n      setCoords(calculatedCoords);\n    }\n    if (triggerRef.current) {\n      const triggerRect = triggerRef.current.getBoundingClientRect();\n      if (triggerRect.top < 0 || triggerRect.bottom > window.innerHeight) {\n        setDisplay('hidden'); \n      } else {\n        setDisplay('block'); \n      }\n    }\n  };\n  useEffect(() => {\n    const observer = new MutationObserver((mutationRecords) => {\n      mutationRecords.forEach((mutation) => {\n        if (mutation.attributeName === 'style' || mutation.attributeName === 'class') {\n          updatePopoverPosition(); \n        }\n      });\n    });\n    if (qodlyCanva) {\n      observer.observe(qodlyCanva, {\n        attributes: true,\n        attributeFilter: ['style', 'class'],\n        childList: true,\n      });\n    }\n    return () => {\n      if (qodlyCanva) {\n        observer.disconnect();\n      }\n    };\n  }, [qodlyCanva]);\n  useEffect(() => {\n    if (isShown) {\n      updatePopoverPosition();\n      window.addEventListener('scroll', updatePopoverPosition, true);\n      window.addEventListener('resize', updatePopoverPosition);\n    }\n    return () => {\n      window.removeEventListener('scroll', updatePopoverPosition);\n      window.removeEventListener('resize', updatePopoverPosition);\n    };\n  }, [isShown, position, dialogRoot, triggerRef.current, contentRef.current]);\n  useEffect(() => {\n    if (action !== 'click') return;\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        contentRef.current &&\n        !contentRef.current.contains(event.target as Node) &&\n        triggerRef.current &&\n        !triggerRef.current.contains(event.target as Node)\n      ) {\n        handleToggle(false);\n      }\n    };\n    if (isShown) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [action, isShown, handleToggle]);\n  return (\n    <div className=\"popover\">\n      <div\n        className=\"trigger\"\n        ref={triggerRef}\n        onClick={() => action === 'click' && handleToggle(!isShown)}\n        onMouseEnter={() => action === 'hover' && handleToggle(true)}\n      >\n        {trigger}\n      </div>\n      {dialogRoot &&\n        isShown &&\n        createPortal(\n          <div\n            onMouseLeave={() => action === 'hover' && handleToggle(false)}\n            ref={contentRef}\n            className={`popover-content fixed ${display} ${position} z-10`}\n            style={{ ...coords, minWidth: '48px' }}\n          >\n            {children}\n          </div>,\n          dialogRoot,\n        )}\n    </div>\n  );\n};\nexport default Popover;\nconst getPopoverCoords = (triggerRect: DOMRect, popoverRect: DOMRect, position: Position) => {\n  const coords = { top: 0, left: 0 };\n  switch (position) {\n    case 'bottom-center':\n      coords.top = triggerRect.bottom;\n      coords.left = triggerRect.left + (triggerRect.width - popoverRect.width) / 2;\n      break;\n    case 'bottom-left':\n      coords.top = triggerRect.bottom;\n      coords.left = triggerRect.left;\n      break;\n    case 'bottom-right':\n      coords.top = triggerRect.bottom;\n      coords.left = triggerRect.right - popoverRect.width;\n      break;\n    case 'top-center':\n      coords.top = triggerRect.top - popoverRect.height;\n      coords.left = triggerRect.left + (triggerRect.width - popoverRect.width) / 2;\n      break;\n    case 'top-left':\n      coords.top = triggerRect.top - popoverRect.height;\n      coords.left = triggerRect.left;\n      break;\n    case 'top-right':\n      coords.top = triggerRect.top - popoverRect.height;\n      coords.left = triggerRect.right - popoverRect.width;\n      break;\n    case 'left-center':\n      coords.top = triggerRect.top + (triggerRect.height - popoverRect.height) / 2;\n      coords.left = triggerRect.left - popoverRect.width;\n      break;\n    case 'right-center':\n      coords.top = triggerRect.top + (triggerRect.height - popoverRect.height) / 2;\n      coords.left = triggerRect.right;\n      break;\n    default:\n      break;\n  }\n  return coords;\n};\nconst adjustPopoverPosition = (coords: { top: number; left: number }, popoverRect: DOMRect) => {\n  const adjustedCoords = { ...coords };\n  if (coords.left < 0) {\n    adjustedCoords.left = 0;\n  }\n  if (coords.left + popoverRect.width > window.innerWidth) {\n    adjustedCoords.left = window.innerWidth - popoverRect.width;\n  }\n  if (coords.top < 0) {\n    adjustedCoords.top = 0;\n  }\n  if (coords.top + popoverRect.height > window.innerHeight) {\n    adjustedCoords.top = window.innerHeight - popoverRect.height;\n  }\n  return adjustedCoords;\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_signature/index.tsx", "file_contents": "import Signature from './Signature';\nexport default {\n  Signature,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_signature/Signature.build.tsx", "file_contents": "import { FC, useRef } from 'react';\nimport SignaturePad from 'signature_pad';\nimport cn from 'classnames';\nimport { useEnhancedNode } from '@ws-ui/webform-editor';\nimport { ISignatureProps } from './Signature.config';\nimport { MdClose } from 'react-icons/md';\nconst Signature: FC<ISignatureProps> = ({\n  backgroundColor,\n  clear,\n  sizeButton,\n  style,\n  positionButton,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const signaturePadRef = useRef<SignaturePad | null>(null);\n  return (\n    <div ref={connect} style={style} className={cn('relative', className, classNames)}>\n      <canvas\n        width={style?.width}\n        height={style?.height}\n        style={{ backgroundColor: backgroundColor }}\n      />\n      {clear && (\n        <MdClose\n          size={sizeButton}\n          className={`hover:cursor-pointer absolute top-1 ${positionButton === 'left' ? 'left-1' : 'right-1'} rounded-full bg-gray-100 p-1 text-gray-600 hover:bg-gray-300`}\n          onClick={() => signaturePadRef.current?.clear()}\n        />\n      )}\n    </div>\n  );\n};\nexport default Signature;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_signature/Signature.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaSignature } from 'react-icons/fa';\nimport SignatureSettings, { BasicSettings } from './Signature.settings';\nexport default {\n  craft: {\n    displayName: 'Signature',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(SignatureSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Signature',\n    exposed: true,\n    icon: FaSignature,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['image'],\n    },\n  },\n  defaultProps: {\n    clear: true,\n    penColor: 'Black',\n    backgroundColor: 'White',\n    sizeButton: 36,\n    positionButton: 'left',\n    style: {\n      border: '1px solid black',\n      width: '300px',\n      height: '200px',\n    },\n  },\n} as T4DComponentConfig<ISignatureProps>;\nexport interface ISignatureProps extends webforms.ComponentProps {\n  penColor: string;\n  backgroundColor: string;\n  clear: boolean;\n  sizeButton: number;\n  positionButton?: 'left' | 'right';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_signature/Signature.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useRef, useCallback } from 'react';\nimport SignaturePad from 'signature_pad';\nimport { MdClose } from 'react-icons/md';\nimport { ISignatureProps } from './Signature.config';\nconst Signature: FC<ISignatureProps> = ({\n  penColor,\n  backgroundColor,\n  clear,\n  sizeButton,\n  positionButton,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect, emit } = useRenderer();\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const isMountedRef = useRef<boolean>(true); \n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const signaturePadRef = useRef<SignaturePad | null>(null);\n  const resizeCanvas = () => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ratio = Math.max(window.devicePixelRatio || 1, 1);\n      const context = canvas.getContext('2d');\n      if (context) {\n        canvas.width = canvas.offsetWidth * ratio;\n        canvas.height = canvas.offsetHeight * ratio;\n        context.scale(ratio, ratio);\n        signaturePadRef.current?.clear(); \n      }\n    }\n  };\n  useEffect(() => {\n    isMountedRef.current = true; \n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const signaturePad = new SignaturePad(canvas, {\n        backgroundColor,\n        penColor,\n      });\n      signaturePadRef.current = signaturePad;\n      window.addEventListener('resize', resizeCanvas);\n      resizeCanvas();\n      return () => {\n        isMountedRef.current = false; \n        if (signaturePadRef.current && isMountedRef.current) {\n          signaturePadRef.current.off(); \n          signaturePadRef.current.clear(); \n          window.removeEventListener('resize', resizeCanvas);\n        }\n      };\n    }\n  }, []);\n  const MouseLeave = useCallback(async () => {\n    if (!signaturePadRef.current?.isEmpty()) {\n      try {\n        if (ds) {\n          await ds.setValue<any>(null, signaturePadRef.current?.toDataURL('image/jpeg'));\n        }\n      } catch (error) {\n        console.error(error);\n      }\n      emit!('onchange');\n    }\n  }, []);\n  return (\n    <div ref={connect} style={style} className={cn('relative', className, classNames)}>\n      <canvas\n        ref={canvasRef}\n        style={style}\n        width={style?.width}\n        height={style?.height}\n        onMouseLeave={MouseLeave}\n        onTouchEnd={MouseLeave}\n      />\n      {clear && (\n        <MdClose\n          size={sizeButton}\n          className={`hover:cursor-pointer absolute top-1 ${positionButton === 'left' ? 'left-1' : 'right-1'} rounded-full bg-gray-100 p-1 text-gray-600 hover:bg-gray-300`}\n          onClick={() => signaturePadRef.current?.clear()}\n        />\n      )}\n    </div>\n  );\n};\nexport default Signature;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_signature/Signature.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'penColor',\n    label: 'Pen Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: 'black',\n  },\n  {\n    key: 'backgroundColor',\n    label: 'Background Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: 'white',\n  },\n  {\n    key: 'clear',\n    label: 'Clear Button',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'sizeButton',\n    label: 'Size Button',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 0,\n  },\n  {\n    key: 'positionButton',\n    label: 'Position Button',\n    type: ESetting.SELECT,\n    defaultValue: 'left',\n    options: [\n      {\n        label: 'Left',\n        value: 'left',\n      },\n      {\n        label: 'Right',\n        value: 'right',\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'appearance',\n    'font',\n    'background',\n    'style.color',\n    'style.backgroundColor',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.color',\n    'style.backgroundColor',\n    'display',\n    'style.fontFamily',\n    'style.fontWeight',\n    'style.fontSize',\n    'style.fontWeight',\n    'style.textAlign',\n    'style.textTransform',\n  ),\n];\nconsole.log('BASIC_SETTINGS', BASIC_SETTINGS);\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/BlockButton.tsx", "file_contents": "import { IconType } from 'react-icons';\nimport { Button } from './';\nimport { useSlate } from 'slate-react';\nimport { Editor, Transforms, Element as SlateElement } from 'slate';\nimport { FC } from 'react';\ninterface BlockButton {\n  icon: IconType;\n  format: string;\n  readonly?: boolean;\n}\nconst TEXT_ALIGN_TYPES = ['left', 'center', 'right', 'justify'];\nconst LIST_TYPES = ['numbered-list', 'bulleted-list'];\nconst BlockButton: FC<BlockButton> = ({ icon: Icon, format, readonly }) => {\n  const editor = useSlate();\n  const isBlockActive = (editor: Editor, format: string, blockType = 'type') => {\n    const { selection } = editor;\n    if (!selection) return false;\n    const [match] = Array.from(\n      Editor.nodes(editor, {\n        at: Editor.unhangRange(editor, selection),\n        match: (n) => !Editor.isEditor(n) && SlateElement.isElement(n) && n[blockType] === format,\n      }),\n    );\n    return !!match;\n  };\n  const toggleBlock = (editor: Editor, format: string) => {\n    const isActive = isBlockActive(\n      editor,\n      format,\n      TEXT_ALIGN_TYPES.includes(format) ? 'align' : 'type',\n    );\n    const isList = LIST_TYPES.includes(format);\n    Transforms.unwrapNodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) &&\n        SlateElement.isElement(n) &&\n        LIST_TYPES.includes(n.type) &&\n        !TEXT_ALIGN_TYPES.includes(format),\n      split: true,\n    });\n    let newProperties: Partial<SlateElement>;\n    if (TEXT_ALIGN_TYPES.includes(format)) {\n      newProperties = {\n        align: isActive ? undefined : format,\n      };\n    } else {\n      newProperties = {\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n      };\n    }\n    Transforms.setNodes<SlateElement>(editor, newProperties);\n    if (!isActive && isList) {\n      const block = { type: format, children: [] };\n      Transforms.wrapNodes(editor, block);\n    }\n    if (format === 'code' && !isBlockActive(editor, format, 'type')) {\n      let property = 'language';\n      Transforms.setNodes(editor, { [property]: undefined });\n    }\n  };\n  return (\n    <Button\n      active={isBlockActive(editor, format, TEXT_ALIGN_TYPES.includes(format) ? 'align' : 'type')}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        !readonly && toggleBlock(editor, format);\n      }}\n    >\n      <Icon />\n    </Button>\n  );\n};\nexport default BlockButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/Button.tsx", "file_contents": "import { forwardRef, PropsWithChildren, Ref, RefObject } from 'react';\nimport cn from 'classnames';\ninterface BaseProps {\n  className: string;\n  [key: string]: unknown;\n}\ntype OrNull<T> = T | null;\nconst Button = forwardRef(\n  (\n    {\n      className,\n      active,\n      reversed,\n      ...props\n    }: PropsWithChildren<\n      {\n        active: boolean;\n        reversed: boolean;\n      } & BaseProps\n    >,\n    ref: Ref<OrNull<HTMLSpanElement>>,\n  ) => (\n    <span\n      {...props}\n      ref={ref as RefObject<HTMLSpanElement>}\n      className={cn(className, 'cursor-pointer text-xl w-8 h-8 flex items-center justify-left', {\n        'text-gray-300': !active,\n      })}\n    />\n  ),\n);\nexport default Button;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/ClearButton.tsx", "file_contents": "import { IconType } from 'react-icons';\nimport { Button } from './';\nimport { useSlate } from 'slate-react';\nimport { FC } from 'react';\nimport { Editor, Transforms, Element as SlateElement } from 'slate';\nimport has from 'lodash/has';\nimport { LinkElement } from '../Hooks/useLink';\ninterface ClearButton {\n  icon: IconType;\n  readonly?: boolean;\n}\nconst ClearButton: FC<ClearButton> = ({ icon: Icon, readonly }) => {\n  const editor = useSlate();\n  const clearContent = (editor: Editor) => {\n    const { selection } = editor;\n    if (selection) {\n      const textMarks = [\n        'bold',\n        'italic',\n        'underline',\n        'strikethrough',\n        'color',\n        'backgroundColor',\n      ];\n      Transforms.unsetNodes(editor, textMarks, {\n        match: (n) => {\n          return has(n, 'text');\n        },\n        split: false,\n      });\n      Transforms.unwrapNodes(editor, {\n        match: (n) =>\n          !Editor.isEditor(n) && SlateElement.isElement(n) && (n as LinkElement).type === 'link',\n        split: true,\n      });\n      const [codeBlock] = Editor.nodes(editor, {\n        match: (n) =>\n          !Editor.isEditor(n) && SlateElement.isElement(n) && (n as any).type === 'code',\n      });\n      if (codeBlock) {\n        let newProperties: Partial<SlateElement> | any;\n        let property = 'language';\n        newProperties = {\n          type: 'paragraph',\n        };\n        Transforms.setNodes(editor, { [property]: undefined });\n        Transforms.setNodes<SlateElement>(editor, newProperties);\n      }\n    }\n  };\n  return (\n    <Button\n      onMouseDown={(event: any) => {\n        event.preventDefault();\n        !readonly && clearContent(editor);\n      }}\n    >\n      <Icon />\n    </Button>\n  );\n};\nexport default ClearButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/ColorPickerButton.tsx", "file_contents": "import { FC, useState, useRef, useEffect } from 'react';\nimport { useSlate, ReactEditor } from 'slate-react';\nimport { SketchPicker } from 'react-color';\nimport { Editor, BaseRange } from 'slate';\nimport { Button } from '.';\nimport { IconType } from 'react-icons';\nimport get from 'lodash/get';\ninterface ColorPickerButton {\n  icon: IconType;\n  format: string;\n  readonly?: boolean;\n}\nconst ColorPickerButton: FC<ColorPickerButton> = ({ icon: Icon, format, readonly }) => {\n  const editor = useSlate();\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  const [color, setColor] = useState<string>('#000');\n  const [selection, setSelection] = useState<BaseRange | null>(null);\n  const pickerRef = useRef<HTMLDivElement>(null);\n  const btnRef = useRef<HTMLButtonElement>(null);\n  const applyColor = (editor: Editor, color: string) => {\n    if (selection) {\n      ReactEditor.focus(editor as ReactEditor);\n      editor.selection = selection;\n      Editor.addMark(editor, format, color);\n      setShowColorPicker(false);\n    }\n  };\n  const isMarkActive = (editor: Editor, format: string) => {\n    const marks = Editor.marks(editor) as Record<string, any>;\n    return get(marks, format, '') !== '';\n  };\n  const toggleColorPicker = (editor: Editor, format: string) => {\n    const marks = Editor.marks(editor) as Record<string, any>;\n    setColor(get(marks, format, ''));\n    setShowColorPicker(true);\n  };\n  useEffect(() => {\n    if (!showColorPicker) return;\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Node;\n      if (!pickerRef.current?.contains(target) && !btnRef.current?.contains(target)) {\n        setShowColorPicker(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showColorPicker]);\n  return (\n    <div style={{ position: 'relative', display: 'inline-block' }}>\n      <Button\n        ref={btnRef}\n        active={isMarkActive(editor, format)}\n        onMouseDown={(event: MouseEvent) => {\n          event.preventDefault();\n          if (!readonly) {\n            setSelection(editor.selection);\n            toggleColorPicker(editor, format);\n          }\n        }}\n      >\n        <Icon />\n      </Button>\n      {showColorPicker && (\n        <div ref={pickerRef} style={{ position: 'absolute', zIndex: 2 }}>\n          <SketchPicker\n            color={color}\n            onChange={(newColor) => setColor(newColor.hex)}\n            onChangeComplete={(newColor) => applyColor(editor, newColor.hex)}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\nexport default ColorPickerButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/Element.tsx", "file_contents": "import { FC } from 'react';\nimport { MdDelete } from 'react-icons/md';\nimport { Button } from '.';\nimport { useFocused, useReadOnly, useSelected, useSlate } from 'slate-react';\nimport useImage from '../Hooks/useImage';\nimport useCodeEditor from '../Hooks/useCodeEditor';\nimport TableToolBar from './TableToolBar';\ninterface Element {\n  attributes: any;\n  children: any;\n  element: any;\n}\nconst Element: FC<Element> = ({ attributes, children, element }) => {\n  const alignClass = element.align ? `text-${element.align}` : '';\n  const isReadOnly = useReadOnly();\n  switch (element.type) {\n    case 'code':\n      const { SelectLanguage } = useCodeEditor();\n      return (\n        <div className=\"relative\">\n          {!isReadOnly && <SelectLanguage element={element} />}\n          <pre className=\"whitespace-pre p-2 space-x-2 bg-zinc-300 \">\n            <code className={`lang-${element.language}`}>{children}</code>\n          </pre>\n        </div>\n      );\n    case 'table':\n      const displayed = useSelected();\n      return (\n        <div className=\"relative\">\n          {displayed && !isReadOnly && <TableToolBar />}\n          <table\n            className=\"table-fixed w-full border-collapse border border-gray-400\"\n            {...attributes}\n          >\n            <tbody>{children}</tbody>\n          </table>\n        </div>\n      );\n    case 'table-row':\n      return (\n        <tr className={!isReadOnly && 'even:bg-gray-200 hover:bg-gray-300'} {...attributes}>\n          {children}\n        </tr>\n      );\n    case 'table-cell':\n      return (\n        <td className=\"border border-gray-400 p-2\" {...attributes}>\n          {children}\n        </td>\n      );\n    case 'image':\n      const selected = useSelected();\n      const focused = useFocused();\n      const editor = useSlate();\n      const { unwrapImage } = useImage();\n      return (\n        <div {...attributes}>\n          <div className=\"relative w-fit\" contentEditable={false}>\n            <img\n              src={element.url}\n              className={`block max-h-80 max-w-full ${selected && focused ? 'shadow-outline' : ''}`}\n            />\n            <Button\n              active\n              onClick={() => unwrapImage(editor)}\n              className={`absolute top-2 right-2 bg-white ${\n                selected && focused ? 'inline' : 'hidden'\n              }`}\n            >\n              <MdDelete />\n            </Button>\n          </div>\n          {children}\n        </div>\n      );\n    case 'link':\n      return (\n        <a\n          className={`underline cursor-pointer ${alignClass} text-blue-600`}\n          {...attributes}\n          href={element.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {children}\n        </a>\n      );\n    case 'block-quote':\n      return (\n        <blockquote\n          className={`${alignClass} border-l-4 border-gray-300 pl-4 bg-gray-100`}\n          {...attributes}\n        >\n          {children}\n        </blockquote>\n      );\n    case 'bulleted-list':\n      return (\n        <ul className={`list-inside list-disc ${alignClass}`} {...attributes}>\n          {children}\n        </ul>\n      );\n    case 'heading-one':\n      return (\n        <h1 className={`${alignClass} text-3xl`} {...attributes}>\n          {children}\n        </h1>\n      );\n    case 'heading-two':\n      return (\n        <h2 className={`${alignClass} text-2xl`} {...attributes}>\n          {children}\n        </h2>\n      );\n    case 'heading-three':\n      return (\n        <h3 className={`${alignClass} text-xl`} {...attributes}>\n          {children}\n        </h3>\n      );\n    case 'list-item':\n      return (\n        <li className={alignClass} {...attributes}>\n          {children}\n        </li>\n      );\n    case 'numbered-list':\n      return (\n        <ol className={`list-inside list-decimal ${alignClass}`} {...attributes}>\n          {children}\n        </ol>\n      );\n    case 'video':\n      return (\n        <div {...attributes}>\n          <div contentEditable={false}>\n            <iframe src={element.url} allowFullScreen title=\"Embedded video\" className=\"w-full\" />\n          </div>\n          {children}\n        </div>\n      );\n    default:\n      return (\n        <p className={`element-paragraph ${alignClass}`} {...attributes}>\n          {children}\n        </p>\n      );\n  }\n};\nexport default Element;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/EmojiButton.tsx", "file_contents": "import { IconType } from 'react-icons';\nimport { Button } from './';\nimport { useSlate } from 'slate-react';\nimport { FC, useState } from 'react';\nimport { Transforms } from 'slate';\nimport Picker from '@emoji-mart/react';\nimport data from '@emoji-mart/data';\ninterface EmojiButton {\n  icon: IconType;\n  readonly?: boolean;\n}\nconst EmojiButton: FC<EmojiButton> = ({ icon: Icon, readonly }) => {\n  const editor = useSlate();\n  const [isPickerVisible, setPickerVisible] = useState(false);\n  const insertEmoji = (emoji: any) => {\n    Transforms.insertText(editor, emoji.native);\n    setPickerVisible(false);\n  };\n  return (\n    <div>\n      <Button\n        onMouseDown={(event: any) => {\n          event.preventDefault();\n          !readonly && setPickerVisible((prev) => !prev);\n        }}\n      >\n        <Icon />\n      </Button>\n      <>\n        {isPickerVisible && (\n          <div style={{ position: 'absolute', zIndex: 10 }}>\n            <Picker data={data} onEmojiSelect={insertEmoji} theme=\"light\" />\n          </div>\n        )}\n      </>\n    </div>\n  );\n};\nexport default EmojiButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/Hotkeys.ts", "file_contents": "import isHotkey from 'is-hotkey';\nimport { Editor, Transforms } from 'slate';\nimport useButton from '../Hooks/useButton';\nimport { HistoryEditor } from 'slate-history';\nconst handleHotKey = (editor: Editor, event: any) => {\n  const { selection } = editor;\n  const { children } = editor;\n  const { toggleMark } = useButton();\n  const HOTKEYS = {\n    'ctrl+b': 'bold',\n    'ctrl+i': 'italic',\n    'ctrl+u': 'underline',\n    'ctrl+`': 'code',\n    'ctrl+z': 'undo',\n    'ctrl+y': 'redo',\n  };\n  if (\n    selection &&\n    (children[selection?.anchor.path[0]] as any).type === 'code' &&\n    event.code === 'Enter'\n  ) {\n    event.preventDefault();\n    Transforms.insertText(editor, '\\n', { at: selection });\n  }\n  for (const hotkey in HOTKEYS) {\n    if (isHotkey(hotkey, event)) {\n      event.preventDefault();\n      if (hotkey === 'ctrl+z') {\n        HistoryEditor.undo(editor as any);\n      } else if (hotkey === 'ctrl+y') {\n        HistoryEditor.redo(editor as any);\n      } else {\n        const mark = (HOTKEYS as any)[hotkey];\n        toggleMark(editor, mark);\n      }\n    }\n  }\n};\nexport default handleHotKey;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/ImageButton.tsx", "file_contents": "import { FC, useState } from 'react';\nimport { ReactEditor, useSlate } from 'slate-react';\nimport { BaseRange } from 'slate';\nimport { IconType } from 'react-icons';\nimport { Button } from './';\nimport useImage from '../Hooks/useImage';\nimport ImageDialog from './ImageDialog';\nimport { createPortal } from 'react-dom';\ninterface ImageButton {\n  icon: IconType;\n  readonly?: boolean;\n}\nconst ImageButton: FC<ImageButton> = ({ icon: Icon, readonly }) => {\n  const editor = useSlate();\n  const { isImageActive, unwrapImage, insertImage } = useImage();\n  const [showDialog, setShowDialog] = useState(false);\n  const [dialogPosition, setDialogPosition] = useState<{ top: number; left: number } | null>(null);\n  const [selection, setSelection] = useState<BaseRange | null>(null);\n  const handleMouseDown = (event: any) => {\n    if (readonly) return;\n    event.preventDefault();\n    if (ReactEditor.isFocused(editor as ReactEditor)) {\n      if (isImageActive(editor)) {\n        unwrapImage(editor);\n      } else {\n        const domSelection = window.getSelection();\n        if (domSelection && domSelection.rangeCount > 0) {\n          const domRange = domSelection.getRangeAt(0);\n          const rect = domRange.getBoundingClientRect();\n          setSelection(editor.selection);\n          setDialogPosition({\n            top: rect.bottom + window.scrollY,\n            left: rect.left + window.scrollX,\n          });\n          setShowDialog(true);\n        }\n      }\n    }\n  };\n  const handleInsertImage = (url: string) => {\n    if (selection) {\n      ReactEditor.focus(editor as ReactEditor);\n      editor.selection = selection;\n      insertImage(editor, url);\n      setShowDialog(false);\n    }\n  };\n  return (\n    <>\n      <Button active={isImageActive(editor)} onMouseDown={handleMouseDown}>\n        <Icon />\n      </Button>\n      {showDialog &&\n        dialogPosition &&\n        createPortal(\n          <ImageDialog\n            position={dialogPosition}\n            onClose={() => setShowDialog(false)}\n            onInsertLink={handleInsertImage}\n          />,\n          document.body,\n        )}\n    </>\n  );\n};\nexport default ImageButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/ImageDialog.tsx", "file_contents": "import { FC, useState, useRef, useEffect } from 'react';\ninterface ImageDialog {\n  position: { top: number; left: number };\n  onClose: () => void;\n  onInsertLink: (url: string) => void;\n}\nconst ImageDialog: FC<ImageDialog> = ({ position, onClose, onInsertLink }) => {\n  const [url, setUrl] = useState('');\n  const [open, setOpen] = useState(false);\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onInsertLink(url);\n  };\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (open && !dialogRef.current?.contains(event.target as Node)) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    setOpen(true);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [onClose]);\n  return (\n    <div\n      ref={dialogRef}\n      className=\"absolute bg-white border border-gray-300 p-1 z-50 shadow\"\n      style={{ top: position.top, left: position.left }}\n    >\n      <form onSubmit={handleSubmit} className=\"flex items-center\">\n        <input\n          type=\"text\"\n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          placeholder=\"Enter image URL\"\n          className=\"mr-2 p-1 border rounded\"\n        />\n        <button type=\"submit\" className=\"mr-1 p-1 text-blue-500\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default ImageDialog;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/index.tsx", "file_contents": "import TextEditor from './TextEditor';\nexport default {\n  TextEditor,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/Leaf.tsx", "file_contents": "import { FC } from 'react';\nimport cn from 'classnames';\ninterface Leaf {\n  attributes: any;\n  children: any;\n  leaf: any;\n}\nconst Leaf: FC<Leaf> = ({ attributes, children, leaf }) => {\n  let style = {};\n  const leafClasses = cn({\n    'font-bold': leaf.bold,\n    'font-mono': leaf.code,\n    italic: leaf.italic,\n    underline: leaf.underline,\n    'line-through': leaf.strikethrough,\n  });\n  if (leaf.code) {\n    children = (\n      <span {...attributes} className={`token ${leaf.token}`}>\n        {children}\n      </span>\n    );\n  }\n  if (leaf.color) {\n    style = { ...style, color: leaf.color };\n  }\n  if (leaf.backgroundColor) {\n    style = { ...style, backgroundColor: leaf.backgroundColor };\n  }\n  const title = typeof children === 'string' ? children : undefined;\n  return (\n    <span {...attributes} title={title} className={leafClasses} style={style}>\n      {children}\n    </span>\n  );\n};\nexport default Leaf;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/LinkButton.tsx", "file_contents": "import { FC, useState } from 'react';\nimport { Button } from '.';\nimport { IconType } from 'react-icons';\nimport useLink from '../Hooks/useLink'; \nimport { ReactEditor, useSlate } from 'slate-react';\nimport { createPortal } from 'react-dom';\nimport LinkDialog from './LinkDialog';\nimport { BaseRange } from 'slate';\ninterface LinkButton {\n  icon: IconType;\n  readonly?: boolean;\n}\nconst LinkButton: FC<LinkButton> = ({ icon: Icon, readonly }) => {\n  const editor = useSlate();\n  const { isLinkActive, unwrapLink, insertLink } = useLink();\n  const [showDialog, setShowDialog] = useState(false);\n  const [selection, setSelection] = useState<BaseRange | null>(null);\n  const [dialogPosition, setDialogPosition] = useState<{ top: number; left: number } | null>(null);\n  const handleMouseDown = (event: any) => {\n    if (readonly) return;\n    event.preventDefault();\n    if (ReactEditor.isFocused(editor as ReactEditor)) {\n      if (isLinkActive(editor)) {\n        unwrapLink(editor);\n      } else {\n        const domSelection = window.getSelection();\n        if (domSelection && domSelection.rangeCount > 0) {\n          const domRange = domSelection.getRangeAt(0);\n          const rect = domRange.getBoundingClientRect();\n          setDialogPosition({\n            top: rect.bottom + window.scrollY,\n            left: rect.left + window.scrollX,\n          });\n          setSelection(editor.selection);\n          setShowDialog(true);\n        }\n      }\n    }\n  };\n  const handleInsertLink = (url: string) => {\n    ReactEditor.focus(editor as ReactEditor);\n    editor.selection = selection;\n    insertLink(editor, url);\n    setShowDialog(false);\n  };\n  return (\n    <>\n      <Button active={isLinkActive(editor)} onMouseDown={handleMouseDown}>\n        <Icon />\n      </Button>\n      {showDialog &&\n        dialogPosition &&\n        createPortal(\n          <LinkDialog\n            position={dialogPosition}\n            onClose={() => {\n              setShowDialog(false);\n            }}\n            onInsertLink={handleInsertLink}\n          />,\n          document.body,\n        )}\n    </>\n  );\n};\nexport default LinkButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/LinkDialog.tsx", "file_contents": "import { FC, useState, useRef, useEffect } from 'react';\ninterface LinkDialog {\n  position: { top: number; left: number };\n  onClose: () => void;\n  onInsertLink: (url: string) => void;\n}\nconst LinkDialog: FC<LinkDialog> = ({ position, onClose, onInsertLink }) => {\n  const [url, setUrl] = useState('');\n  const [open, setOpen] = useState(false);\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onInsertLink(url);\n  };\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (open && !dialogRef.current?.contains(event.target as Node)) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    setOpen(true);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [onClose]);\n  return (\n    <div\n      ref={dialogRef}\n      className=\"absolute bg-white border border-gray-300 p-1 z-50 shadow\"\n      style={{ top: position.top, left: position.left }}\n    >\n      <form onSubmit={handleSubmit} className=\"flex items-center\">\n        <input\n          type=\"text\"\n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          placeholder=\"Enter URL\"\n          className=\"mr-2 p-1 border rounded\"\n        />\n        <button type=\"submit\" className=\"mr-1 p-1 text-blue-500\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default LinkDialog;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/MarkButton.tsx", "file_contents": "import { useSlate } from 'slate-react';\nimport { Button } from './';\nimport { IconType } from 'react-icons';\nimport { FC } from 'react';\nimport useButton from '../Hooks/useButton';\ninterface MarkButton {\n  icon: IconType;\n  format: string;\n  readonly?: boolean;\n}\nconst MarkButton: FC<MarkButton> = ({ icon: Icon, format, readonly }) => {\n  const editor = useSlate();\n  const { isMarkActive, toggleMark } = useButton();\n  return (\n    <Button\n      active={isMarkActive(editor, format)}\n      onMouseDown={(event: any) => {\n        event.preventDefault();\n        !readonly && toggleMark(editor, format);\n      }}\n    >\n      <Icon />\n    </Button>\n  );\n};\nexport default MarkButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/TableBarButton.tsx", "file_contents": "import { IconType } from 'react-icons';\nimport { FC, useState } from 'react';\nimport { Button } from './';\nimport { useSlate } from 'slate-react';\nimport { Editor } from 'slate';\nimport useTable from '../Hooks/useTable';\ninterface TableBarButton {\n  icon: IconType;\n  readonly?: boolean;\n  format: string;\n}\nconst TableBarButton: FC<TableBarButton> = ({ icon: Icon, readonly, format }) => {\n  const [isHovered, setHover] = useState<boolean>(false);\n  const editor = useSlate();\n  const [table] = Array.from(\n    Editor.nodes(editor, {\n      match: (n) => (n as any).type === 'table',\n    }),\n  );\n  const handleToolBar = (format: string) => {\n    const { insertRow, insertCell, deleteRow, deleteCell, deleteTable } = useTable();\n    switch (format) {\n      case 'insertRowLeft':\n        insertCell(editor, 'left', table);\n        return;\n      case 'insertRowRight':\n        insertCell(editor, 'right', table);\n        return;\n      case 'insertRowAbove':\n        insertRow(editor, 'above', table);\n        return;\n      case 'insertRowBelow':\n        insertRow(editor, 'below', table);\n        return;\n      case 'deleteRow':\n        deleteRow(editor);\n        return;\n      case 'deleteColumn':\n        deleteCell(editor);\n        return;\n      case 'deleteTable':\n        deleteTable(editor, table);\n        return;\n    }\n  };\n  return (\n    <Button\n      onMouseDown={(event: any) => {\n        event.preventDefault();\n        !readonly && handleToolBar(format);\n      }}\n      className={isHovered && 'text-gray-700'}\n      onMouseEnter={() => {\n        setHover(true);\n      }}\n      onMouseLeave={() => {\n        setHover(false);\n      }}\n    >\n      <Icon />\n    </Button>\n  );\n};\nexport default TableBarButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/TableButton.tsx", "file_contents": "import { IconType } from 'react-icons';\nimport { Button } from './';\nimport { useSlate } from 'slate-react';\nimport { FC } from 'react';\nimport { Node, Element, Transforms } from 'slate';\ninterface TableButton {\n  icon: IconType;\n  readonly?: boolean;\n}\ninterface Table extends Element {\n  type: 'table';\n  children: Node[];\n}\ninterface Cell extends Element {\n  type: 'table-cell';\n  children: Node[];\n}\ninterface Row extends Element {\n  type: 'table-row';\n  children: Cell[];\n}\nconst createCell = (): Cell => {\n  return {\n    type: 'table-cell',\n    children: [{ type: 'paragraph', children: [{ text: '' }] }] as any,\n  };\n};\nconst createRow = (columns: number): Row => {\n  const cells = Array.from({ length: columns }, () => createCell());\n  return {\n    type: 'table-row',\n    children: cells,\n  };\n};\nconst createTable = (columns: number, rows: number): Table => {\n  const tableRows = Array.from({ length: rows }, () => createRow(columns));\n  return {\n    type: 'table',\n    children: tableRows,\n  };\n};\nconst TableButton: FC<TableButton> = ({ icon: Icon, readonly }) => {\n  const editor = useSlate();\n  const insertTable = () => {\n    const table = createTable(3, 3);\n    Transforms.insertNodes(editor, table);\n  };\n  return (\n    <Button\n      onMouseDown={(event: any) => {\n        event.preventDefault();\n        !readonly && insertTable();\n      }}\n    >\n      <Icon />\n    </Button>\n  );\n};\nexport default TableButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/TableToolBar.tsx", "file_contents": "import { FC, useRef } from 'react';\nimport {\n  AiOutlineInsertRowLeft,\n  AiOutlineInsertRowRight,\n  AiOutlineInsertRowAbove,\n  AiOutlineInsertRowBelow,\n  AiOutlineDelete,\n  AiOutlineDeleteRow,\n  AiOutlineDeleteColumn,\n} from 'react-icons/ai';\nimport TableBarButton from './TableBarButton';\ninterface TableToolBar {\n  readonly?: boolean;\n}\nconst TableToolBar: FC<TableToolBar> = ({ readonly }) => {\n  const dialogRef = useRef<HTMLDivElement>(null);\n  return (\n    <div\n      ref={dialogRef}\n      className=\"absolute -top-8 bg-white border border-gray-300 z-50 shadow flex p-1 gap-2\"\n      style={{ top: '-45px' }}\n    >\n      <TableBarButton readonly={readonly} icon={AiOutlineInsertRowLeft} format=\"insertRowLeft\" />\n      <TableBarButton readonly={readonly} icon={AiOutlineInsertRowRight} format=\"insertRowRight\" />\n      <TableBarButton readonly={readonly} icon={AiOutlineInsertRowAbove} format=\"insertRowAbove\" />\n      <TableBarButton readonly={readonly} icon={AiOutlineInsertRowBelow} format=\"insertRowBelow\" />\n      <TableBarButton readonly={readonly} icon={AiOutlineDeleteRow} format=\"deleteColumn\" />\n      <TableBarButton readonly={readonly} icon={AiOutlineDeleteColumn} format=\"deleteRow\" />\n      <TableBarButton readonly={readonly} icon={AiOutlineDelete} format=\"deleteTable\" />\n    </div>\n  );\n};\nexport default TableToolBar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/TextEditor.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState } from 'react';\nimport { createEditor } from 'slate';\nimport { Editable, Slate, withReact } from 'slate-react';\nimport { ITextEditorProps } from './TextEditor.config';\nimport { Toolbar } from './UI';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [{ text: 'A line of text in a paragraph.' }],\n  },\n];\nconst TextEditor: FC<ITextEditorProps> = ({\n  datasource,\n  readOnly,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const [editor] = useState(() => withReact(createEditor()));\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {datasource ? (\n        <Slate editor={editor} initialValue={initialValue}>\n          {!readOnly && <Toolbar readonly />}\n          <Editable readOnly className=\"p-2 h-full\" />\n        </Slate>\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <BsFillInfoCircleFill className=\"mb-1 h-8 w-8\" />\n          <p>Please attach a datasource</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default TextEditor;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/TextEditor.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineTextSnippet } from 'react-icons/md';\nimport TextEditorSettings, { BasicSettings } from './TextEditor.settings';\nexport default {\n  craft: {\n    displayName: 'TextEditor',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(TextEditorSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'TextEditor',\n    exposed: true,\n    icon: MdOutlineTextSnippet,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    iterableChild: true,\n    readOnly: false,\n    style: {\n      borderWidth: '1px',\n      borderRadius: '6px',\n      borderColor: 'inherit',\n    },\n  },\n} as T4DComponentConfig<ITextEditorProps>;\nexport interface ITextEditorProps extends webforms.ComponentProps {\n  readOnly?: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/TextEditor.render.tsx", "file_contents": "import { splitDatasourceID, useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { Descendant, Transforms, createEditor } from 'slate';\nimport { Editable, ReactEditor, Slate, withReact } from 'slate-react';\nimport { ITextEditorProps } from './TextEditor.config';\nimport { Toolbar, Element, Leaf } from './UI';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nimport { withHistory } from 'slate-history';\nimport withEmbeds from './Hooks/withEmbeds';\nimport useCodeEditor from './Hooks/useCodeEditor';\nimport withInlines from './Hooks/withInlines';\nimport handleHotKey from './Utils/Hotkeys';\nimport isEqual from 'lodash/isEqual';\nconst TextEditor: FC<ITextEditorProps> = ({\n  datasource,\n  readOnly,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const initialValue = [\n    {\n      type: 'paragraph',\n      children: [{ text: 'A line of text in a paragraph.' }],\n    },\n  ];\n  const [value, updateValue] = useState<Descendant[] | null>(null);\n  const setValue = (newValue: Descendant[]) => {\n    if (!isEqual(newValue, value)) {\n      editor.children = newValue;\n      updateValue(newValue);\n    }\n  };\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const { id: datasourceID } = splitDatasourceID(datasource);\n  const editorWrapperRef = useRef<HTMLDivElement | null>(\n    null,\n  ) as MutableRefObject<HTMLDivElement | null>; \n  const [editor] = useState(() => withInlines(withReact(withHistory(withEmbeds(createEditor())))));\n  const renderElement = useCallback((props: any) => <Element {...props} />, []);\n  const renderLeaf = useCallback((props: any) => <Leaf {...props} />, []);\n  const { highlightCode } = useCodeEditor();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      try {\n        const parsedValue = v ? JSON.parse(v) : initialValue;\n        setValue(parsedValue);\n      } catch (error) {\n        const slateContent = [{ type: 'paragraph', children: [{ text: v }] }];\n        setValue(slateContent);\n      }\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (editorWrapperRef.current && !editorWrapperRef.current.contains(event.target as Node)) {\n        Transforms.deselect(editor);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [editorWrapperRef]);\n  const handleOnChange = (newValue: any) => {\n    if (ds && !datasourceID.startsWith('$')) {\n      ds.setValue(null, JSON.stringify(newValue));\n    }\n  };\n  const handlePaste = useCallback(\n    (event: any) => {\n      event.preventDefault();\n      const text = event.clipboardData.getData('text/plain');\n      const formattedText = text.split('\\n').join('\\n');\n      const newContent = {\n        type: 'paragraph',\n        children: [{ text: formattedText }],\n      };\n      Transforms.insertNodes(editor, newContent);\n    },\n    [editor],\n  );\n  return (\n    <div\n      ref={(node) => {\n        editorWrapperRef.current = node;\n        connect(node);\n      }}\n      style={style}\n      className={cn(className, classNames)}\n    >\n      {value ? (\n        <Slate editor={editor as ReactEditor} initialValue={value} onChange={handleOnChange}>\n          {!readOnly && <Toolbar readonly={readOnly} />}\n          <Editable\n            className=\"p-2\"\n            renderElement={renderElement}\n            renderLeaf={renderLeaf}\n            readOnly={readOnly}\n            decorate={highlightCode}\n            onPaste={handlePaste}\n            onKeyDown={(e) => handleHotKey(editor, e)}\n          />\n        </Slate>\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <BsFillInfoCircleFill className=\"mb-1 h-8 w-8\" />\n          <p>Please attach a datasource</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default TextEditor;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/TextEditor.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'readOnly',\n    label: 'Read only',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/Toolbar.tsx", "file_contents": "import { FC } from 'react';\nimport { MarkButton, BlockButton, LinkButton, VideoButton, ImageButton } from './';\ninterface ToolbarProps {\n  readonly?: boolean;\n}\nimport {\n  MdOutlineFormatBold,\n  MdOutlineFormatItalic,\n  MdOutlineFormatUnderlined,\n  MdOutlineCode,\n  MdOutlineLooksOne,\n  MdOutlineLooksTwo,\n  MdOutlineLooks3,\n  MdOutlineFormatQuote,\n  MdOutlineFormatListNumbered,\n  MdOutlineFormatListBulleted,\n  MdOutlineFormatAlignLeft,\n  MdOutlineFormatAlignCenter,\n  MdOutlineFormatAlignRight,\n  MdOutlineFormatAlignJustify,\n  MdOutlineInsertLink,\n  MdOutlineStrikethroughS,\n  MdOutlineVideoFile,\n  MdOutlineImage,\n  MdOutlineFormatColorText,\n  MdOutlineFormatColorFill,\n  MdOutlineFormatClear,\n  MdOutlineGridOn,\n  MdEmojiEmotions,\n} from 'react-icons/md';\nimport ColorPickerButton from './ColorPickerButton';\nimport ClearButton from './ClearButton';\nimport TableButton from './TableButton';\nimport EmojiButton from './EmojiButton';\nconst Toolbar: FC<ToolbarProps> = ({ readonly }) => {\n  return (\n    <div id=\"toolbar\" className=\"flex p-2 gap-2 border-b w-full flex-wrap\">\n      <MarkButton icon={MdOutlineFormatBold} format=\"bold\" readonly={readonly} />\n      <MarkButton icon={MdOutlineFormatItalic} format=\"italic\" readonly={readonly} />\n      <MarkButton icon={MdOutlineFormatUnderlined} format=\"underline\" readonly={readonly} />\n      <MarkButton icon={MdOutlineStrikethroughS} format=\"strikethrough\" readonly={readonly} />\n      <BlockButton icon={MdOutlineCode} format=\"code\" readonly={readonly} />\n      <ColorPickerButton icon={MdOutlineFormatColorText} readonly={readonly} format=\"color\" />\n      <ColorPickerButton\n        icon={MdOutlineFormatColorFill}\n        readonly={readonly}\n        format=\"backgroundColor\"\n      />\n      <BlockButton icon={MdOutlineLooksOne} format=\"heading-one\" readonly={readonly} />\n      <BlockButton icon={MdOutlineLooksTwo} format=\"heading-two\" readonly={readonly} />\n      <BlockButton icon={MdOutlineLooks3} format=\"heading-three\" readonly={readonly} />\n      <BlockButton icon={MdOutlineFormatQuote} format=\"block-quote\" readonly={readonly} />\n      <BlockButton icon={MdOutlineFormatListNumbered} format=\"numbered-list\" readonly={readonly} />\n      <BlockButton icon={MdOutlineFormatListBulleted} format=\"bulleted-list\" readonly={readonly} />\n      <BlockButton icon={MdOutlineFormatAlignLeft} format=\"left\" readonly={readonly} />\n      <BlockButton icon={MdOutlineFormatAlignCenter} format=\"center\" readonly={readonly} />\n      <BlockButton icon={MdOutlineFormatAlignRight} format=\"right\" readonly={readonly} />\n      <BlockButton icon={MdOutlineFormatAlignJustify} format=\"justify\" readonly={readonly} />\n      <TableButton icon={MdOutlineGridOn} readonly={readonly} />\n      <ImageButton icon={MdOutlineImage} readonly={readonly} />\n      <LinkButton icon={MdOutlineInsertLink} readonly={readonly} />\n      <VideoButton icon={MdOutlineVideoFile} readonly={readonly} />\n      <EmojiButton icon={MdEmojiEmotions} readonly={readonly} />\n      <ClearButton icon={MdOutlineFormatClear} readonly={readonly} />\n    </div>\n  );\n};\nexport default Toolbar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/useButton.tsx", "file_contents": "import { Editor } from 'slate';\nconst useButton = () => {\n  const isMarkActive = (editor: Editor, format: string) => {\n    const marks = Editor.marks(editor) as Record<string, any>;\n    return marks ? marks[format] === true : false;\n  };\n  const toggleMark = (editor: Editor, format: string) => {\n    const isActive = isMarkActive(editor, format);\n    if (isActive) {\n      Editor.removeMark(editor, format);\n    } else {\n      Editor.addMark(editor, format, true);\n    }\n  };\n  return {\n    isMarkActive,\n    toggleMark,\n  };\n};\nexport default useButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/useCodeEditor.tsx", "file_contents": "import { useCallback, useState } from 'react';\nimport Prism from 'prismjs';\nimport { ReactEditor, useSlate } from 'slate-react';\nimport { Node, Transforms } from 'slate';\nimport 'prismjs/themes/prism.css';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-tsx';\nimport 'prismjs/components/prism-markdown';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-java';\nconst useCodeEditor = () => {\n  const SelectLanguage = ({ element }: { element: any }) => {\n    const textEditor = useSlate();\n    const [selectedLanguage, setLanguage] = useState<string>(element.language || '');\n    const updateLanguage = (newLanguage: string) => {\n      setLanguage(newLanguage);\n      const path = ReactEditor.findPath(textEditor as ReactEditor, element);\n      Transforms.setNodes(textEditor, { language: newLanguage } as Partial<Node>, { at: path });\n    };\n    return (\n      <select\n        value={selectedLanguage}\n        onChange={(e: any) => updateLanguage(e.target.value)}\n        className=\"absolute right-5 top-2z-1 p-1\"\n      >\n        <option value=\"\" disabled>\n          Select language\n        </option>\n        <option value=\"javascript\">JavaScript</option>\n        <option value=\"typescript\">TypeScript</option>\n        <option value=\"markup\">Html</option>\n        <option value=\"css\">Css</option>\n        <option value=\"jsx\">JSX</option>\n        <option value=\"tsx\">TSX</option>\n        <option value=\"sql\">SQL</option>\n        <option value=\"python\">Python</option>\n        <option value=\"java\">Java</option>\n        <option value=\"php\">Php</option>\n      </select>\n    );\n  };\n  const highlightCode = useCallback(([node, path]: any) => {\n    const ranges: any[] = []; \n    if (node.children && node.children[0] && node.language) {\n      const editorCode = node.children[0].text;\n      const language = node.language || '';\n      const codeTokens = Prism.tokenize(editorCode, Prism.languages[language]);\n      let start = 0;\n      for (const token of codeTokens) {\n        const length = token.length;\n        const end = start + length;\n        if (typeof token !== 'string' && token.type) {\n          ranges.push({\n            anchor: { path, offset: start },\n            focus: { path, offset: end },\n            code: true,\n            token: token.type,\n          });\n        }\n        start = end;\n      }\n    }\n    return ranges;\n  }, []);\n  return {\n    SelectLanguage,\n    highlightCode,\n  };\n};\nexport default useCodeEditor;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/useImage.tsx", "file_contents": "import { Editor, Transforms, Descendant, Element as SlateElement } from 'slate';\nexport type ImageElement = { type: 'image'; url: string; children: Descendant[] };\nconst useImage = () => {\n  const isImageActive = (editor: Editor) => {\n    const [image] = Editor.nodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n as ImageElement).type === 'image',\n    });\n    return !!image;\n  };\n  const unwrapImage = (editor: Editor) => {\n    Transforms.unwrapNodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n as ImageElement).type === 'image',\n      split: true,\n    });\n  };\n  const wrapImage = (editor: Editor, url: string, text?: string) => {\n    if (isImageActive(editor)) {\n      unwrapImage(editor);\n    }\n    const embedElement: ImageElement = {\n      type: 'image',\n      url,\n      children: [{ text: text || '' }],\n    };\n    Transforms.insertNodes(editor, embedElement);\n  };\n  const insertImage = (editor: Editor, url: string, text?: string) => {\n    wrapImage(editor, url, text);\n  };\n  return {\n    isImageActive,\n    unwrapImage,\n    wrapImage,\n    insertImage,\n  };\n};\nexport default useImage;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/useLink.tsx", "file_contents": "import { Editor, Transforms, Range, Descendant, Element as SlateElement } from 'slate';\nexport type LinkElement = { type: 'link'; url: string; children: Descendant[] };\nexport type VideoElement = { type: 'video'; url: string; children: Descendant[] };\nconst useLink = () => {\n  const isLinkActive = (editor: Editor) => {\n    const [link] = Editor.nodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n as LinkElement).type === 'link',\n    });\n    return !!link;\n  };\n  const unwrapLink = (editor: Editor) => {\n    Transforms.unwrapNodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n as LinkElement).type === 'link',\n    });\n  };\n  const wrapLink = (editor: Editor, url: string, text?: string) => {\n    if (isLinkActive(editor)) {\n      unwrapLink(editor);\n    }\n    const { selection } = editor;\n    const isCollapsed = selection && Range.isCollapsed(selection);\n    const link: LinkElement = {\n      type: 'link',\n      url,\n      children: isCollapsed ? [{ text: text || url }] : [],\n    };\n    if (isCollapsed) {\n      Transforms.insertNodes(editor, link);\n    } else {\n      Transforms.wrapNodes(editor, link, { split: true });\n      if (text) {\n        Transforms.insertText(editor, text);\n      }\n      Transforms.collapse(editor, { edge: 'end' });\n    }\n  };\n  const insertLink = (editor: Editor, url: string) => {\n    if (editor.selection) {\n      wrapLink(editor, url);\n    }\n  };\n  return {\n    isLinkActive,\n    unwrapLink,\n    wrapLink,\n    insertLink,\n  };\n};\nexport default useLink;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/useTable.tsx", "file_contents": "import { Editor, Path, Transforms, Node } from 'slate';\nimport has from 'lodash/has';\nconst useTable = () => {\n  const getRowPosition = (editor: Editor): Path | null => {\n    const { selection } = editor;\n    if (!selection) return null;\n    const [match] = Editor.nodes(editor, {\n      match: (n) => (n as any).type === 'table-row',\n    });\n    return match ? match[1] : null;\n  };\n  const getCellPosition = (editor: Editor): Path | null => {\n    const { selection } = editor;\n    if (!selection) return null;\n    const [match] = Editor.nodes(editor, {\n      match: (n) => (n as any).type === 'table-cell',\n    });\n    return match ? match[1] : null;\n  };\n  const insertRow = (editor: Editor, position: string, table: any) => {\n    const rowPath = getRowPosition(editor);\n    let insertPath: Path;\n    if (rowPath) {\n      const newRow = {\n        type: 'table-row',\n        children: table[0].children[0].children.map(() => ({\n          type: 'table-cell',\n          children: [{ text: '' }],\n        })),\n      };\n      if (position === 'above') {\n        insertPath = rowPath;\n      } else {\n        insertPath = Path.next(rowPath);\n      }\n      Transforms.insertNodes(editor, newRow, { at: insertPath });\n    }\n  };\n  const insertCell = (editor: Editor, position: string, table: any) => {\n    const cellPath = getCellPosition(editor);\n    if (cellPath) {\n      const rowPath = Path.parent(cellPath);\n      const tablePath = Path.parent(rowPath);\n      table[0].children.forEach((row: any, rowIndex: any) => {\n        let cellPosition: number;\n        if (position === 'left') {\n          cellPosition = cellPath[cellPath.length - 1];\n        } else {\n          cellPosition = cellPath[cellPath.length - 1] + 1;\n        }\n        const rowInsertPath = [...tablePath, rowIndex, cellPosition];\n        const newCell = {\n          type: 'table-cell',\n          children: [{ text: '' }],\n        };\n        Transforms.insertNodes(editor, newCell, { at: rowInsertPath });\n      });\n    }\n  };\n  const deleteRow = (editor: Editor) => {\n    const rowPath = getRowPosition(editor);\n    if (rowPath) {\n      Transforms.removeNodes(editor, { at: rowPath });\n      const cellPath = Path.parent(rowPath);\n      const rowNode: Node = Node.get(editor, cellPath);\n      if (rowNode && has((rowNode as any).children[0], 'text')) {\n        Transforms.removeNodes(editor, { at: cellPath });\n      }\n    }\n  };\n  const deleteCell = (editor: Editor) => {\n    const cellPath = getCellPosition(editor);\n    if (cellPath) {\n      Transforms.removeNodes(editor, { at: cellPath });\n      const rowPath = Path.parent(cellPath);\n      const rowNode: Node = Node.get(editor, rowPath);\n      if (rowNode && has((rowNode as any).children[0], 'text')) {\n        Transforms.removeNodes(editor, { at: rowPath });\n      }\n    }\n  };\n  const deleteTable = (editor: Editor, table: any) => {\n    if (editor && table) {\n      Transforms.removeNodes(editor, {\n        at: table[1],\n      });\n    }\n  };\n  return {\n    deleteRow,\n    deleteCell,\n    deleteTable,\n    insertCell,\n    insertRow,\n  };\n};\nexport default useTable;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/useVideo.tsx", "file_contents": "import { Editor, Transforms, Descendant, Element as SlateElement, Range } from 'slate';\nexport type VideoElement = { type: 'video'; url: string; children: Descendant[] };\nconst useVideo = () => {\n  const isVideoActive = (editor: Editor) => {\n    const [video] = Editor.nodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n as VideoElement).type === 'video',\n    });\n    return !!video;\n  };\n  const unwrapVideo = (editor: Editor) => {\n    Transforms.delete(editor, {\n      at: editor.selection as Range,\n    });\n    Transforms.unwrapNodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) && SlateElement.isElement(n) && (n as VideoElement).type === 'video',\n      split: true,\n    });\n    Editor.normalize(editor, { force: true });\n  };\n  const wrapVideo = (editor: Editor, url: string, text?: string) => {\n    if (isVideoActive(editor)) {\n      unwrapVideo(editor);\n    }\n    const embedElement: VideoElement = {\n      type: 'video',\n      url,\n      children: [{ text: text || url }],\n    };\n    Transforms.insertNodes(editor, embedElement);\n  };\n  const insertVideo = (editor: Editor, url: string, text?: string) => {\n    wrapVideo(editor, url, text);\n  };\n  return {\n    unwrapVideo,\n    wrapVideo,\n    insertVideo,\n    isVideoActive,\n  };\n};\nexport default useVideo;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/VideoButton.tsx", "file_contents": "import { FC, useState } from 'react';\nimport { IconType } from 'react-icons';\nimport { Button } from './';\nimport { ReactEditor, useSlate } from 'slate-react';\nimport { BaseRange } from 'slate';\nimport VideoDialog from './VideoDialog';\nimport { createPortal } from 'react-dom';\nimport useVideo from '../Hooks/useVideo';\ninterface VideoButton {\n  icon: IconType;\n  readonly?: boolean;\n}\nconst VideoButton: FC<VideoButton> = ({ icon: Icon, readonly }) => {\n  const editor = useSlate();\n  const { isVideoActive, unwrapVideo, insertVideo } = useVideo();\n  const [showDialog, setShowDialog] = useState(false);\n  const [dialogPosition, setDialogPosition] = useState<{ top: number; left: number } | null>(null);\n  const [selection, setSelection] = useState<BaseRange | null>(null);\n  const handleMouseDown = (event: any) => {\n    if (readonly) return;\n    event.preventDefault();\n    if (ReactEditor.isFocused(editor as ReactEditor)) {\n      if (isVideoActive(editor)) {\n        unwrapVideo(editor);\n      } else {\n        const domSelection = window.getSelection();\n        if (domSelection && domSelection.rangeCount > 0) {\n          const domRange = domSelection.getRangeAt(0);\n          const rect = domRange.getBoundingClientRect();\n          setSelection(editor.selection);\n          setDialogPosition({\n            top: rect.bottom + window.scrollY,\n            left: rect.left + window.scrollX,\n          });\n          setShowDialog(true);\n        }\n      }\n    }\n  };\n  const handleInsertEmbed = (url: string) => {\n    if (selection) {\n      ReactEditor.focus(editor as ReactEditor);\n      editor.selection = selection;\n      insertVideo(editor, url);\n      setShowDialog(false);\n    }\n  };\n  return (\n    <>\n      <Button active={isVideoActive(editor)} onMouseDown={handleMouseDown}>\n        <Icon />\n      </Button>\n      {showDialog &&\n        dialogPosition &&\n        createPortal(\n          <VideoDialog\n            position={dialogPosition}\n            onClose={() => setShowDialog(false)}\n            onInsertEmbed={handleInsertEmbed}\n          />,\n          document.body,\n        )}\n    </>\n  );\n};\nexport default VideoButton;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/VideoDialog.tsx", "file_contents": "import { FC, useState, useRef, useEffect } from 'react';\nconst VideoDialog: FC<{\n  position: { top: number; left: number };\n  onClose: () => void;\n  onInsertEmbed: (url: string) => void;\n}> = ({ position, onClose, onInsertEmbed }) => {\n  const [url, setUrl] = useState('');\n  const [open, setOpen] = useState(false);\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onInsertEmbed(url);\n  };\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (open && !dialogRef.current?.contains(event.target as Node)) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    setOpen(true);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [onClose]);\n  return (\n    <div\n      ref={dialogRef}\n      className=\"absolute bg-white border border-gray-300 p-1 z-50 shadow\"\n      style={{ top: position.top, left: position.left }}\n    >\n      <form onSubmit={handleSubmit} className=\"flex items-center\">\n        <input\n          type=\"text\"\n          value={url}\n          onChange={(e) => setUrl(e.target.value)}\n          placeholder=\"Enter video URL\"\n          className=\"mr-2 p-1 border rounded\"\n        />\n        <button type=\"submit\" className=\"mr-1 p-1 text-blue-500\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default VideoDialog;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/withEmbeds.tsx", "file_contents": "import { Editor } from 'slate';\nconst withEmbeds = (editor: Editor) => {\n  const { isVoid } = editor;\n  editor.isVoid = (element: any) => {\n    return element.type === 'video' ? true : isVoid(element);\n  };\n  return editor;\n};\nexport default withEmbeds;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_slate/withInlines.tsx", "file_contents": "import isUrl from 'is-url';\nimport { Editor } from 'slate';\nimport useLink from './useLink';\nconst withInlines = (editor: Editor) => {\n  const { insertText, isInline } = editor;\n  const { wrapLink } = useLink();\n  editor.isInline = (element: any) => ['link'].includes(element.type) || isInline(element);\n  editor.insertText = (text) => {\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertText(text);\n    }\n  };\n  return editor;\n};\nexport default withInlines;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_tags/index.tsx", "file_contents": "import Tags from './Tags';\nexport default {\n  Tags,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_tags/Tags.build.tsx", "file_contents": "import {\n  IteratorProvider,\n  selectResolver,\n  useEnhancedEditor,\n  useEnhancedNode,\n  useDatasourceSub,\n} from '@ws-ui/webform-editor';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { MdWarning } from 'react-icons/md';\nimport { ITagsProps } from './Tags.config';\nconst Tags: FC<ITagsProps> = ({\n  enableAction = true,\n  iconAction,\n  iconLoader,\n  componentHeight,\n  componentWidth,\n  datasource,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  useDatasourceSub();\n  return (\n    <div\n      ref={connect}\n      className={cn(className, classNames)}\n      style={{ width: componentWidth, height: componentHeight }}\n    >\n      {datasource ? (\n        <>\n          <div className=\"items-center space-x-2\" style={style}>\n            <IteratorProvider>\n              <Element is={resolver.Text} id=\"container\" canvas />\n            </IteratorProvider>\n            {enableAction && <div className={cn('action cursor-pointer fa', iconAction)} />}\n          </div>\n          <div\n            style={{ ...style, width: '' }}\n            className={cn('load-more cursor-pointer fa leading-normal', iconLoader)}\n          >\n            &#8203;\n          </div>\n        </>\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <MdWarning className=\"mb-1 h-4 w-4\" />\n          <p>Please attach a datasource</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Tags;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_tags/Tags.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdCircle } from 'react-icons/md';\nimport TagsSettings, { BasicSettings } from './Tags.settings';\nexport default {\n  craft: {\n    displayName: 'Tags',\n    kind: EComponentKind.BASIC,\n    props: {\n      iterable: true,\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(TagsSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Tags',\n    sanityCheck: {\n      keys: [\n        { name: 'datasource', require: true, isDatasource: true },\n        { name: 'currentElement', require: false, isDatasource: true },\n      ],\n    },\n    exposed: true,\n    icon: MdCircle,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Click Action',\n        value: 'onclickaction',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n    ],\n    datasources: {\n      accept: ['entitysel'],\n      declarations: [{ key: 'datasource', iterable: true }, { key: 'currentElement' }],\n    },\n  },\n  defaultProps: {\n    iterableChild: true,\n    enableAction: true,\n    iconAction: 'fa-solid fa-xmark',\n    iconLoader: 'fa-solid fa-spinner',\n    style: {\n      display: 'inline-flex',\n      backgroundColor: 'rgb(218, 216, 216)',\n      color: 'rgb(48, 48, 48)',\n      paddingBottom: '6px',\n      paddingLeft: '12px',\n      paddingRight: '12px',\n      paddingTop: '6px',\n      marginRight: '2px',\n      marginBottom: '0px',\n      marginLeft: '0px',\n      marginTop: '0px',\n      alignItems: 'center',\n      borderRadius: '12px',\n    },\n  },\n} as T4DComponentConfig<ITagsProps>;\nexport interface ITagsProps extends webforms.ComponentProps {\n  enableAction?: boolean;\n  iconAction?: string;\n  iconLoader?: string;\n  componentWidth?: any;\n  componentHeight?: any;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_tags/Tags.render.tsx", "file_contents": "import {\n  EntityProvider,\n  useEnhancedEditor,\n  useRenderer,\n  useSources,\n  selectResolver,\n  useEnhancedNode,\n  useDataLoader,\n  useDsChangeHandler,\n  entitySubject,\n  EntityActions,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { ITagsProps } from './Tags.config';\nconst Tags: FC<ITagsProps> = ({\n  enableAction = true,\n  iconLoader,\n  iconAction,\n  iterator,\n  style,\n  componentWidth,\n  componentHeight,\n  className,\n  classNames = [],\n}) => {\n  const { connect, emit } = useRenderer({\n    omittedEvents: ['onclick', 'onclickaction'],\n    autoBindEvents: false,\n  });\n  const { id: nodeID } = useEnhancedNode();\n  const [selected, setSelected] = useState(-1);\n  const [_scrollIndex, setScrollIndex] = useState(0);\n  const [pageSize, setPageSize] = useState(100);\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const {\n    sources: { datasource: ds, currentElement: currentDs },\n  } = useSources({\n    acceptIteratorSel: true,\n  });\n  const [count, setCount] = useState(0);\n  const { setStep, page, entities, fetchIndex } = useDataLoader({\n    source: ds,\n  });\n  const { updateCurrentDsValue } = useDsChangeHandler({\n    source: ds,\n    currentDs,\n    selected,\n    setSelected,\n    setScrollIndex,\n    setCount,\n    fetchIndex,\n    onDsChange: (length, selected) => {\n      if (selected >= 0) {\n        updateCurrentDsValue({\n          index: selected < length ? selected : 0,\n          forceUpdate: true,\n        });\n      }\n    },\n    onCurrentDsChange: (selected) => {\n      entitySubject.next({\n        action: EntityActions.UPDATE,\n        payload: {\n          nodeID,\n          rowIndex: selected,\n        },\n      });\n    },\n  });\n  useEffect(() => {\n    if (count !== entities.length) {\n      fetchIndex(0);\n    }\n  }, [count]);\n  const loadMore = () => {\n    setStep({\n      start: 0,\n      end: page.end + pageSize,\n    });\n    fetchIndex(0);\n  };\n  const handleAction = async (e: any, index: number) => {\n    await updateCurrentDsValue({ index });\n    e.stopPropagation();\n    emit('onclickaction');\n  };\n  const handleClick = async (index: number) => {\n    setSelected(index);\n    await updateCurrentDsValue({ index });\n    emit('onclick');\n  };\n  useEffect(() => {\n    if (currentDs && selected === -1) {\n      try {\n        let index = -1;\n        if (currentDs.type === 'entity') {\n          index = (currentDs as any).getEntity()?.getPos();\n        } else if (\n          currentDs.type === 'scalar' &&\n          currentDs.dataType === 'object' &&\n          currentDs.parentSource\n        ) {\n          index = (currentDs as any).getPos();\n        }\n        if (index >= 0) {\n          setSelected(index);\n          setScrollIndex(index);\n        }\n      } catch (e) {\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (!ds) return;\n    const isScalarArray = ds.type === 'scalar' && ds.dataType === 'array';\n    const isRootIterator = !iterator?.includes('$') && !ds.parentSource;\n    if (!isScalarArray && isRootIterator) {\n      const pageSize = ds.getPageSize();\n      setPageSize(pageSize);\n      setStep({ start: 0, end: pageSize });\n    }\n    fetchIndex(0);\n  }, []);\n  return (\n    <div\n      ref={connect}\n      className={cn(className, classNames)}\n      style={{ width: componentWidth, height: componentHeight }}\n    >\n      {entities ? (\n        <>\n          {entities.map((_tag, index) => (\n            <div\n              className={`items-center space-x-2 ${selected === index && 'selected'}`}\n              style={style}\n              key={index}\n              onClick={() => handleClick(index)}\n            >\n              <EntityProvider\n                index={index}\n                selection={ds}\n                current={currentDs?.id}\n                iterator={iterator}\n              >\n                <Element\n                  is={resolver.Text}\n                  id=\"container\"\n                  className=\"fd-selectbox__container\"\n                  canvas\n                />\n              </EntityProvider>\n              {enableAction && (\n                <div\n                  className={cn('action cursor-pointer fa', iconAction)}\n                  onClick={(e) => handleAction(e, index)}\n                />\n              )}\n            </div>\n          ))}\n          {count > entities.length && (\n            <div\n              style={{ ...style, width: '' }}\n              className={cn('load-more cursor-pointer fa leading-normal', iconLoader)}\n              onClick={loadMore}\n            >\n              &#8203;\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <p>Error</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Tags;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_tags/Tags.settings.ts", "file_contents": "import { DEFAULT_ITERATOR, ESetting, ETextFieldModifier, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Qodly Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'iterator',\n    label: 'Iterate with',\n    type: ESetting.TEXT_FIELD,\n    modifier: ETextFieldModifier.ITERATOR,\n    placeholder: DEFAULT_ITERATOR,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst componentSettings: TSetting[] = [\n  {\n    key: 'componentWidth',\n    label: 'Component Width',\n    placeholder: 'Component Width',\n    type: ESetting.UNITFIELD,\n    isSmallInput: true,\n    hasLabel: true,\n  },\n  {\n    key: 'componentHeight',\n    label: 'Component Height',\n    placeholder: 'Component Height',\n    type: ESetting.UNITFIELD,\n    isSmallInput: true,\n    hasLabel: true,\n  },\n  {\n    key: 'iconLoader',\n    label: 'Load More Icon',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-solid fa-circle-chevron-down',\n  },\n  {\n    key: 'enableAction',\n    label: 'Enable Action',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'iconAction',\n    label: 'Action Icon',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-solid fa-xmark',\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n    isStateless: true,\n  },\n  {\n    key: 'componentProperties',\n    label: 'Component Properties',\n    type: ESetting.GROUP,\n    components: componentSettings,\n    isStateless: true,\n  },\n  ...load(DEFAULT_SETTINGS).filter('dataAccess', 'display'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...dataAccessSettings,\n  ...componentSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow', 'serverSideRef', 'display'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/index.tsx", "file_contents": "import TinyMceParser from './TinyMceParser';\nimport TinyMce from './TinyMce';\nexport default {\n  TinyMceParser,\n  TinyMce,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMce.build.tsx", "file_contents": "import cn from 'classnames';\nimport { useRef, useState, useEffect } from 'react';\nimport { ITinyMceProps } from './TinyMce.config';\nimport { useEnhancedNode } from '@ws-ui/webform-editor';\nimport { FC } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Editor as TinyMCEEditor } from 'tinymce';\nconst TinyMce: FC<ITinyMceProps> = ({\n  apiKey,\n  toolbarLocation,\n  style,\n  resize,\n  menubar,\n  inline,\n  readonly,\n  browserSpellcheck,\n  statusbar,\n  dark,\n  button,\n  datasource,\n  liteVersion,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const init = {\n    toolbar_location: toolbarLocation,\n    height: style?.height || '100%',\n    skin: dark ? 'oxide-dark' : 'oxide',\n    content_css: dark ? 'dark' : '',\n    width: style?.width || '100%',\n    resize: resize,\n    menubar: menubar,\n    inline: inline,\n    disabled: true,\n    browser_spellcheck: browserSpellcheck,\n    statusbar: statusbar,\n    autoresize_bottom_margin: 0, \n    plugins: [\n      'advlist',\n      'autolink',\n      'lists',\n      'link',\n      'image',\n      'charmap',\n      'preview',\n      'anchor',\n      'searchreplace',\n      'visualblocks',\n      'code',\n      'fullscreen',\n      'insertdatetime',\n      'media',\n      'table',\n      'code',\n      'emoticons',\n      resize ? 'autoresize' : '',\n    ],\n    setup: function (editor: any) {\n      button &&\n        editor.ui.registry.addButton('mySendButton', {\n          tooltip: 'Send Message',\n          text: 'Send',\n          onAction: function () {\n            alert(editor.getContent());\n            editor.resetContent();\n          },\n        });\n    },\n    toolbar: liteVersion\n      ? 'bold italic strikethrough link numlist bullist blockquote emoticons image | mySendButton'\n      : 'undo redo | blocks | bold italic underline strikethrough | fontfamily fontsize | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat  | charmap emoticons | fullscreen  preview save print | image media template link codesample | ltr rtl', \n  };\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey((prevKey) => prevKey + 1);\n  }, [\n    toolbarLocation,\n    resize,\n    readonly,\n    menubar,\n    inline,\n    browserSpellcheck,\n    statusbar,\n    style,\n    dark,\n    liteVersion,\n    button,\n  ]);\n  const editorRef = useRef<TinyMCEEditor | null>(null);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {apiKey && apiKey !== '' && datasource ? (\n        <Editor\n          disabled={true}\n          apiKey={apiKey}\n          onInit={(_evt, editor) => (editorRef.current = editor)}\n          initialValue=\"<p><em>Hello</em>, <span style='text-decoration: underline;'><strong>World!</strong></span></p>\" \n          init={init}\n          key={key}\n        />\n      ) : (\n        <div>\n          <p>{!apiKey && 'Please set you API Key !!!'}</p>\n          <p>{!datasource && 'Missing DataSource !!!'}</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default TinyMce;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMce.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport TinyMceSettings, { BasicSettings } from './TinyMce.settings';\nimport { GrTextWrap } from 'react-icons/gr';\nexport default {\n  craft: {\n    displayName: 'TinyMCE',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(TinyMceSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Tinymce',\n    exposed: true,\n    icon: GrTextWrap,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    apiKey: '',\n    style: {\n      height: '200px',\n      width: '100%',\n    },\n    toolbarLocation: 'top',\n    resize: false,\n    menubar: false,\n    inline: false,\n    readonly: false,\n    browserSpellcheck: false,\n    statusbar: false,\n    liteVersion: false,\n    dark: false,\n    button: false,\n  },\n} as T4DComponentConfig<ITinyMceProps>;\nexport interface ITinyMceProps extends webforms.ComponentProps {\n  apiKey: string;\n  toolbarLocation: 'top' | 'bottom' | 'auto';\n  resize: boolean;\n  menubar: boolean;\n  inline: boolean;\n  readonly: boolean;\n  browserSpellcheck: boolean;\n  statusbar: boolean;\n  liteVersion: boolean;\n  dark: boolean;\n  button: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMce.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useCallback } from 'react';\nimport { ITinyMceProps } from './TinyMce.config';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Editor as TinyMCEEditor } from 'tinymce';\nimport { useRef, useState } from 'react';\nimport { CgDanger } from 'react-icons/cg';\nimport { debounce } from 'lodash';\nconst Tinymce: FC<ITinyMceProps> = ({\n  apiKey,\n  toolbarLocation,\n  style,\n  resize,\n  menubar,\n  inline,\n  readonly,\n  browserSpellcheck,\n  statusbar,\n  dark,\n  button,\n  liteVersion,\n  className,\n  classNames = [],\n}) => {\n  const { connect, emit } = useRenderer({\n    omittedEvents: ['onchange'],\n  });\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const [value, setValue] = useState<string>(() => ds?.initialValue || '');\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const editorRef = useRef<TinyMCEEditor | null>(null);\n  const debouncedEmit = useCallback(debounce(emit, 300), []);\n  const handleChange = async (value: string) => {\n    if (ds) {\n      ds.setValue<string>(null, value);\n    } else {\n      setValue(value);\n    }\n    debouncedEmit('onchange');\n  };\n  const init = {\n    toolbar_location: toolbarLocation,\n    skin: dark ? 'oxide-dark' : 'oxide',\n    content_css: dark ? 'dark' : '',\n    height: style?.height || '100%',\n    width: style?.width || '100%',\n    resize: resize,\n    menubar: menubar,\n    inline: inline,\n    disabled: readonly,\n    browser_spellcheck: browserSpellcheck,\n    statusbar: statusbar,\n    autoresize_bottom_margin: 0, \n    plugins: [\n      'advlist',\n      'autolink',\n      'lists',\n      'link',\n      'image',\n      'charmap',\n      'preview',\n      'anchor',\n      'searchreplace',\n      'visualblocks',\n      'code',\n      'fullscreen',\n      'insertdatetime',\n      'media',\n      'table',\n      'code',\n      'emoticons',\n      resize ? 'autoresize' : '',\n    ],\n    setup: function (editor: any) {\n      button &&\n        editor.ui.registry.addButton('mySendButton', {\n          tooltip: 'Send Message',\n          text: 'Send',\n          onAction: function () {\n            alert(editor.getContent());\n            editor.resetContent();\n          },\n        });\n    },\n    toolbar: liteVersion\n      ? 'bold italic strikethrough link numlist bullist blockquote emoticons image | mySendButton'\n      : 'undo redo | blocks | bold italic underline strikethrough | fontfamily fontsize | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat  | charmap emoticons | fullscreen  preview save print | image media template link codesample | ltr rtl', \n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {apiKey && apiKey !== '' && ds ? (\n        <Editor\n          apiKey={apiKey}\n          onInit={(_evt, editor) => (editorRef.current = editor)}\n          initialValue={ds?.initialValue || ''}\n          value={value}\n          onEditorChange={() => {\n            handleChange(editorRef!.current!.getContent());\n          }}\n          init={init}\n        />\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <CgDanger className=\"mb-1 h-8 w-8\" />\n          <p>{!apiKey && 'Missing the APIKey'}</p>\n          <p>{!value && 'Missing datasource'}</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Tinymce;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMce.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport {\n  MdOutlineAutoMode,\n  MdAlignVerticalBottom,\n  MdOutlineAlignVerticalTop,\n} from 'react-icons/md';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'apiKey',\n    label: 'APIKey',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'toolbarLocation',\n    label: 'Toolbar Location',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'top',\n    options: [\n      { value: 'top', icon: MdOutlineAlignVerticalTop },\n      { value: 'bottom', icon: MdAlignVerticalBottom },\n      { value: 'auto', icon: MdOutlineAutoMode },\n    ],\n  },\n  {\n    key: 'resize',\n    label: 'Resize',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'menubar',\n    label: 'Menubar',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'inline',\n    label: 'Inline',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'readonly',\n    label: 'Readonly',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'browserSpellcheck',\n    label: 'Browser Spellcheck',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'statusbar',\n    label: 'Status Bar',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'liteVersion',\n    label: 'Lite Version',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'dark',\n    label: 'Dark Mode',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'button',\n    label: 'add Button',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter(\n    'appearance',\n    'style.overflow',\n    'color',\n    'background',\n    'font',\n    'borders',\n    'borderRadius',\n  ),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.color',\n    'style.backgroundColor',\n    'style.overflow',\n    'style.fontFamily',\n    'style.fontWeight',\n    'style.fontSize',\n    'style.textAlign',\n    'style.textTransform',\n    'border',\n    'borderRadius',\n    'display',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMceParser.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { ITinyMceParserProps } from './TinyMceParser.config';\nconst TinyMceParser: FC<ITinyMceParserProps> = ({\n  style,\n  datasource,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  return (\n    <span ref={connect} style={style} className={cn(className, classNames)}>\n      {datasource ? datasource : ' Your Fav TinyMCE Parser !!!}'}\n    </span>\n  );\n};\nexport default TinyMceParser;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMceParser.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineTextSnippet } from 'react-icons/md';\nimport TinyMceParserSettings, { BasicSettings } from './TinyMceParser.settings';\nexport default {\n  craft: {\n    displayName: 'TinyMCE Parser',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(TinyMceParserSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'TinyMCE Parser',\n    exposed: true,\n    icon: MdOutlineTextSnippet,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    iterableChild: true,\n  },\n} as T4DComponentConfig<ITinyMceParserProps>;\nexport interface ITinyMceParserProps extends webforms.ComponentProps {}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMceParser.css", "file_contents": ".no-tailwind {\n    all: revert;\n}\n.no-tailwind h1,\n.no-tailwind h2,\n.no-tailwind h3,\n.no-tailwind h4,\n.no-tailwind h5,\n.no-tailwind h6 {\n    font-size: revert;\n    font-weight: revert;\n}\n.no-tailwind ol,\n.no-tailwind ul {\n    list-style: revert;\n    margin: revert;\n    padding: revert;\n}\n.no-tailwind a {\n    color: revert;\n}\n.no-tailwind h1,\n.no-tailwind h2,\n.no-tailwind p{\n    margin: revert;\n}\n.no-tailwind td{\n    padding: 0.4rem;\n}\n.no-tailwind blockquote,\n.no-tailwind figure {\nmargin: 1em 40px;\n}\n.no-tailwind table {\n    border-collapse: collapse\n}\n.no-tailwind table:not([cellpadding]) td,table:not([cellpadding]) th {\n    padding: .4rem\n}\n.no-tailwind table[border]:not([border=\"0\"]):not([style*=border-width]) td,table[border]:not([border=\"0\"]):not([style*=border-width]) th {\n    border-width: 1px\n}\n.no-tailwind table[border]:not([border=\"0\"]):not([style*=border-style]) td,table[border]:not([border=\"0\"]):not([style*=border-style]) th {\n    border-style: solid\n}\n.no-tailwind table[border]:not([border=\"0\"]):not([style*=border-color]) td,table[border]:not([border=\"0\"]):not([style*=border-color]) th {\n    border-color: #ccc\n}\n.no-tailwind figure {\n    display: table;\n    margin: 1rem auto\n}\n.no-tailwind figure figcaption {\n    color: #999;\n    display: block;\n    margin-top: .25rem;\n    text-align: center\n}\n.no-tailwind hr {\n    border-color: #ccc;\n    border-style: solid;\n    border-width: 1px 0 0 0\n}\n.no-tailwind code {\n    background-color: #e8e8e8;\n    border-radius: 3px;\n    padding: .1rem .2rem\n}\n.no-tailwind:not([dir=rtl]) blockquote {\n    border-left: 2px solid #ccc;\n    margin-left: 1.5rem;\n    padding-left: 1rem\n}\n.no-tailwind[dir=rtl] blockquote {\n    border-right: 2px solid #ccc;\n    margin-right: 1.5rem;\n    padding-right: 1rem\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMceParser.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport parse from 'html-react-parser';\nimport { ITinyMceParserProps } from './TinyMceParser.config';\nimport './TinyMceParser.css';\nconst TinyMceParser: FC<ITinyMceParserProps> = ({ style, className, classNames = [] }) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState(() => '');\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      setValue(v || '');\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  return (\n    <span ref={connect} style={style} className={cn('no-tailwind', className, classNames)}>\n      {parse(value)}\n    </span>\n  );\n};\nexport default TinyMceParser;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qodly_TinyMCE/TinyMceParser.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/GridVirtualizer.tsx", "file_contents": "import { FC, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\nimport { EntityProvider } from '@ws-ui/webform-editor';\nimport { IVirtualizer } from './Virtualizer.config';\nimport { useWindowVirtualizer, useVirtualizer } from '@tanstack/react-virtual';\nconst GridVirtualizer: FC<IVirtualizer> = ({\n  style,\n  className,\n  classNames,\n  iterator,\n  connect,\n  selected,\n  ds,\n  currentDs,\n  parentRef,\n  count,\n  handleClick,\n  resolver,\n  styleboxWidth,\n}) => {\n  const parentOffsetRef = useRef(0);\n  const [parentWidth, setParentWidth] = useState(0);\n  const [columns, setColumns] = useState(0);\n  const [columnWidth, setColumnWidth] = useState(0);\n  useEffect(() => {\n    const handleResize = (entries: ResizeObserverEntry[]) => {\n      const { width } = entries[0].contentRect;\n      setParentWidth(width);\n    };\n    const resizeObserver = new ResizeObserver(handleResize);\n    if (parentRef.current) {\n      resizeObserver.observe(parentRef.current);\n      const { offsetWidth } = parentRef.current;\n      setParentWidth(offsetWidth);\n    }\n    return () => resizeObserver.disconnect(); \n  }, []);\n  useEffect(() => {\n    const calculateColumns = () => {\n      if (typeof styleboxWidth === 'string') {\n        if (styleboxWidth.includes('%')) {\n          const percentage = parseFloat(styleboxWidth) / 100;\n          const columnWidth = parentWidth * percentage;\n          setColumnWidth(columnWidth);\n          return Math.floor(parentWidth / columnWidth);\n        } else if (styleboxWidth.includes('px')) {\n          const fixedWidth = parseFloat(styleboxWidth);\n          setColumnWidth(fixedWidth);\n          return Math.floor(parentWidth / fixedWidth);\n        }\n      }\n      return columns;\n    };\n    const calculatedColumns = calculateColumns();\n    setColumns(calculatedColumns);\n  }, [styleboxWidth, parentWidth, columns]);\n  useLayoutEffect(() => {\n    parentOffsetRef.current = parentRef.current?.offsetTop ?? 0;\n  }, []);\n  const virtualizer = useVirtualizer({\n    count: Math.floor(count / columns) + 1,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 450,\n  });\n  const columnVirtualizer = useWindowVirtualizer({\n    count: columns,\n    scrollMargin: parentOffsetRef.current,\n    estimateSize: () => 35,\n  });\n  const columnItems = columnVirtualizer.getVirtualItems();\n  return (\n    <div\n      ref={connect}\n      style={style}\n      id=\"virtualizer\"\n      className={cn('w-fit h-fit', className, classNames)}\n    >\n      <div\n        ref={parentRef}\n        className=\"virtualizer-list\"\n        style={{ height: '100%', width: '100%', overflowY: 'auto' }}\n      >\n        <div\n          style={{\n            height: virtualizer.getTotalSize(),\n            position: 'relative',\n          }}\n        >\n          {virtualizer.getVirtualItems().map((row) => (\n            <div\n              key={row.key}\n              data-index={row.index}\n              ref={virtualizer.measureElement}\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: `translateY(${row.start - virtualizer.options.scrollMargin}px)`,\n                display: 'flex',\n              }}\n            >\n              {columnItems.map((column) => {\n                return (\n                  <div\n                    key={column.key}\n                    style={{\n                      width: columnWidth ? columnWidth : 'fit-content',\n                      height: 'fit-content',\n                    }}\n                    className={cn('virtualizer-item', {\n                      selected: row.index * columns + column.index === selected,\n                      'bg-purple-200': row.index * columns + column.index === selected,\n                      'virtualizer-item-odd': row.index * columns + (column.index % 2) === 0,\n                      'virtualizer-item-even': row.index * columns + (column.index % 2) === 1,\n                    })}\n                    onClick={() => handleClick(row.index * columns + column.index)}\n                  >\n                    {row.index * columns + column.index < count ? (\n                      <EntityProvider\n                        index={row.index * columns + column.index}\n                        selection={ds}\n                        current={currentDs?.id}\n                        iterator={iterator}\n                      >\n                        <Element\n                          id=\"element\"\n                          className=\"h-full w-full \"\n                          role=\"element\"\n                          is={resolver.StyleBox}\n                          canvas\n                        />\n                      </EntityProvider>\n                    ) : null}\n                  </div>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default GridVirtualizer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/HorizontalVirtualizer.tsx", "file_contents": "import { FC } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\nimport { EntityProvider } from '@ws-ui/webform-editor';\nimport { IVirtualizer } from './Virtualizer.config';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nconst HorizontalVirtualizer: FC<IVirtualizer> = ({\n  style,\n  className,\n  classNames,\n  iterator,\n  connect,\n  selected,\n  ds,\n  currentDs,\n  parentRef,\n  count,\n  handleClick,\n  resolver,\n}) => {\n  const virtualizer = useVirtualizer({\n    horizontal: true,\n    count: count,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 45,\n  });\n  const items = virtualizer.getVirtualItems();\n  return (\n    <div\n      ref={connect}\n      style={style}\n      id=\"virtualizer\"\n      className={cn('w-fit h-fit', className, classNames)}\n    >\n      <div\n        ref={parentRef}\n        className=\"virtualizer-list\"\n        style={{ height: '100%', width: '100%', overflowY: 'auto' }}\n      >\n        <div\n          style={{\n            width: virtualizer.getTotalSize(),\n            height: '100%',\n            position: 'relative',\n          }}\n        >\n          {items.map((virtualColumn) => (\n            <div\n              key={virtualColumn.key}\n              data-index={virtualColumn.index}\n              ref={virtualizer.measureElement}\n              className={cn('virtualizer-item', {\n                selected: virtualColumn.index === selected,\n                'bg-purple-200': virtualColumn.index === selected,\n                'virtualizer-item-odd': virtualColumn.index % 2 === 0,\n                'virtualizer-item-even': virtualColumn.index % 2 === 1,\n              })}\n              onClick={() => handleClick(virtualColumn.index)}\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                transform: `translateX(${virtualColumn.start}px)`,\n              }}\n            >\n              <EntityProvider\n                index={virtualColumn.index}\n                selection={ds}\n                current={currentDs?.id}\n                iterator={iterator}\n              >\n                <Element\n                  id=\"element\"\n                  className=\"h-full w-full \"\n                  role=\"element\"\n                  is={resolver.StyleBox}\n                  canvas\n                />\n              </EntityProvider>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default HorizontalVirtualizer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/index.tsx", "file_contents": "import Virtualizer from './Virtualizer';\nexport default {\n  Virtualizer,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/VerticalVirtualizer.tsx", "file_contents": "import { FC } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\nimport { EntityProvider } from '@ws-ui/webform-editor';\nimport { IVirtualizer } from './Virtualizer.config';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nconst VerticalVirtualizer: FC<IVirtualizer> = ({\n  style,\n  className,\n  classNames,\n  iterator,\n  connect,\n  selected,\n  ds,\n  currentDs,\n  parentRef,\n  handleClick,\n  resolver,\n  count,\n}) => {\n  const virtualizer = useVirtualizer({\n    count: count,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 45,\n  });\n  const items = virtualizer.getVirtualItems();\n  return (\n    <div\n      ref={connect}\n      style={style}\n      id=\"virtualizer\"\n      className={cn('w-fit h-fit', className, classNames)}\n    >\n      <div\n        ref={parentRef}\n        id=\"virtualizer-list\"\n        className=\"virtualizer-list\"\n        style={{\n          height: '100%',\n          width: '100%',\n          overflowY: 'auto',\n          contain: 'strict',\n        }}\n      >\n        <div\n          style={{\n            height: `${virtualizer.getTotalSize()}px`,\n            width: '100%',\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              transform: `translateY(${items[0]?.start ?? 0}px)`,\n            }}\n          >\n            {items.map((virtualRow) => (\n              <div\n                key={virtualRow.key}\n                data-index={virtualRow.index}\n                ref={virtualizer.measureElement}\n                className={cn('virtualizer-item', {\n                  selected: virtualRow.index === selected,\n                  'bg-purple-200': virtualRow.index === selected,\n                  'virtualizer-item-odd': virtualRow.index % 2 === 0,\n                  'virtualizer-item-even': virtualRow.index % 2 === 1,\n                })}\n                onClick={() => handleClick(virtualRow.index)}\n              >\n                <EntityProvider\n                  index={virtualRow.index}\n                  selection={ds}\n                  current={currentDs?.id}\n                  iterator={iterator}\n                >\n                  <Element\n                    id=\"element\"\n                    className=\"h-full w-full \"\n                    role=\"element\"\n                    is={resolver.StyleBox}\n                    canvas\n                  />\n                </EntityProvider>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default VerticalVirtualizer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/Virtualizer.build.tsx", "file_contents": "import {\n  selectResolver,\n  useDatasourceSub,\n  useEnhancedEditor,\n  useEnhancedNode,\n  IteratorProvider,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useCallback, useEffect, useRef } from 'react';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { IVirtualizerProps } from './Virtualizer.config';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { MdInfoOutline } from 'react-icons/md';\nimport set from 'lodash/set';\nconst Virtualizer: FC<IVirtualizerProps> = ({\n  orientation = 'vertical',\n  datasource,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    linkedNodes,\n    actions: { setProp },\n    connectors: { connect },\n  } = useEnhancedNode((node) => ({\n    linkedNodes: node.data.linkedNodes,\n    dom: node.dom,\n  }));\n  const { resolver, query } = useEnhancedEditor(selectResolver);\n  useDatasourceSub();\n  const container = linkedNodes.element ? query.node(linkedNodes.element).get() : null;\n  useEffect(() => {\n    if (orientation !== 'grid' || !container) return;\n    setProp((props: IVirtualizerProps) => {\n      set(props, 'styleboxWidth', container?.data.props?.style?.width);\n    });\n  }, [\n    orientation,\n    classNames,\n    style?.width,\n    style?.height,\n    container?.dom,\n    container?.data.props?.style?.width,\n    container?.data.props?.style?.height,\n    container?.data.nodes.length,\n  ]);\n  const parentRef = useRef(null);\n  const virtualizer = useVirtualizer({\n    horizontal: orientation === 'horizontal',\n    count: 10000,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => (orientation === 'horizontal' ? 100 : 45),\n    overscan: 5,\n  });\n  const items = virtualizer.getVirtualItems();\n  const VirtualizerView = useCallback(\n    ({ orientation }: IVirtualizerProps) => {\n      const isHorizontal = orientation === 'horizontal';\n      const isVertical = orientation === 'vertical';\n      const isGrid = orientation === 'grid';\n      return (\n        <div\n          ref={parentRef}\n          id=\"virtualizer-list\"\n          className=\"virtualizer-list\"\n          style={{\n            height: '100%',\n            width: '100%',\n            overflowY: isHorizontal || isGrid ? 'auto' : 'hidden',\n            overflowX: isVertical ? 'auto' : 'hidden',\n            position: 'relative',\n          }}\n        >\n          <div\n            style={{\n              height: isHorizontal || isGrid ? '100%' : 'auto',\n              width: isVertical || isGrid ? '100%' : 'auto',\n              position: 'relative',\n              transform: isHorizontal\n                ? `translateX(${items[0]?.start ?? 0}px)`\n                : isVertical\n                  ? `translateY(${items[0]?.start ?? 0}px)`\n                  : 'none',\n            }}\n          >\n            {items.map((virtualRow) => (\n              <div\n                key={virtualRow.key}\n                data-index={virtualRow.index}\n                className={`virtualizer-item h-full ${virtualRow.index % 2 === 0 ? 'virtualizer-item-odd' : 'virtualizer-item-even'}`}\n                style={{\n                  position: 'relative',\n                  height: isGrid || isHorizontal ? '100%' : 'auto',\n                }}\n              >\n                {virtualRow.index === 0 ? (\n                  <IteratorProvider>\n                    <Element\n                      id=\"element\"\n                      style={{\n                        width: isHorizontal ? 'fit-content' : isGrid ? '200px' : '100%',\n                        height: isVertical ? 'fit-content' : isGrid ? '200px' : '100%',\n                        minWidth: isHorizontal ? '150px' : 'auto',\n                        minHeight: isVertical ? '100px' : 'auto',\n                      }}\n                      role=\"element\"\n                      is={resolver.StyleBox}\n                      deletable={false}\n                      canvas\n                    />\n                  </IteratorProvider>\n                ) : null}\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    },\n    [items],\n  );\n  const EmptyState = () => (\n    <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n      <MdInfoOutline className=\"mb-1 h-8 w-8\" />\n      <p>Please attach a Qodly Source</p>\n    </div>\n  );\n  return (\n    <div\n      ref={connect}\n      style={style}\n      id=\"virtualizer\"\n      className={cn('virtualizer w-fit h-fit border border-gray-300', className, classNames)}\n    >\n      {datasource ? <VirtualizerView orientation={orientation} /> : <EmptyState />}\n    </div>\n  );\n};\nexport default Virtualizer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/Virtualizer.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdViewDay } from 'react-icons/md';\nimport VirtualizerSettings, { BasicSettings } from './Virtualizer.settings';\nexport default {\n  craft: {\n    displayName: 'Virtualizer',\n    kind: EComponentKind.BASIC,\n    props: {\n      iterable: true,\n      orientation: 'vertical',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(VirtualizerSettings, BasicSettings),\n    },\n  },\n  info: {\n    settings: VirtualizerSettings,\n    displayName: 'Virtualizer',\n    exposed: true,\n    icon: MdViewDay,\n    sanityCheck: {\n      keys: [\n        { name: 'datasource', require: true, isDatasource: true },\n        { name: 'currentElement', require: false, isDatasource: true },\n      ],\n    },\n    requiredFields: {\n      keys: ['datasource'],\n      all: false,\n    },\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Select',\n        value: 'onselect',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      declarations: [{ key: 'datasource', iterable: true }, { key: 'currentElement' }],\n    },\n  },\n  defaultProps: {\n    orientation: 'vertical',\n    classNames: [],\n    iterable: true,\n    style: {\n      height: `300px`,\n      width: `400px`,\n    },\n  },\n} as T4DComponentConfig<IVirtualizerProps>;\nexport interface IVirtualizerProps extends webforms.ComponentProps {\n  orientation?: 'horizontal' | 'vertical' | 'grid';\n  styleboxWidth?: number | string;\n}\nexport interface IVirtualizer extends webforms.ComponentProps {\n  connect: (ref: any, omit?: string[]) => any;\n  selected: number;\n  handleClick: (index: number) => void;\n  ds: datasources.DataSource;\n  currentDs: datasources.DataSource;\n  parentRef: any;\n  resolver: any;\n  count: number;\n  styleboxWidth?: number | string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/Virtualizer.render.tsx", "file_contents": "import {\n  selectResolver,\n  useEnhancedEditor,\n  useEnhancedNode,\n  useRenderer,\n  useSources,\n  useDataLoader,\n  useDsChangeHandler,\n  entitySubject,\n  EntityActions,\n} from '@ws-ui/webform-editor';\nimport { FC, useRef, useState } from 'react';\nimport { IVirtualizerProps } from './Virtualizer.config';\nimport VerticalVirtualizer from './VerticalVirtualizer';\nimport HorizontalVirtualizer from './HorizontalVirtualizer';\nimport GridVirtualizer from './GridVirtualizer';\nconst Virtualizer: FC<IVirtualizerProps> = ({\n  orientation = 'vertical',\n  iterator,\n  style,\n  className,\n  classNames = [],\n  styleboxWidth,\n}) => {\n  const { connect, emit } = useRenderer();\n  const { id: nodeID } = useEnhancedNode();\n  const parentRef = useRef(null);\n  const [selected, setSelected] = useState(-1);\n  const [_scrollIndex, setScrollIndex] = useState(0);\n  const [count, setCount] = useState(0);\n  const {\n    sources: { datasource: ds, currentElement: currentDs },\n  } = useSources({ acceptIteratorSel: true });\n  const { fetchIndex } = useDataLoader({\n    source: ds,\n  });\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const { updateCurrentDsValue } = useDsChangeHandler({\n    source: ds,\n    currentDs,\n    selected,\n    setSelected,\n    setScrollIndex,\n    setCount,\n    fetchIndex,\n    onDsChange: (length, selected) => {\n      if (selected >= 0) {\n        updateCurrentDsValue({\n          index: selected < length ? selected : 0,\n          forceUpdate: true,\n        });\n      }\n    },\n    onCurrentDsChange: (selected) => {\n      entitySubject.next({\n        action: EntityActions.UPDATE,\n        payload: {\n          nodeID,\n          index: selected,\n        },\n      });\n    },\n  });\n  const handleClick = async (index: number) => {\n    setSelected(index);\n    await updateCurrentDsValue({ index });\n    emit!('onselect');\n  };\n  switch (orientation) {\n    case 'vertical':\n      return (\n        <VerticalVirtualizer\n          connect={connect}\n          iterator={iterator}\n          style={style}\n          className={className}\n          classNames={classNames}\n          selected={selected}\n          ds={ds}\n          currentDs={currentDs}\n          parentRef={parentRef}\n          count={count}\n          handleClick={handleClick}\n          resolver={resolver}\n        />\n      );\n    case 'horizontal':\n      return (\n        <HorizontalVirtualizer\n          connect={connect}\n          iterator={iterator}\n          style={style}\n          className={className}\n          classNames={classNames}\n          selected={selected}\n          ds={ds}\n          currentDs={currentDs}\n          parentRef={parentRef}\n          count={count}\n          handleClick={handleClick}\n          resolver={resolver}\n        />\n      );\n    case 'grid':\n      return (\n        <GridVirtualizer\n          connect={connect}\n          iterator={iterator}\n          style={style}\n          className={className}\n          classNames={classNames}\n          selected={selected}\n          ds={ds}\n          currentDs={currentDs}\n          parentRef={parentRef}\n          count={count}\n          handleClick={handleClick}\n          resolver={resolver}\n          styleboxWidth={styleboxWidth}\n        />\n      );\n    default:\n      return null;\n  }\n};\nexport default Virtualizer;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_virtualizer/Virtualizer.settings.ts", "file_contents": "import { DEFAULT_ITERATOR, ESetting, ETextFieldModifier, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { validateServerSide } from '@ws-ui/shared';\nimport { PiArrowsInLineHorizontal, PiArrowsInLineVertical, PiGridNineFill } from 'react-icons/pi';\nconst commonSettings: TSetting[] = [\n  {\n    label: 'Orientation',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'vertical',\n    key: 'orientation',\n    multiple: false,\n    options: [\n      {\n        value: 'horizontal',\n        tooltip: 'Horizontal',\n        icon: PiArrowsInLineHorizontal,\n      },\n      {\n        value: 'vertical',\n        tooltip: 'Vertical',\n        icon: PiArrowsInLineVertical,\n      },\n      {\n        value: 'grid',\n        tooltip: 'Grid',\n        icon: PiGridNineFill,\n      },\n    ],\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Qodly Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'iterator',\n    label: 'Iterate with',\n    type: ESetting.TEXT_FIELD,\n    modifier: ETextFieldModifier.ITERATOR,\n    placeholder: DEFAULT_ITERATOR,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    hasError: validateServerSide,\n    validateOnEnter: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n    isStateless: true,\n  },\n  ...load(DEFAULT_SETTINGS).filter('dataAccess'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...dataAccessSettings,\n  ...load(BASIC_SETTINGS).filter('serverSideRef'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_webCam/index.tsx", "file_contents": "import WebCam from './WebCam';\nexport default {\n  WebCam,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_webCam/WebCam.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { MdOutlinePhotoCamera } from 'react-icons/md';\nimport { IWebCamProps } from './WebCam.config';\nconst WebCam: FC<IWebCamProps> = ({ style, className, classNames = [] }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  return (\n    <div\n      ref={connect}\n      style={style}\n      className={cn(\n        'webCamContainer',\n        'flex items-center justify-center space-x-4',\n        className,\n        classNames,\n      )}\n    >\n      <button className=\"buttonCapture p-3 bg-gray-200 rounded-full border-2 border-gray-300\">\n        <MdOutlinePhotoCamera className=\"iconCapture w-10 h-10 text-gray-600\" />\n      </button>\n    </div>\n  );\n};\nexport default WebCam;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_webCam/WebCam.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlinePhotoCamera } from 'react-icons/md';\nimport WebCamSettings, { BasicSettings } from './WebCam.settings';\nexport default {\n  craft: {\n    displayName: 'WebCam',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(WebCamSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'WebCam',\n    exposed: true,\n    icon: MdOutlinePhotoCamera,\n    events: [\n      {\n        label: 'On Capture',\n        value: 'oncapture',\n      },\n    ],\n    datasources: {\n      accept: ['image'],\n    },\n  },\n  defaultProps: {\n    mirrored: false,\n    style: {\n      width: '450px',\n      height: '300px',\n      backgroundColor: 'rgb(243 244 246)',\n      borderRadius: '0.5rem',\n      borderWidth: '1px',\n      borderColor: 'rgb(209 213 219)',\n    },\n  },\n} as T4DComponentConfig<IWebCamProps>;\nexport interface IWebCamProps extends webforms.ComponentProps {\n  mirrored?: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_webCam/WebCam.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useRef, useCallback, useState, useEffect } from 'react';\nimport { MdOutlinePhotoCamera, MdOutlineCameraswitch } from 'react-icons/md';\nimport { IWebCamProps } from './WebCam.config';\nimport Webcam from 'react-webcam';\nconst WebCam: FC<IWebCamProps> = ({ mirrored, style, className, classNames = [] }) => {\n  const { connect, emit } = useRenderer();\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const [facingMode, setFacingMode] = useState('environment');\n  const [cameraAccess, setCameraAccess] = useState(false);\n  const webcamRef = useRef<Webcam>(null);\n  function dataURLtoFile(dataurl: string, filename: string) {\n    var arr = dataurl.split(','),\n      bstr = atob(arr[arr.length - 1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, { type: 'image/jpeg' });\n  }\n  const capture = useCallback(async () => {\n    if (webcamRef.current) {\n      const imageSrc = webcamRef.current.getScreenshot();\n      if (imageSrc && ds) {\n        try {\n          const imageFile = dataURLtoFile(imageSrc, 'captured_photo.jpg');\n          await ds.setValue<any>(null, imageFile);\n          emit('oncapture');\n        } catch (error) {\n          console.error('Error updating datasource:', error);\n        }\n      } else {\n        console.error('Failed to capture image or datasource is not available.');\n      }\n    }\n  }, [webcamRef, ds]);\n  const switchCamera = useCallback(() => {\n    setFacingMode((prevState) => (prevState === 'user' ? 'environment' : 'user'));\n  }, []);\n  useEffect(() => {\n    const checkCameraAccess = async () => {\n      try {\n        await navigator.mediaDevices.getUserMedia({ video: true });\n        setCameraAccess(true);\n      } catch (error) {\n        console.error('Camera access denied or not available:', error);\n        setCameraAccess(false);\n      }\n    };\n    checkCameraAccess();\n  }, []);\n  return (\n    <div\n      ref={connect}\n      style={style}\n      className={cn('webCamContainer relative overflow-hidden', className, classNames)}\n    >\n      {cameraAccess ? (\n        <>\n          <Webcam\n            className=\"webCam\"\n            mirrored={mirrored}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            screenshotQuality={1}\n            videoConstraints={{ facingMode }}\n          />\n          <div className=\"buttonsBloc flex flex-row w-full justify-around absolute bottom-0 p-4\">\n            <button\n              onClick={switchCamera}\n              className=\"buttonSwicth p-3 bg-gray-200 rounded-full border-2 border-gray-300\"\n            >\n              <MdOutlineCameraswitch className=\"iconSwitch w-10 h-10 text-gray-600\" />\n            </button>\n            <button\n              onClick={capture}\n              className=\"buttonCapture p-3 bg-gray-200 rounded-full border-2 border-gray-300\"\n            >\n              <MdOutlinePhotoCamera className=\"iconCapture w-10 h-10 text-gray-600\" />\n            </button>\n          </div>\n        </>\n      ) : (\n        <div className=\"flex h-full flex-col items-center justify-center rounded-lg border bg-purple-400 py-4 text-white\">\n          <p>Camera access is denied or unavailable.</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default WebCam;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qodly_webCam/WebCam.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'mirrored',\n    label: 'Mirrored',\n    type: ESetting.CHECKBOX,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qoldy_avatarGroup/AvatarGroup.build.tsx", "file_contents": "import cn from 'classnames';\nimport { IAvatarGroupProps } from './AvatarGroup.config';\nimport { useEnhancedNode, useDatasourceSub } from '@ws-ui/webform-editor';\nimport { FC, CSSProperties } from 'react';\nconst AvatarGroup: FC<IAvatarGroupProps> = ({\n  style,\n  className,\n  classNames = [],\n  maxLength = 3,\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  useDatasourceSub();\n  const avatarStyle: CSSProperties = {\n    marginRight: style?.marginRight || '-40px',\n    borderWidth: style?.borderWidth || '3px',\n    borderColor: style?.borderColor || 'white',\n    borderStyle: style?.borderStyle || 'solid',\n    marginLeft: style?.marginLeft || '0px',\n    display: style?.display || 'flex',\n    justifyContent: style?.justifyContent || 'center',\n    alignItems: style?.alignItems || 'center',\n    width: style?.width || style?.height || '100px',\n    height: style?.height || style?.width || '100px',\n    borderRadius: style?.borderRadius || '50%',\n    backgroundColor: style?.backgroundColor || '#E6EAF4',\n    color: style?.color || '#767B87',\n    fontSize: style?.fontSize || '24px',\n  };\n  const avatarsCol = [\n    {\n      name: 'John Doe',\n      image: '',\n    },\n    {\n      name: 'John Doe',\n      image: '',\n    },\n    {\n      name: 'John Doe',\n      image: '',\n    },\n  ];\n  const getInitials = (name: string) => {\n    const words = name.split(' ');\n    if (words.length > 2) {\n      const haveMiddleName = words\n        .map((word) => word.charAt(0).toUpperCase())\n        .join('')\n        .substring(0, 4);\n      const resultInitialName = haveMiddleName.split('');\n      return `${resultInitialName[0]}${resultInitialName[resultInitialName.length - 1]}`;\n    }\n    return words\n      .map((word) => word.charAt(0).toUpperCase())\n      .join('')\n      .substring(0, 2);\n  };\n  const renderAvatars = () => {\n    const remainingCount = avatarsCol.length - maxLength;\n    const avatarsToRender = avatarsCol.slice(0, maxLength);\n    const avatars = avatarsToRender.map(({ name, image }, index) => {\n      const initials = getInitials(name);\n      return (\n        <div key={`avatar-${index}`} className=\"inline-block\" data-testid=\"avatar-initial\">\n          {image ? (\n            <div\n              style={{\n                ...avatarStyle,\n                backgroundImage: `url(${image})`,\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n                color: 'transparent',\n              }}\n              data-testid=\"avatar-initial-text\"\n            >\n              {initials}\n            </div>\n          ) : (\n            <div style={avatarStyle} data-testid=\"avatar-initial-text\">\n              {initials}\n            </div>\n          )}\n        </div>\n      );\n    });\n    if (remainingCount > 0) {\n      avatars.push(\n        <div key=\"avatar-remaining\" data-testid=\"avatar-initial-text\" className=\"inline-block\">\n          <div data-testid=\"avatar-initial-item\" style={avatarStyle}>\n            +{remainingCount}\n          </div>\n        </div>,\n      );\n    }\n    return avatars;\n  };\n  return (\n    <div ref={connect} className={cn(className, classNames)}>\n      {renderAvatars()}\n    </div>\n  );\n};\nexport default AvatarGroup;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qoldy_avatarGroup/AvatarGroup.config.tsx", "file_contents": "import {\n  EComponentKind,\n  splitDatasourceID,\n  T4DComponentConfig,\n  T4DComponentDatasourceDeclaration,\n} from '@ws-ui/webform-editor';\nimport {\n  Settings,\n  isDatasourcePayload,\n  getDataTransferSourceID,\n  isAttributePayload,\n} from '@ws-ui/webform-editor';\nimport {\n  isArrayDatasource,\n  isEntitySelectionDatasource,\n  isRelatedEntitiesAttribute,\n} from '@ws-ui/shared';\nimport cloneDeep from 'lodash/cloneDeep';\nimport AvatarGroupSettings, { BasicSettings } from './AvatarGroup.settings';\nimport { RxAvatar } from 'react-icons/rx';\nexport default {\n  craft: {\n    displayName: 'Avatar Group',\n    rules: {\n      canDrag: () => true,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      iterable: true,\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(AvatarGroupSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Avatar Group',\n    sanityCheck: {\n      keys: [{ name: 'datasource', require: true, isDatasource: true }],\n    },\n    exposed: true,\n    icon: RxAvatar,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      declarations: (props) => {\n        const { image, title, datasource = '' } = props as IAvatarGroupProps;\n        const declarations: T4DComponentDatasourceDeclaration[] = [\n          { path: datasource, iterable: true },\n        ];\n        const { id: ds, namespace } = splitDatasourceID(datasource?.trim()) || {};\n        if (image) {\n          const imageSrc = `${ds}.[].${image}`;\n          declarations.push({\n            path: namespace ? `${namespace}:${imageSrc}` : imageSrc,\n            iterable: true,\n          });\n        }\n        if (title) {\n          const titleSrc = `${ds}.[].${title}`;\n          declarations.push({\n            path: namespace ? `${namespace}:${titleSrc}` : titleSrc,\n            iterable: true,\n          });\n        }\n        return declarations;\n      },\n      set: (nodeId, query, payload) => {\n        const new_props = cloneDeep(query.node(nodeId).get().data.props) as IAvatarGroupProps;\n        payload.forEach((item) => {\n          if (isDatasourcePayload(item)) {\n            if (isEntitySelectionDatasource(item.source) || isArrayDatasource(item.source)) {\n              new_props.datasource = getDataTransferSourceID(item);\n            }\n          } else if (isAttributePayload(item)) {\n            if (isRelatedEntitiesAttribute(item.attribute)) {\n              new_props.datasource = getDataTransferSourceID(item);\n            } else {\n              if (item.attribute.type === 'image') {\n                new_props.image = item.attribute.name || '';\n              }\n              if (item.attribute.type === 'string') {\n                new_props.title = item.attribute.name || '';\n              }\n            }\n          }\n        });\n        return {\n          [nodeId]: new_props,\n        };\n      },\n    },\n  },\n  defaultProps: {\n    maxLength: 10,\n    iterableChild: true,\n  },\n} as T4DComponentConfig<IAvatarGroupProps>;\nexport interface IAvatarGroupProps extends webforms.ComponentProps {\n  maxLength?: number;\n  image?: string;\n  title?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qoldy_avatarGroup/AvatarGroup.render.tsx", "file_contents": "import { useRenderer, useSources, useDataLoader } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, CSSProperties } from 'react';\nimport { IAvatarGroupProps } from './AvatarGroup.config';\nconst AvatarGroup: FC<IAvatarGroupProps> = ({\n  maxLength = 3,\n  image = '',\n  title = '',\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [length, setLength] = useState(() => 0);\n  const {\n    sources: { datasource: ds },\n  } = useSources({ acceptIteratorSel: true });\n  const { entities, fetchIndex } = useDataLoader({\n    source: ds,\n  });\n  useEffect(() => {\n    const fetch = async () => {\n      const selLength = await ds.getValue('length');\n      setLength(selLength);\n      await fetchIndex(0);\n    };\n    fetch();\n    ds.addListener('changed', fetch);\n    return () => {\n      ds.removeListener('changed', fetch);\n    };\n  }, []);\n  const avatarStyle: CSSProperties = {\n    marginRight: style?.marginRight || '-40px',\n    borderWidth: style?.borderWidth || '3px',\n    borderColor: style?.borderColor || 'white',\n    borderStyle: style?.borderStyle || 'solid',\n    marginLeft: style?.marginLeft || '0px',\n    display: style?.display || 'flex',\n    justifyContent: style?.justifyContent || 'center',\n    alignItems: style?.alignItems || 'center',\n    width: style?.width || style?.height || '100px',\n    height: style?.height || style?.width || '100px',\n    borderRadius: style?.borderRadius || '50%',\n    backgroundColor: style?.backgroundColor || '#E6EAF4',\n    color: style?.color || '#767B87',\n    fontSize: style?.fontSize || '24px',\n  };\n  const getInitials = (name: string) => {\n    const words = name.split(' ');\n    if (words.length > 2) {\n      const haveMiddleName = words\n        .map((word) => word.charAt(0).toUpperCase())\n        .join('')\n        .substring(0, 4);\n      const resultInitialName = haveMiddleName.split('');\n      return `${resultInitialName[0]}${resultInitialName[resultInitialName.length - 1]}`;\n    }\n    return words\n      .map((word) => word.charAt(0).toUpperCase())\n      .join('')\n      .substring(0, 2);\n  };\n  const renderAvatars = () => {\n    const remainingCount = length - maxLength;\n    const avatarsToRender = entities.slice(0, maxLength);\n    const avatars = avatarsToRender.map((entity, index) => {\n      const initials =\n        entity[title as keyof typeof entity] &&\n        getInitials(entity[title as keyof typeof entity] as string);\n      let imageObjec = entity[image as keyof typeof entity] as any;\n      return (\n        <div key={`avatar-${index}`} className=\"inline-block\" data-testid=\"avatar-initial\">\n          {imageObjec?.__deferred?.image ? (\n            <div\n              style={{\n                ...avatarStyle,\n                backgroundImage: `url(${imageObjec?.__deferred?.uri})`,\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n                color: 'transparent',\n              }}\n              data-testid=\"avatar-initial-text\"\n            >\n              {initials}\n            </div>\n          ) : (\n            <div style={avatarStyle} data-testid=\"avatar-initial-text\">\n              {initials}\n            </div>\n          )}\n        </div>\n      );\n    });\n    if (remainingCount > 0) {\n      avatars.push(\n        <div key=\"avatar-remaining\" data-testid=\"avatar-initial-text\" className=\"inline-block\">\n          <div data-testid=\"avatar-initial-item\" style={avatarStyle}>\n            +{remainingCount}\n          </div>\n        </div>,\n      );\n    }\n    return avatars;\n  };\n  return (\n    <div ref={connect} className={cn(className, classNames)}>\n      {renderAvatars()}\n    </div>\n  );\n};\nexport default AvatarGroup;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qoldy_avatarGroup/AvatarGroup.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'image',\n    label: 'Image',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'title',\n    label: 'Title',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'maxLength',\n    label: 'Max Length',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 3,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/Qoldy_avatarGroup/index.tsx", "file_contents": "import AvatarGroup from './AvatarGroup';\nexport default {\n  AvatarGroup,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/FractionRating.tsx", "file_contents": "import cn from \"classnames\";\nimport { FC, CSSProperties, MouseEvent } from \"react\";\ninterface IFractionRatingProps extends webforms.ComponentProps {\n  value: number;\n  onClickCallback: (value: number) => void;\n  onMouseEvent: (value: number | undefined) => void;\n  step?: number;\n  hover: number | undefined;\n  stepper: number;\n  icon?: string;\n  min?: number;\n  max?: number;\n  readOnly?: boolean;\n  direction?: string;\n  fullColor?: string;\n  emptyColor?: string;\n}\nconst FractionRating: FC<IFractionRatingProps> = ({\n  className,\n  onClickCallback,\n  onMouseEvent,\n  max = 5,\n  readOnly,\n  step,\n  value,\n  hover,\n  stepper,\n  classNames = [],\n  icon,\n  direction = \"ltr\",\n  style,\n  fullColor,\n  emptyColor,\n}) => {\n  const calculateDisplayValue = (index: number, event: MouseEvent) => {\n    const percentage = calculateHoverPercentage(event);\n    const fraction = Math.ceil((percentage % 1) * stepper) / stepper;\n    const precision = 10 ** 3;\n    const displayValue =\n      (index +\n        (Math.floor(percentage) +\n          Math.floor(fraction * precision) / precision)) *\n      stepper;\n    return displayValue > 0\n      ? displayValue > max\n        ? max\n        : displayValue\n      : 1 / stepper;\n  };\n  const calculateHoverPercentage = (event: MouseEvent) => {\n    const clientX = event.clientX;\n    const targetRect = event.currentTarget.getBoundingClientRect();\n    const delta =\n      direction === \"rtl\"\n        ? targetRect.right - clientX\n        : clientX - targetRect.left;\n    return delta < 0 ? 0 : delta / targetRect.width;\n  };\n  const ratingParentStyle: CSSProperties = {\n    cursor: readOnly ? \"default\" : \"pointer\",\n    display: \"flex\",\n    position: \"relative\",\n  };\n  return (\n    <div style={style} className={cn(\"inline-flex\")} dir={direction}>\n      {[...Array(step)].map((_star, index) => {\n        return (\n          <label\n            key={index}\n            style={ratingParentStyle}\n            onClick={(event) => {\n              const result = calculateDisplayValue(index, event);\n              onClickCallback(result);\n            }}\n            onMouseMove={(event) => {\n              const result = calculateDisplayValue(index, event);\n              onMouseEvent(result);\n            }}\n            onMouseLeave={() => {\n              onMouseEvent(undefined);\n            }}\n          >\n            <span\n              style={{ color: emptyColor }}\n              className={cn(\n                \"fa fd-component\",\n                \"fd-icon\",\n                {\n                  invisible: (hover || value) >= (index + 1) * stepper,\n                },\n                icon,\n                classNames,\n                className\n              )}\n            ></span>\n            <span\n              style={{\n                color: fullColor,\n                width:\n                  (hover || value) >= (index + 1) * stepper\n                    ? \"100%\"\n                    : (index + 1) * stepper - (hover || value) < stepper\n                    ? readOnly\n                      ? `${((value / stepper) % 1) * 100}%`\n                      : \"50%\"\n                    : \"0%\",\n              }}\n              className={cn(\n                \"fa fd-component\",\n                \"fd-icon\",\n                \"rating\",\n                \"overflow-hidden\",\n                \"absolute\",\n                icon,\n                classNames,\n                className\n              )}\n            ></span>\n          </label>\n        );\n      })}\n    </div>\n  );\n};\nexport default FractionRating;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/FractionRatingSVG.tsx", "file_contents": "import cn from \"classnames\";\nimport { FC } from \"react\";\nimport Star from \"./Star\";\ninterface IFractionRatingProps extends webforms.ComponentProps {\n  value: number;\n  onClickCallback: (value: number) => void;\n  step?: number;\n  stepper: number;\n  icon?: string;\n  min?: number;\n  max?: number;\n}\nconst FractionRating: FC<IFractionRatingProps> = ({\n  className,\n  onClickCallback,\n  value,\n  step,\n  stepper,\n  classNames = [],\n  min,\n  max,\n}) => {\n  const starRatedColor = \"rgb(224, 51, 230)\";\n  const starEmptyColor = \"rgb(66, 8, 68)\";\n  const fillId = `fillRandom${Math.random().toFixed(15).slice(2)}`;\n  const fraction = () => {\n    const offset = (value / stepper).toFixed(2).split(\".\")[1].slice(0, 2);\n    return offset;\n  };\n  return (\n    <label className=\"flex\">\n      <input\n        type=\"range\"\n        id=\"volume\"\n        name=\"volume\"\n        min={min}\n        max={max}\n        step={stepper / 4}\n        value={value}\n        onChange={(_event) => onClickCallback(parseInt(_event.target?.value))}\n      />\n      <svg\n        className=\"star-grad\"\n        style={{\n          position: \"absolute\",\n          zIndex: 0,\n          width: \"0\",\n          height: \"0\",\n          visibility: \"hidden\",\n        }}\n      >\n        <defs>\n          <linearGradient id={fillId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop\n              offset=\"0%\"\n              className=\"stop-color-first\"\n              style={{\n                stopColor: starRatedColor,\n                stopOpacity: 1,\n              }}\n            />\n            <stop\n              offset={`${fraction()}%`}\n              className=\"stop-color-first\"\n              style={{\n                stopColor: starRatedColor,\n                stopOpacity: 1,\n              }}\n            />\n            <stop\n              offset={`${fraction()}%`}\n              className=\"stop-color-final\"\n              style={{\n                stopColor: starEmptyColor,\n                stopOpacity: 1,\n              }}\n            />\n            <stop\n              offset=\"100%\"\n              className=\"stop-color-final\"\n              style={{\n                stopColor: starEmptyColor,\n                stopOpacity: 1,\n              }}\n            />\n          </linearGradient>\n        </defs>\n      </svg>\n      {[...Array(step)].map((_star, index) => {\n        const itr = (index + 1) * stepper;\n        return value >= itr ? (\n          <Star\n            fillId={\"fillId\"}\n            isActive\n            starRatedColor={starRatedColor}\n            starEmptyColor={starEmptyColor}\n            key={index}\n            className={cn(classNames, className)}\n          />\n        ) : itr - value < stepper ? (\n          <Star\n            fillId={fillId}\n            key={index}\n            isFraction={true}\n            className={cn(classNames, className)}\n          />\n        ) : (\n          <Star\n            fillId={fillId}\n            starRatedColor={starRatedColor}\n            starEmptyColor={starEmptyColor}\n            key={index}\n            className={cn(classNames, className)}\n          />\n        );\n      })}\n    </label>\n  );\n};\nexport default FractionRating;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/index.tsx", "file_contents": "import Rating from './Rating';\nexport default {\n  Rating,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/Rating.build.tsx", "file_contents": "import cn from \"classnames\";\nimport { IRatingProps } from \"./Rating.config\";\nimport { useEnhancedNode } from \"@ws-ui/webform-editor\";\nimport { FC } from \"react\";\nconst Rating: FC<IRatingProps> = ({\n  icon,\n  style,\n  className,\n  step = 5,\n  classNames = [],\n  fullColor = \"rgb(255, 215, 0)\",\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  return (\n    <div ref={connect} style={style}>\n      {[...Array(step)].map((_star, index) => {\n        return (\n          <span\n            key={index}\n            style={{ color: fullColor }}\n            className={cn(\n              \"fa fd-component\",\n              \"fd-icon\",\n              icon,\n              classNames,\n              className\n            )}\n          ></span>\n        );\n      })}\n    </div>\n  );\n};\nexport default Rating;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/Rating.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport RatingSettings, { BasicSettings } from './Rating.settings';\nimport { FaRegStar } from 'react-icons/fa';\nexport default {\n  craft: {\n    displayName: 'Rating',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(RatingSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Rating',\n    exposed: true,\n    icon: FaRegStar,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['number'],\n    },\n  },\n  defaultProps: {\n    icon: 'fa-star',\n    direction: 'ltr',\n    fullColor: 'rgb(255, 215, 0)',\n    emptyColor: 'rgb(243, 243, 243)',\n  },\n} as T4DComponentConfig<IRatingProps>;\nexport interface IRatingProps extends webforms.ComponentProps {\n  start?: number;\n  stop?: number;\n  step?: number;\n  readOnly?: boolean;\n  halfFillMode?: boolean;\n  style?: React.CSSProperties;\n  icon?: string;\n  direction?: string;\n  fullColor?: string;\n  emptyColor?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/Rating.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport { FC, useEffect, useState } from 'react';\nimport { IRatingProps } from './Rating.config';\nimport SimpleRating from './Components/SimpleRating';\nimport FractionRating from './Components/FractionRating';\nconst Rating: FC<IRatingProps> = ({\n  icon,\n  direction,\n  style,\n  className,\n  classNames = [],\n  start,\n  stop,\n  step = 5,\n  readOnly,\n  halfFillMode,\n  fullColor = 'rgb(255, 215, 0)',\n  emptyColor = 'rgb(243, 243, 243)',\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState(() => 0);\n  const [hover, setHover] = useState<number | undefined>(() => undefined);\n  const stepper = ((start || 0) + (stop || 5)) / (step || 1);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<number>();\n      setValue(v || 0);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  return (\n    <div ref={connect}>\n      {!halfFillMode ? (\n        <SimpleRating\n          fullColor={fullColor}\n          emptyColor={emptyColor}\n          style={style}\n          onMouseEnterCallBack={(value: number) => {\n            !readOnly && setHover(value + 1);\n          }}\n          onMouseLeaveCallBack={() => !readOnly && setHover(undefined)}\n          onClickCallback={(value: number) => {\n            !readOnly && ds.setValue<number>(null, value);\n          }}\n          hover={hover}\n          value={value}\n          step={step}\n          stepper={stepper}\n          classNames={classNames}\n          className={className}\n          icon={icon}\n          direction={direction}\n        />\n      ) : (\n        <FractionRating\n          fullColor={fullColor}\n          emptyColor={emptyColor}\n          style={style}\n          onClickCallback={(value: number) => {\n            !readOnly && ds.setValue<number>(null, value);\n          }}\n          onMouseEvent={(value: number | undefined) => {\n            !readOnly && setHover(value);\n          }}\n          readOnly={readOnly}\n          hover={hover}\n          value={value}\n          step={step}\n          stepper={stepper}\n          classNames={classNames}\n          className={className}\n          icon={icon}\n          min={start}\n          max={stop}\n          direction={direction}\n        />\n      )}\n    </div>\n  );\n};\nexport default Rating;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/Rating.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { FaLongArrowAltRight, FaLongArrowAltLeft } from 'react-icons/fa';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'general',\n    label: 'General',\n    type: ESetting.GROUP,\n    isSubgroup: true,\n    components: [\n      {\n        key: 'icon',\n        label: 'Icon',\n        type: ESetting.ICON_PICKER,\n        defaultValue: 'fa-star',\n      },\n      {\n        key: 'readOnly',\n        label: 'Read Only',\n        type: ESetting.CHECKBOX,\n      },\n      {\n        key: 'emptyColor',\n        label: 'Empty Color',\n        type: ESetting.COLOR_PICKER,\n      },\n      {\n        key: 'fullColor',\n        label: 'Full Color',\n        type: ESetting.COLOR_PICKER,\n      },\n    ],\n  },\n  {\n    key: 'values',\n    label: 'Values',\n    type: ESetting.GROUP,\n    isSubgroup: true,\n    components: [\n      {\n        key: 'start',\n        label: 'Start',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 0,\n      },\n      {\n        key: 'stop',\n        label: 'Stop',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 5,\n      },\n      {\n        key: 'step',\n        label: 'Step',\n        type: ESetting.NUMBER_FIELD,\n        defaultValue: 5,\n        min: 1,\n        max: 10,\n      },\n    ],\n  },\n  {\n    key: 'advanced',\n    label: 'Advanced',\n    type: ESetting.GROUP,\n    isSubgroup: true,\n    components: [\n      {\n        label: 'Direction',\n        type: ESetting.RADIOGROUP,\n        defaultValue: 'ltr',\n        key: 'direction',\n        multiple: false,\n        options: [\n          {\n            value: 'rtl',\n            tooltip: 'Righ to Left',\n            icon: FaLongArrowAltLeft,\n          },\n          {\n            value: 'ltr',\n            tooltip: 'Left to Right',\n            icon: FaLongArrowAltRight,\n          },\n        ],\n      },\n      {\n        key: 'halfFillMode',\n        label: 'Half Fill Mode',\n        type: ESetting.CHECKBOX,\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('borderRadius', 'borders', 'background', 'dimensions', 'color'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('borderRadius', 'borders'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/SimpleRating.tsx", "file_contents": "import cn from \"classnames\";\nimport { FC, MouseEventHandler } from \"react\";\ninterface ISimpleRatingProps extends webforms.ComponentProps {\n  onMouseEnterCallBack: (value: number) => void;\n  onMouseLeaveCallBack: MouseEventHandler<HTMLSpanElement>;\n  onClickCallback: (value: number) => void;\n  hover: number | undefined;\n  value: number;\n  step?: number;\n  stepper: number;\n  icon?: string;\n  direction?: string;\n  fullColor?: string;\n  emptyColor?: string;\n}\nconst SimpleRating: FC<ISimpleRatingProps> = ({\n  hover,\n  className,\n  value,\n  step,\n  stepper,\n  onMouseLeaveCallBack,\n  onMouseEnterCallBack,\n  onClickCallback,\n  icon,\n  classNames = [],\n  direction = \"ltr\",\n  style,\n  fullColor,\n  emptyColor,\n}) => {\n  return (\n    <div style={style} className={cn(\"inline-flex\")} dir={direction}>\n      {[...Array(step)].map((_star, index) => {\n        const currentRating = index * stepper;\n        return (\n          <label key={index}>\n            <input\n              className=\"hidden\"\n              type=\"radio\"\n              name=\"rating\"\n              value={value}\n              onClick={() => onClickCallback(currentRating + stepper)}\n            />\n            <span\n              style={{\n                color:\n                  (hover || value) >= index * stepper + 1\n                    ? fullColor\n                    : emptyColor,\n              }}\n              onMouseEnter={() => onMouseEnterCallBack(currentRating)}\n              onMouseLeave={onMouseLeaveCallBack}\n              className={cn(\n                \"fa fd-component\",\n                \"fd-icon\",\n                \"rating\",\n                icon,\n                classNames,\n                className\n              )}\n            ></span>\n          </label>\n        );\n      })}\n    </div>\n  );\n};\nexport default SimpleRating;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/metayoub/qoldy_rating/Star.tsx", "file_contents": "import { FC } from \"react\";\nimport cn from \"classnames\";\ninterface IStarProps extends webforms.ComponentProps {\n  starRatedColor?: string;\n  starEmptyColor?: string;\n  isFraction?: boolean;\n  isActive?: boolean;\n  fillId: string;\n}\nconst Star: FC<IStarProps> = ({\n  starRatedColor,\n  starEmptyColor,\n  fillId,\n  isFraction,\n  isActive = false,\n  classNames = [],\n  className,\n}) => {\n  const fill = isFraction\n    ? `url(#${fillId})`\n    : isActive\n    ? starRatedColor\n    : starEmptyColor;\n  return (\n    <div className={cn(classNames, className)}>\n      <svg\n        viewBox=\"0 0 51 48\"\n        className=\"\"\n        style={{\n          width: \"32px\",\n          height: \"32px\",\n          transition: \"transform .2s ease-in-out\",\n        }}\n      >\n        <path\n          className=\"star\"\n          style={{\n            fill: fill,\n            transition: \"fill .2s ease-in-out\",\n          }}\n          d=\"m25,1 6,17h18l-14,11 5,17-15-10-15,10 5-17-14-11h18z\"\n        />\n      </svg>\n    </div>\n  );\n};\nexport default Star;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/data.ts", "file_contents": "export const languages = {\n    'en': {\n      months: [\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n      ],\n    },\n    'fr': {\n      months: [\n        \"Janvier\", \"F\u00e9vrier\", \"Mars\", \"Avril\", \"Mai\", \"Juin\",\n        \"Juillet\", \"Ao\u00fbt\", \"Septembre\", \"Octobre\", \"Novembre\", \"D\u00e9cembre\"\n      ],\n    },\n    'es': {\n      months: [\n        \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n        \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n      ],\n    }\n  };"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/DatePicker.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from './utils/data';\nimport { chunkArray } from './utils/func';\nimport { IDatePickerProps } from './DatePicker.config';\nconst DatePicker: FC<IDatePickerProps> = ({\n  selectedDateColor,\n  selectedDateRaduis,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const [lang, setLang] = useState<string>(language);\n  const currentMonth = new Date().getMonth();\n  const currentYear = new Date().getFullYear();\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-between\">\n        <span className={cn('datePicker-title', '  text-base font-bold  text-gray-800')}>\n          {selectedLanguage?.months[currentMonth]} {currentYear}\n        </span>\n        <div className=\"flex items-center\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('datePicker-icon', ' text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('datePicker-icon', ' ml-3 text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-5 overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr>\n              {selectedLanguage?.daysOfWeek.map((day) => (\n                <th>\n                  <div className=\"w-full flex justify-center\">\n                    <p\n                      className={cn(\n                        'datePicker-weekDay',\n                        'text-base font-medium text-center text-gray-800',\n                      )}\n                    >\n                      {day}\n                    </p>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {chunkArray(currentYear, currentMonth).map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {row.map((item, colIndex) => (\n                  <td\n                    key={colIndex}\n                    style={{\n                      backgroundColor: item === 1 ? selectedDateColor : '',\n                      borderRadius: item === 1 ? selectedDateRaduis : '',\n                    }}\n                  >\n                    <div className={'px-2 py-2  flex w-full justify-center'}>\n                      <p\n                        className={` ${item === 1 ? cn('datePicker-selectedDay', ' text-base text-white  ') : cn('datePicker-days', 'text-base text-gray-500 ')}`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default DatePicker;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/DatePicker.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { BsCalendarDate } from 'react-icons/bs';\nimport DatePickerSettings, { BasicSettings } from './DatePicker.settings';\nexport default {\n  craft: {\n    displayName: 'DatePicker',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(DatePickerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'DatePicker',\n    exposed: true,\n    icon: BsCalendarDate,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    readOnly: false,\n    style: {\n      height: 'fit-content',\n      width: '350px',\n      borderRadius: '4px',\n      boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)',\n      padding: '8px',\n      backgroundColor: 'white',\n    },\n    selectedDateColor: '#228be6',\n    selectedRangeColor: 'rgba(34,139,230,.12)',\n    selectedDateRaduis: '',\n    language: 'en',\n    selectionModes: 'single',\n  },\n} as T4DComponentConfig<IDatePickerProps>;\nexport interface IDatePickerProps extends webforms.ComponentProps {\n  readOnly: boolean;\n  selectedDateColor: string;\n  selectedDateRaduis: any;\n  selectedRangeColor: string;\n  language: 'en' | 'fr' | 'es';\n  selectionModes: 'single' | 'multiple' | 'range';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/DatePicker.render.tsx", "file_contents": "import { useRenderer, useSources, dateTo4DFormat } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport SingleDate from './components/SingleDate';\nimport MultipleDate from './components/MultipleDate';\nimport RangeDate from './components/RangeDate';\nimport { IDatePickerProps } from './DatePicker.config';\nconst DatePicker: FC<IDatePickerProps> = ({\n  readOnly,\n  selectedDateColor,\n  selectedDateRaduis,\n  selectedRangeColor,\n  language,\n  selectionModes,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  const [value, setValue] = useState<Date>(new Date());\n  const [val, setVal] = useState<Array<Date>>([]);\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue();\n      if (selectionModes === 'multiple' || selectionModes === 'range') setVal(v);\n      else setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const handleValueChange = (newValue: Date) => {\n    ds.setValue(null, newValue);\n  };\n  const handleArrayChange = (newValue: Date[]) => {\n    ds.setValue(null, newValue.map(e=> (e instanceof Date && !isNaN(e.valueOf())) ? dateTo4DFormat(e) : e));\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {selectionModes === 'multiple' ? (\n        <MultipleDate\n          readOnly={readOnly}\n          selectedDateRaduis={selectedDateRaduis}\n          selectedDateColor={selectedDateColor}\n          onValueChange={handleArrayChange}\n          data={val}\n          language={language}\n        />\n      ) : selectionModes === 'range' ? (\n        <RangeDate\n          readOnly={readOnly}\n          selectedDateRaduis={selectedDateRaduis}\n          selectedDateColor={selectedDateColor}\n          onValueChange={handleArrayChange}\n          data={val}\n          selectedRangeColor={selectedRangeColor}\n          language={language}\n        />\n      ) : (\n        <SingleDate\n          readOnly={readOnly}\n          selectedDateRaduis={selectedDateRaduis}\n          selectedDateColor={selectedDateColor}\n          onValueChange={handleValueChange}\n          data={value}\n          language={language}\n        />\n      )}\n    </div>\n  );\n};\nexport default DatePicker;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/DatePicker.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { CgCalendarDates } from \"react-icons/cg\";\nimport { CiCalendarDate } from \"react-icons/ci\";\nimport { MdOutlineDateRange } from \"react-icons/md\";\nconst commonSettings: TSetting[] = [\n  {\n    key: 'selectionModes',\n    label: 'Selection modes',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'single',\n    options: [\n      { value: 'single', icon: CiCalendarDate },\n      { value: 'multiple', icon: MdOutlineDateRange },\n      { value: 'range', icon: CgCalendarDates },\n    ],\n  },\n  {\n    key: 'readOnly',\n    label: 'Read only',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'selectedDateColor',\n    label: 'Color picker',\n    type: ESetting.COLOR_PICKER,\n  },\n  {\n    key: 'selectedRangeColor',\n    label: 'Color range',\n    type: ESetting.COLOR_PICKER,\n  },\n  {\n    key: 'selectedDateRaduis',\n    placeholder: 'selected date(s) border radius',\n    type: ESetting.UNITFIELD,\n  },\n  {\n    key: 'language',\n    label: 'Language',\n    type: ESetting.SELECT,\n    defaultValue: 'en',\n    options:[{value:'en',label:'English'},{value:'fr',label:'Frensh' },{value:'es',label:'Spanish'}],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('style.overflow', 'background','style.fontSize','style.fontWeight'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow', 'background','style.fontSize','style.fontWeight'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/func.ts", "file_contents": "export const range = (startYear: number, endYear: number) => {\n    const yearsArray = [];\n    for (let year = startYear; year <= endYear; year++) {\n        yearsArray.push(year);\n      }\n      return yearsArray;\n}\nexport const chunkArray = (startYear: number,endYear: number) => {\n    return Array.from({ length: 4 }, (_, index) =>\n      range(startYear,endYear).slice(index * 3, (index + 1) * 3),\n    );\n  };"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/index.tsx", "file_contents": "import YearPicker from './YearPicker';\nimport MonthPicker from './MonthPicker';\nimport DatePicker from './DatePicker';\nexport default {\n  YearPicker,\n  MonthPicker,\n  DatePicker,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/MonthPicker.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from '../DatePicker/utils/data';\nimport { IMonthPickerProps } from './MonthPicker.config';\nimport { chunkArray } from './utils/func';\nconst MonthPicker: FC<IMonthPickerProps> = ({\n  selectedMonthColor,\n  selectedMonthRaduis,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const [lang, setLang] = useState<string>(language);\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  const currentYear = new Date().getFullYear();\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('monthPicker-leftIcon', ' text-gray-800 mr-3')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('monthPicker-title', '  text-base font-bold  text-gray-800')}>\n            {currentYear}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('monthPicker-rightIcon', ' text-gray-800 ml-3')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table className=\"w-full\">\n          <thead>\n            {chunkArray(selectedLanguage?.months).map((row, rowIndex) => (\n              <tr>\n                {row.map((item) => (\n                  <th\n                    key={rowIndex}\n                    style={{\n                      backgroundColor:\n                        item === selectedLanguage?.months[0] ? selectedMonthColor : '',\n                      borderRadius: item === selectedLanguage?.months[0] ? selectedMonthRaduis : '',\n                    }}\n                  >\n                    <div className={'px-2 py-2  flex w-full justify-center'}>\n                      <p\n                        className={` ${item === selectedLanguage?.months[0] ? cn('monthPicker-selectedMonth', ' text-base text-white  ') : cn('monthPicker-months', 'text-base text-gray-500 ')}`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default MonthPicker;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/MonthPicker.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { BsCalendarMonth } from 'react-icons/bs';\nimport MonthPickerSettings, { BasicSettings } from './MonthPicker.settings';\nexport default {\n  craft: {\n    displayName: 'MonthPicker',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(MonthPickerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'MonthPicker',\n    exposed: true,\n    icon: BsCalendarMonth,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    readOnly: false,\n    style: {\n      height: '250px',\n      width: '300px',\n      borderRadius: '4px',\n      boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)',\n      padding: '8px',\n      backgroundColor: 'white',\n    },\n    selectedMonthColor: '#228be6',\n    selectedRangeColor: 'rgba(34,139,230,.12)',\n    selectedMonthRaduis: '',\n    language: 'en',\n    selectionModes: 'single',\n  },\n} as T4DComponentConfig<IMonthPickerProps>;\nexport interface IMonthPickerProps extends webforms.ComponentProps {\n  readOnly: boolean;\n  selectedMonthColor: string;\n  selectedMonthRaduis: any;\n  selectedRangeColor: string;\n  language: 'en' | 'fr' | 'es';\n  selectionModes: 'single' | 'multiple' | 'range';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/MonthPicker.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IMonthPickerProps } from './MonthPicker.config';\nimport MultipleMonth from './components/MultipleMonth';\nimport RangeMonth from './components/RangeMonth';\nimport SingleMonth from './components/SingleMonth';\nconst MonthPicker: FC<IMonthPickerProps> = ({\n  readOnly,\n  selectedMonthColor,\n  selectedMonthRaduis,\n  selectedRangeColor,\n  language,\n  selectionModes,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<Date>(new Date());\n  const [val, setVal] = useState<Array<Date>>([]);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue();\n      if (selectionModes === 'multiple' || selectionModes === 'range') setVal(v);\n      else setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const handleValueChange = (newValue: Date | Array<Date>) => {\n    ds.setValue(null, newValue);\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {selectionModes === 'multiple' ? (\n        <MultipleMonth\n          readOnly={readOnly}\n          selectedMonthRaduis={selectedMonthRaduis}\n          selectedMonthColor={selectedMonthColor}\n          onValueChange={handleValueChange}\n          data={val}\n          language={language}\n        />\n      ) : selectionModes === 'range' ? (\n        <RangeMonth\n          readOnly={readOnly}\n          selectedMonthRaduis={selectedMonthRaduis}\n          selectedMonthColor={selectedMonthColor}\n          onValueChange={handleValueChange}\n          data={val}\n          selectedRangeColor={selectedRangeColor}\n          language={language}\n        />\n      ) : (\n        <SingleMonth\n          readOnly={readOnly}\n          selectedMonthRaduis={selectedMonthRaduis}\n          selectedMonthColor={selectedMonthColor}\n          onValueChange={handleValueChange}\n          data={value}\n          language={language}\n        />\n      )}\n    </div>\n  );\n};\nexport default MonthPicker;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/MonthPicker.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { CgCalendarDates } from \"react-icons/cg\";\nimport { CiCalendarDate } from \"react-icons/ci\";\nimport { MdOutlineDateRange } from \"react-icons/md\";\nconst commonSettings: TSetting[] = [\n  {\n    key: 'selectionModes',\n    label: 'Selection modes',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'single',\n    options: [\n      { value: 'single', icon: CiCalendarDate },\n      { value: 'multiple', icon: MdOutlineDateRange },\n      { value: 'range', icon: CgCalendarDates },\n    ],\n  },\n  {\n    key: 'readOnly',\n    label: 'Read only',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'selectedMonthColor',\n    label: 'Color picker',\n    type: ESetting.COLOR_PICKER,\n  },\n  {\n    key: 'selectedRangeColor',\n    label: 'Color range',\n    type: ESetting.COLOR_PICKER,\n  },\n  {\n    key: 'selectedMonthRaduis',\n    placeholder: 'selected month(s) border radius',\n    type: ESetting.UNITFIELD,\n  },\n  {\n    key: 'language',\n    label: 'Language',\n    type: ESetting.SELECT,\n    defaultValue: 'en',\n    options:[{value:'en',label:'English'},{value:'fr',label:'Frensh' },{value:'es',label:'Spanish'}],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('style.overflow', 'background','style.fontSize','style.fontWeight'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow', 'background','style.fontSize','style.fontWeight'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/MultipleDate.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from '../utils/data';\nimport { chunkArray } from '../utils/func';\ninterface IMultipleDateProps extends webforms.ComponentProps {\n  data: Date[];\n  onValueChange: (value: Date[]) => void;\n  readOnly: boolean;\n  selectedDateColor: string;\n  selectedDateRaduis: string;\n  language: string;\n}\nconst MultipleDate: FC<IMultipleDateProps> = ({\n  data,\n  readOnly,\n  selectedDateColor,\n  selectedDateRaduis,\n  onValueChange,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [selectedDates, setSelectedDates] = useState<Date[]>(data.map((e) => new Date(e)));\n  const [lastClick, setLastClick] = useState<Date>();\n  const [currentMonth, setCurrentMonth] = useState<number>(new Date().getMonth());\n  const [currentYear, setCurrentYear] = useState<number>(new Date().getFullYear());\n  const [lang, setLang] = useState<string>(language);\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  const prevMonth = () => {\n    if (currentMonth > 0) {\n      setCurrentMonth((prev) => prev - 1);\n    } else {\n      setCurrentYear((prev) => prev - 1);\n      setCurrentMonth(11);\n    }\n  };\n  const nextMonth = () => {\n    if (currentMonth < 11) {\n      setCurrentMonth((prev) => prev + 1);\n    } else {\n      setCurrentYear((prev) => prev + 1);\n      setCurrentMonth(0);\n    }\n  };\n  const handleSelection = (item: number) => {\n    if (readOnly) return;\n    setLastClick(new Date(currentYear, currentMonth, item));\n    if (\n      selectedDates.some(\n        (date) => new Date(date).getTime() === new Date(currentYear, currentMonth, item).getTime(),\n      )\n    )\n      setSelectedDates((prev) =>\n        prev.filter(\n          (value) =>\n            new Date(value).getTime() !==\n            new Date(new Date(currentYear, currentMonth, item)).getTime(),\n        ),\n      );\n    else {\n      setSelectedDates((prevData) =>\n        [...prevData, new Date(currentYear, currentMonth, item)]\n          .map((value) => new Date(value))\n          .sort((a, b) => a.getTime() - b.getTime()),\n      );\n    }\n  };\n  const isDateEqual = (date: Date, item: number) => {\n    if (new Date(date).getTime() === new Date(currentYear, currentMonth, item).getTime())\n      return true;\n    else false;\n  };\n  useEffect(() => {\n    selectedDates.length && onValueChange(selectedDates);\n  }, [selectedDates.length]);\n  useEffect(() => {\n    setSelectedDates(data);\n    setCurrentMonth(lastClick?.getMonth() || new Date(data[0]).getMonth() || new Date().getMonth());\n    setCurrentYear(\n      lastClick?.getFullYear() || new Date(data[0]).getFullYear() || new Date().getFullYear(),\n    );\n  }, [data]);\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-between\">\n        <span className={cn('datePicker-title', '  text-base font-bold  text-gray-800')}>\n          {selectedLanguage?.months[currentMonth]} {currentYear}\n        </span>\n        <div className=\"flex items-center\">\n          <button\n            onClick={prevMonth}\n            aria-label=\"calendar backward\"\n            className={cn('datePicker-icon', ' text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <button\n            onClick={nextMonth}\n            aria-label=\"calendar forward\"\n            className={cn('datePicker-icon', ' ml-3 text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-5 \">\n        <table className=\"w-full border-separate\">\n          <thead>\n            <tr>\n              {selectedLanguage?.daysOfWeek.map((day) => (\n                <th key={day}>\n                  <div className=\"w-full flex justify-center\">\n                    <p\n                      className={cn(\n                        'datePicker-weekDay',\n                        'text-base font-medium text-center text-gray-800',\n                      )}\n                    >\n                      {day}\n                    </p>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {chunkArray(currentYear, currentMonth).map((row, rowIndex) => (\n              <tr className={`${readOnly ? 'cursor-auto' : 'cursor-pointer'}`} key={rowIndex}>\n                {row.map((item, colIndex) => (\n                  <td\n                    key={colIndex}\n                    onClick={() => handleSelection(item)}\n                    style={{\n                      backgroundColor: selectedDates.some(\n                        (date) => isDateEqual(date, item) && item != '',\n                      )\n                        ? selectedDateColor\n                        : '',\n                      borderRadius: selectedDates.some((date) => isDateEqual(date, item))\n                        ? selectedDateRaduis\n                        : '',\n                    }}\n                  >\n                    <div className={'px-2 py-2 flex w-full justify-center'}>\n                      <p\n                        className={` ${selectedDates.some((date) => isDateEqual(date, item)) ? cn('datePicker-selectedDay', ' text-base text-white  ') : cn('datePicker-days', 'text-base text-gray-500 ')}`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default MultipleDate;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/MultipleMonth.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from '../utils/data';\nimport { chunkArray } from '../utils/func';\ninterface IMultipleMonthProps extends webforms.ComponentProps {\n  data: Date[];\n  onValueChange: (value: Date[]) => void;\n  readOnly: boolean;\n  selectedMonthColor: string;\n  selectedMonthRaduis: string;\n  language: string;\n}\nconst MultipleMonth: FC<IMultipleMonthProps> = ({\n  data,\n  readOnly,\n  selectedMonthColor,\n  selectedMonthRaduis,\n  onValueChange,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [selectedDates, setSelectedDates] = useState(data);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [lang, setLang] = useState<string>(language);\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  const handleSelection = (item: string) => {\n    if (readOnly) return;\n    if (\n      selectedDates.some(\n        (date) =>\n          new Date(date).getTime() ===\n          new Date(currentYear, selectedLanguage.months.indexOf(item)).getTime(),\n      )\n    )\n      setSelectedDates((prev) =>\n        prev.filter(\n          (value) =>\n            new Date(value).getTime() !==\n            new Date(currentYear, selectedLanguage.months.indexOf(item)).getTime(),\n        ),\n      );\n    else {\n      setSelectedDates((prevData) => [\n        ...prevData,\n        new Date(currentYear, selectedLanguage.months.indexOf(item)),\n      ]);\n    }\n  };\n  const isMonthEqual = (date: Date, value: string) => {\n    if (\n      new Date(date).getFullYear() === currentYear &&\n      new Date(date).getMonth() === selectedLanguage.months.indexOf(value)\n    )\n      return true;\n    else false;\n  };\n  useEffect(() => {\n    selectedDates.length && onValueChange(selectedDates);\n  }, [selectedDates]);\n  useEffect(() => {\n    setSelectedDates(data);\n  }, [data]);\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('monthPicker-leftIcon', ' text-gray-800 mr-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev - 1);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('monthPicker-title', '  text-base font-bold  text-gray-800')}>\n            {currentYear}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('monthPicker-rightIcon', ' text-gray-800 ml-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev + 1);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table\n          className={`${readOnly ? 'cursor-auto w-full border-separate' : 'cursor-pointer w-full border-separate'}`}\n        >\n          <thead>\n            {chunkArray(selectedLanguage?.months).map((row, rowIndex) => (\n              <tr>\n                {row.map((item) => (\n                  <th\n                    key={rowIndex}\n                    onClick={() => handleSelection(item)}\n                    style={{\n                      backgroundColor: selectedDates.some((date) => isMonthEqual(date, item))\n                        ? selectedMonthColor\n                        : '',\n                      borderRadius: selectedDates.some((date) => isMonthEqual(date, item))\n                        ? selectedMonthRaduis\n                        : '',\n                    }}\n                  >\n                    <div className={'flex px-2 py-2 justify-center w-full'}>\n                      <p\n                        className={` ${\n                          selectedDates.some((date) => isMonthEqual(date, item))\n                            ? cn('monthPicker-selectedMonth', ' text-base text-white  ')\n                            : cn('monthPicker-months', 'text-base text-gray-500 ')\n                        }`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default MultipleMonth;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/MultipleYear.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { chunkArray } from '../utils/func';\ninterface IMultipleYearProps extends webforms.ComponentProps {\n  data: number[];\n  onValueChange: (value: number[]) => void;\n  readOnly: boolean;\n  selectedYearColor: string;\n  selectedYearRaduis: string;\n}\nconst MultipleYear: FC<IMultipleYearProps> = ({\n  data,\n  readOnly,\n  selectedYearColor,\n  selectedYearRaduis,\n  onValueChange,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [selectedDates, setSelectedDates] = useState(data);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const handleSelection = (item: number) => {\n    if (readOnly) return;\n    if (selectedDates.some((date) => date === item))\n      setSelectedDates((prev) => prev.filter((value) => value !== item));\n    else {\n      setSelectedDates((prevData) => [...prevData, item]);\n    }\n  };\n  const isYearEqual = (date: number, value: number) => {\n    if (date === value) return true;\n    else false;\n  };\n  const getDecadeYears = (year: number) => {\n    const startYear = Math.floor(year / 10) * 10;\n    const endYear = startYear + 9;\n    return [startYear, endYear];\n  };\n  useEffect(() => {\n    selectedDates.length && onValueChange(selectedDates);\n  }, [selectedDates]);\n  useEffect(() => {\n    setSelectedDates(data);\n  }, [data]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('yearPicker-leftIcon', ' text-gray-800 mr-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev - 10);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('yearPicker-title', '  text-base font-bold  text-gray-800')}>\n            {getDecadeYears(currentYear)[0]} - {getDecadeYears(currentYear)[1]}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('yearPicker-rightIcon', ' text-gray-800 ml-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev + 10);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table\n          className={`${readOnly ? 'cursor-auto w-full border-separate' : 'cursor-pointer w-full border-separate'}`}\n        >\n          <thead>\n            {chunkArray(getDecadeYears(currentYear)[0], getDecadeYears(currentYear)[1]).map(\n              (row, rowIndex) => (\n                <tr>\n                  {row.map((item) => (\n                    <th\n                      key={rowIndex}\n                      onClick={() => handleSelection(item)}\n                      style={{\n                        backgroundColor: selectedDates.some((date) => isYearEqual(date, item))\n                          ? selectedYearColor\n                          : '',\n                        borderRadius: selectedDates.some((date) => isYearEqual(date, item))\n                          ? selectedYearRaduis\n                          : '',\n                      }}\n                    >\n                      <div className={'flex px-2 py-2 justify-center w-full'}>\n                        <p\n                          className={` ${\n                            selectedDates.some((date) => isYearEqual(date, item))\n                              ? cn('yearPicker-selectedYear', ' text-base text-white  ')\n                              : cn('yearPicker-years', 'text-base text-gray-500 ')\n                          }`}\n                        >\n                          {item}\n                        </p>\n                      </div>\n                    </th>\n                  ))}\n                </tr>\n              ),\n            )}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default MultipleYear;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/RangeDate.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from '../utils/data';\nimport { chunkArray } from '../utils/func';\ninterface IRangeDateProps extends webforms.ComponentProps {\n  data: Date[];\n  onValueChange: (value: Date[]) => void;\n  readOnly: boolean;\n  selectedDateColor: string;\n  selectedDateRaduis: string;\n  selectedRangeColor: string;\n  language: string;\n}\nconst RangeDate: FC<IRangeDateProps> = ({\n  data,\n  readOnly,\n  selectedDateColor,\n  selectedDateRaduis,\n  onValueChange,\n  selectedRangeColor,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [selectedDates, setSelectedDates] = useState<Date[]>(data.map((e) => new Date(e)));\n  const [lastClick, setLastClick] = useState<Date>();\n  const [currentMonth, setCurrentMonth] = useState<number>(new Date().getMonth());\n  const [currentYear, setCurrentYear] = useState<number>(new Date().getFullYear());\n  const [lang, setLang] = useState<string>(language);\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  const prevMonth = () => {\n    if (currentMonth > 0) {\n      setCurrentMonth((prev) => prev - 1);\n    } else {\n      setCurrentYear((prev) => prev - 1);\n      setCurrentMonth(11);\n    }\n  };\n  const nextMonth = () => {\n    if (currentMonth < 11) {\n      setCurrentMonth((prev) => prev + 1);\n    } else {\n      setCurrentYear((prev) => prev + 1);\n      setCurrentMonth(0);\n    }\n  };\n  const handleSelection = (item: number) => {\n    if (readOnly) return;\n    const clickedDate = new Date(currentYear, currentMonth, item);\n    setLastClick(clickedDate);\n    const prevDate = new Date(selectedDates[0]);\n    if (selectedDates.length < 2) {\n      const isBeforeFirst = clickedDate < prevDate;\n      const isAfterFirst = clickedDate > prevDate;\n      if (isBeforeFirst) {\n        setSelectedDates([clickedDate, ...selectedDates]);\n      } else if (isAfterFirst) {\n        setSelectedDates([...selectedDates, clickedDate]);\n      } else if (selectedDates.some((date) => new Date(date).getTime() === clickedDate.getTime())) {\n        setSelectedDates((prevDates) =>\n          prevDates.filter((date) => new Date(date).getTime() !== clickedDate.getTime()),\n        );\n      } else {\n        setSelectedDates([clickedDate]);\n      }\n    } else {\n      setSelectedDates([clickedDate]);\n    }\n  };\n  const isDateEqual = (date: Date, item: number) => {\n    if (new Date(date).getTime() === new Date(currentYear, currentMonth, item).getTime())\n      return true;\n    else false;\n  };\n  useEffect(() => {\n    selectedDates.length && onValueChange(selectedDates);\n  }, [selectedDates.length]);\n  useEffect(() => {\n    let ordredData: Date[] = [...data];\n    if (\n      ordredData &&\n      ordredData.length > 1 &&\n      new Date(ordredData[0]).getTime() > new Date(ordredData[1]).getTime()\n    )\n      [ordredData[0], ordredData[1]] = [ordredData[1], ordredData[0]];\n    setSelectedDates(ordredData);\n    if (lastClick) {\n      setCurrentMonth(lastClick.getMonth());\n      setCurrentYear(lastClick.getFullYear());\n    } else if (!isNaN(new Date(ordredData[0])?.getMonth())) {\n      setCurrentMonth(new Date(ordredData[0])?.getMonth());\n      setCurrentYear(new Date(ordredData[0])?.getFullYear());\n    }\n  }, [data]);\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-between\">\n        <span className={cn('datePicker-title', '  text-base font-bold  text-gray-800')}>\n          {selectedLanguage?.months[currentMonth]} {currentYear}\n        </span>\n        <div className=\"flex items-center\">\n          <button\n            onClick={prevMonth}\n            aria-label=\"calendar backward\"\n            className={cn('datePicker-icon', 'text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <button\n            onClick={nextMonth}\n            aria-label=\"calendar forward\"\n            className={cn('datePicker-icon', ' ml-3 text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center  pt-5 \">\n        <table className=\"w-full border-separate table-fixed\">\n          <thead>\n            <tr>\n              {selectedLanguage?.daysOfWeek.map((day) => (\n                <th key={day}>\n                  <div className=\"w-full flex justify-center\">\n                    <p\n                      className={cn(\n                        'datePicker-weekDay',\n                        'text-base font-medium text-center text-gray-800',\n                      )}\n                    >\n                      {day}\n                    </p>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {chunkArray(currentYear, currentMonth).map((row, rowIndex) => (\n              <tr className={`${readOnly ? 'cursor-auto' : 'cursor-pointer'}`} key={rowIndex}>\n                {row.map((item, colIndex) => (\n                  <td\n                    className=\"datePicker-day\"\n                    key={colIndex}\n                    onClick={() => handleSelection(item)}\n                    style={{\n                      backgroundColor: selectedDates.some(\n                        (date) => isDateEqual(date, item) && item != '',\n                      )\n                        ? selectedDateColor\n                        : new Date(selectedDates[0]).getTime() <\n                              new Date(currentYear, currentMonth, item).getTime() &&\n                            new Date(currentYear, currentMonth, item).getTime() <\n                              new Date(selectedDates[1]).getTime()\n                          ? selectedRangeColor\n                          : '',\n                      borderRadius: selectedDates.some(\n                        (date) =>\n                          isDateEqual(date, item) ||\n                          (new Date(selectedDates[0]).getDate() < item &&\n                            item < new Date(selectedDates[1]).getDate()),\n                      )\n                        ? selectedDateRaduis\n                        : '',\n                    }}\n                  >\n                    <div className={'px-2 py-2 flex w-full justify-center'}>\n                      <p\n                        className={` ${selectedDates.some((date) => isDateEqual(date, item)) ? cn('datePicker-selectedDay', ' text-base text-white  ') : cn('datePicker-days', 'text-base text-gray-500 ')}`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default RangeDate;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/RangeMonth.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from '../utils/data';\nimport { chunkArray } from '../utils/func';\ninterface IRangeMonthProps extends webforms.ComponentProps {\n  data: Date[];\n  onValueChange: (value: Date[]) => void;\n  readOnly: boolean;\n  selectedMonthColor: string;\n  selectedMonthRaduis: string;\n  language: string;\n  selectedRangeColor: string;\n}\nconst RangeMonth: FC<IRangeMonthProps> = ({\n  data,\n  readOnly,\n  selectedMonthColor,\n  selectedMonthRaduis,\n  selectedRangeColor,\n  onValueChange,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [selectedDates, setSelectedDates] = useState(data);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [lang, setLang] = useState<string>(language);\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  const handleSelection = (item: string) => {\n    if (readOnly) {\n      return;\n    } else {\n      switch (true) {\n        case selectedLanguage.months.indexOf(item) < new Date(selectedDates[0]).getMonth() &&\n          selectedDates.length < 2:\n          const modifTest1 = [\n            new Date(currentYear, selectedLanguage.months.indexOf(item)),\n            ...selectedDates,\n          ];\n          setSelectedDates(modifTest1);\n          break;\n        case selectedLanguage.months.indexOf(item) > new Date(selectedDates[0]).getMonth() &&\n          selectedDates.length < 2:\n          const modifTest2 = [\n            ...selectedDates,\n            new Date(currentYear, selectedLanguage.months.indexOf(item)),\n          ];\n          setSelectedDates(modifTest2);\n          break;\n        case selectedDates.some(\n          (date) =>\n            new Date(date).getTime() ===\n            new Date(currentYear, selectedLanguage.months.indexOf(item)).getTime(),\n        ):\n          setSelectedDates((prev) =>\n            prev.filter(\n              (value) =>\n                new Date(value).getTime() !==\n                new Date(currentYear, selectedLanguage.months.indexOf(item)).getTime(),\n            ),\n          );\n          break;\n        default:\n          setSelectedDates([new Date(currentYear, selectedLanguage.months.indexOf(item))]);\n          break;\n      }\n    }\n  };\n  const isMonthEqual = (date: Date, value: string) => {\n    if (\n      new Date(date).getFullYear() === currentYear &&\n      new Date(date).getMonth() === selectedLanguage.months.indexOf(value)\n    )\n      return true;\n    else false;\n  };\n  useEffect(() => {\n    selectedDates.length && onValueChange(selectedDates);\n  }, [selectedDates]);\n  useEffect(() => {\n    setSelectedDates(data);\n  }, [data]);\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('monthPicker-leftIcon', ' text-gray-800 mr-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev - 1);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('monthPicker-title', '  text-base font-bold  text-gray-800')}>\n            {currentYear}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('monthPicker-rightIcon', ' text-gray-800 ml-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev + 1);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table\n          className={`${readOnly ? 'cursor-auto w-full border-separate' : 'cursor-pointer w-full border-separate'}`}\n        >\n          <thead>\n            {chunkArray(selectedLanguage?.months).map((row, rowIndex) => (\n              <tr>\n                {row.map((item) => (\n                  <th\n                    key={rowIndex}\n                    onClick={() => handleSelection(item)}\n                    style={{\n                      backgroundColor: selectedDates.some((date) => isMonthEqual(date, item))\n                        ? selectedMonthColor\n                        : new Date(selectedDates[0]).getTime() <\n                              new Date(\n                                currentYear,\n                                selectedLanguage.months.indexOf(item),\n                              ).getTime() &&\n                            new Date(currentYear, selectedLanguage.months.indexOf(item)).getTime() <\n                              new Date(selectedDates[1]).getTime()\n                          ? selectedRangeColor\n                          : '',\n                      borderRadius: selectedDates.some((date) => isMonthEqual(date, item))\n                        ? selectedMonthRaduis\n                        : '',\n                    }}\n                  >\n                    <div className={'px-2 py-2  flex w-full justify-center'}>\n                      <p\n                        className={` ${\n                          selectedDates.some((date) => isMonthEqual(date, item))\n                            ? cn('monthPicker-selectedMonth', ' text-base text-white  ')\n                            : cn('monthPicker-months', 'text-base text-gray-500 ')\n                        }`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default RangeMonth;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/RangeYear.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { chunkArray } from '../utils/func';\ninterface IRangeYearProps extends webforms.ComponentProps {\n  data: number[];\n  onValueChange: (value: number[]) => void;\n  readOnly: boolean;\n  selectedYearColor: string;\n  selectedYearRaduis: string;\n  selectedRangeColor: string;\n}\nconst RangeYear: FC<IRangeYearProps> = ({\n  data,\n  readOnly,\n  selectedYearColor,\n  selectedYearRaduis,\n  selectedRangeColor,\n  onValueChange,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [selectedDates, setSelectedDates] = useState(data);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const handleSelection = (item: number) => {\n    if (readOnly) {\n      return;\n    } else {\n      switch (true) {\n        case item < selectedDates[0] && selectedDates.length < 2:\n          const modifTest1 = [item, ...selectedDates];\n          setSelectedDates(modifTest1);\n          break;\n        case item > selectedDates[0] && selectedDates.length < 2:\n          const modifTest2 = [...selectedDates, item];\n          setSelectedDates(modifTest2);\n          break;\n        case selectedDates.some((date) => date === item):\n          setSelectedDates((prev) => prev.filter((value) => value !== item));\n          break;\n        default:\n          setSelectedDates([item]);\n          break;\n      }\n    }\n  };\n  const isYearEqual = (date: number, value: number) => {\n    if (date === value) return true;\n    else false;\n  };\n  const getDecadeYears = (year: number) => {\n    const startYear = Math.floor(year / 10) * 10;\n    const endYear = startYear + 9;\n    return [startYear, endYear];\n  };\n  useEffect(() => {\n    selectedDates.length && onValueChange(selectedDates);\n  }, [selectedDates]);\n  useEffect(() => {\n    setSelectedDates(data);\n  }, [data]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('yearPicker-leftIcon', ' text-gray-800 mr-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev - 10);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('yearPicker-title', '  text-base font-bold  text-gray-800')}>\n            {getDecadeYears(currentYear)[0]} - {getDecadeYears(currentYear)[1]}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('yearPicker-rightIcon', ' text-gray-800 ml-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev + 10);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table\n          className={`${readOnly ? 'cursor-auto w-full border-separate' : 'cursor-pointer w-full border-separate'}`}\n        >\n          <thead>\n            {chunkArray(getDecadeYears(currentYear)[0], getDecadeYears(currentYear)[1]).map(\n              (row, rowIndex) => (\n                <tr>\n                  {row.map((item) => (\n                    <th\n                      key={rowIndex}\n                      onClick={() => handleSelection(item)}\n                      style={{\n                        backgroundColor: selectedDates.some((date) => isYearEqual(date, item))\n                          ? selectedYearColor\n                          : selectedDates[0] < item && item < selectedDates[1]\n                            ? selectedRangeColor\n                            : '',\n                        borderRadius: selectedDates.some((date) => isYearEqual(date, item))\n                          ? selectedYearRaduis\n                          : '',\n                      }}\n                    >\n                      <div className={'flex px-2 py-2 justify-center w-full'}>\n                        <p\n                          className={` ${\n                            selectedDates.some((date) => isYearEqual(date, item))\n                              ? cn('yearPicker-selectedYear', ' text-base text-white  ')\n                              : cn('yearPicker-years', 'text-base text-gray-500 ')\n                          }`}\n                        >\n                          {item}\n                        </p>\n                      </div>\n                    </th>\n                  ))}\n                </tr>\n              ),\n            )}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default RangeYear;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/SingleDate.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from '../utils/data';\nimport { chunkArray } from '../utils/func';\ninterface ISingleDateProps extends webforms.ComponentProps {\n  data: Date;\n  onValueChange: (value: Date) => void;\n  readOnly: boolean;\n  selectedDateColor: string;\n  selectedDateRaduis: string;\n  language: string;\n}\nconst SingleDate: FC<ISingleDateProps> = ({\n  data,\n  selectedDateColor,\n  selectedDateRaduis,\n  readOnly,\n  onValueChange,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [lang, setLang] = useState<string>(language);\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  const prevMonth = () => {\n    if (currentMonth > 0) {\n      setCurrentMonth((prev) => prev - 1);\n    } else {\n      setCurrentYear((prev) => prev - 1);\n      setCurrentMonth(11);\n    }\n  };\n  const nextMonth = () => {\n    if (currentMonth < 11) {\n      setCurrentMonth((prev) => prev + 1);\n    } else {\n      setCurrentYear((prev) => prev + 1);\n      setCurrentMonth(0);\n    }\n  };\n  const handleSelection = (item: number) => {\n    if (readOnly) {\n      return;\n    } else {\n      data = new Date(currentYear, currentMonth, item);\n      onValueChange(data);\n    }\n  };\n  const isDateEqual = (date: Date, item: number) => {\n    if (new Date(date).getTime() === new Date(currentYear, currentMonth, item).getTime())\n      return true;\n    else false;\n  };\n  useEffect(() => {\n    setCurrentMonth(data.getMonth());\n    setCurrentYear(data.getFullYear());\n  }, [data]);\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-between\">\n        <span className={cn('datePicker-title', '  text-base font-bold  text-gray-800')}>\n          {selectedLanguage?.months[currentMonth]} {currentYear}\n        </span>\n        <div className=\"flex items-center\">\n          <button\n            onClick={prevMonth}\n            aria-label=\"calendar backward\"\n            className={cn('datePicker-icon', ' text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <button\n            onClick={nextMonth}\n            aria-label=\"calendar forward\"\n            className={cn('datePicker-icon', 'ml-3 text-gray-800')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-5 \">\n        <table className=\"w-full\">\n          <thead>\n            <tr>\n              {selectedLanguage?.daysOfWeek.map((day) => (\n                <th>\n                  <div className=\"w-full flex justify-center\">\n                    <p\n                      className={cn(\n                        'datePicker-weekDay',\n                        'text-base font-medium text-center text-gray-800',\n                      )}\n                    >\n                      {day}\n                    </p>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {chunkArray(currentYear, currentMonth).map((row, rowIndex) => (\n              <tr className={`${readOnly ? 'cursor-auto' : 'cursor-pointer'}`} key={rowIndex}>\n                {row.map((item, colIndex) => (\n                  <td\n                    key={colIndex}\n                    onClick={() => handleSelection(item)}\n                    style={{\n                      backgroundColor:\n                        isDateEqual(data, item) && item != '' ? selectedDateColor : '',\n                      borderRadius: isDateEqual(data, item) ? selectedDateRaduis : '',\n                    }}\n                  >\n                    <div className={'px-2 py-2  flex w-full justify-center'}>\n                      <p\n                        className={` ${isDateEqual(data, item) ? cn('datePicker-selectedDay', ' text-base text-white  ') : cn('datePicker-days', 'text-base text-gray-500 ')}`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default SingleDate;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/SingleMonth.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { languages } from '../utils/data';\nimport { chunkArray } from '../utils/func';\ninterface ISingleMonthProps extends webforms.ComponentProps {\n  data: Date;\n  onValueChange: (value: Date) => void;\n  readOnly: boolean;\n  selectedMonthColor: string;\n  selectedMonthRaduis: string;\n  language: string;\n}\nconst SingleMonth: FC<ISingleMonthProps> = ({\n  data,\n  readOnly,\n  selectedMonthColor,\n  selectedMonthRaduis,\n  onValueChange,\n  language,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [lang, setLang] = useState<string>(language);\n  const selectedLanguage = languages[lang as keyof typeof languages];\n  const handleSelection = (item: string) => {\n    if (readOnly) {\n      return;\n    } else {\n      data = new Date(currentYear, selectedLanguage.months.indexOf(item));\n      onValueChange(data);\n    }\n  };\n  const isMonthEqual = (value: string) => {\n    if (\n      new Date(data).getFullYear() === currentYear &&\n      new Date(data).getMonth() === selectedLanguage.months.indexOf(value)\n    )\n      return true;\n    else false;\n  };\n  useEffect(() => {\n    setCurrentYear(data.getFullYear());\n  }, [data]);\n  useEffect(() => {\n    setLang(language);\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('monthPicker-leftIcon', ' text-gray-800 mr-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev - 1);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('monthPicker-title', '  text-base font-bold  text-gray-800')}>\n            {currentYear}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('monthPicker-rightIcon', ' text-gray-800 ml-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev + 1);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table\n          className={`${readOnly ? 'cursor-auto w-full border-separate' : 'cursor-pointer w-full border-separate'}`}\n        >\n          <thead>\n            {chunkArray(selectedLanguage?.months).map((row, rowIndex) => (\n              <tr>\n                {row.map((item) => (\n                  <th\n                    key={rowIndex}\n                    onClick={() => handleSelection(item)}\n                    style={{\n                      backgroundColor: isMonthEqual(item) ? selectedMonthColor : '',\n                      borderRadius: isMonthEqual(item) ? selectedMonthRaduis : '',\n                    }}\n                  >\n                    <div className={'px-2 py-2  flex w-full justify-center'}>\n                      <p\n                        className={` ${isMonthEqual(item) ? cn('monthPicker-selectedMonth', ' text-base text-white  ') : cn('monthPicker-months', 'text-base text-gray-500 ')}`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default SingleMonth;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/SingleYear.tsx", "file_contents": "import { useRenderer } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState, useEffect } from 'react';\nimport { chunkArray } from '../utils/func';\ninterface ISingleYearProps extends webforms.ComponentProps {\n  data: number;\n  onValueChange: (value: number) => void;\n  readOnly: boolean;\n  selectedYearColor: string;\n  selectedYearRaduis: string;\n}\nconst SingleYear: FC<ISingleYearProps> = ({\n  data,\n  readOnly,\n  selectedYearColor,\n  selectedYearRaduis,\n  onValueChange,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const handleSelection = (item: number) => {\n    if (readOnly) {\n      return;\n    } else {\n      onValueChange(item);\n    }\n  };\n  const isYearEqual = (date: number, value: number) => {\n    if (date === value) return true;\n    else false;\n  };\n  const getDecadeYears = (year: number) => {\n    const startYear = Math.floor(year / 10) * 10;\n    const endYear = startYear + 9;\n    return [startYear, endYear];\n  };\n  useEffect(() => {\n    setCurrentYear(new Date(data, 0).getFullYear());\n  }, [data]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('yearPicker-leftIcon', ' text-gray-800 mr-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev - 10);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('yearPicker-title', '  text-base font-bold  text-gray-800')}>\n            {getDecadeYears(currentYear)[0]} - {getDecadeYears(currentYear)[1]}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('yearPicker-rightIcon', ' text-gray-800 ml-3')}\n            onClick={() => {\n              setCurrentYear((prev) => prev + 10);\n            }}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table\n          className={`${readOnly ? 'cursor-auto w-full border-separate' : 'cursor-pointer w-full border-separate'}`}\n        >\n          <thead>\n            {chunkArray(getDecadeYears(currentYear)[0], getDecadeYears(currentYear)[1]).map(\n              (row, rowIndex) => (\n                <tr>\n                  {row.map((item) => (\n                    <th\n                      key={rowIndex}\n                      onClick={() => handleSelection(item)}\n                      style={{\n                        backgroundColor: isYearEqual(data, item) ? selectedYearColor : '',\n                        borderRadius: isYearEqual(data, item) ? selectedYearRaduis : '',\n                      }}\n                    >\n                      <div className={'flex px-2 py-2 justify-center w-full'}>\n                        <p\n                          className={` ${\n                            isYearEqual(data, item)\n                              ? cn('yearPicker-selectedYear', ' text-base text-white  ')\n                              : cn('yearPicker-years', 'text-base text-gray-500 ')\n                          }`}\n                        >\n                          {item}\n                        </p>\n                      </div>\n                    </th>\n                  ))}\n                </tr>\n              ),\n            )}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default SingleYear;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/YearPicker.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC } from 'react';\nimport { chunkArray } from './utils/func';\nimport { IYearPickerProps } from './YearPicker.config';\nconst YearPicker: FC<IYearPickerProps> = ({\n  selectedYearColor,\n  selectedYearRaduis,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const getDecadeYears = () => {\n    const startYear = Math.floor(new Date().getFullYear() / 10) * 10;\n    const endYear = startYear + 9;\n    return [startYear, endYear];\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"px-4 pt-2 flex items-center justify-center\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <button\n            aria-label=\"calendar backward\"\n            className={cn('yearPicker-leftIcon', ' text-gray-800 mr-3')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler icon-tabler-chevron-left\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"15 6 9 12 15 18\" />\n            </svg>\n          </button>\n          <span className={cn('yearPicker-title', '  text-base font-bold  text-gray-800')}>\n            {getDecadeYears()[0]} - {getDecadeYears()[1]}\n          </span>\n          <button\n            aria-label=\"calendar forward\"\n            className={cn('yearPicker-rightIcon', ' text-gray-800 ml-3')}\n          >\n            <svg\n              xmlns=\"http:\n              className=\"icon icon-tabler  icon-tabler-chevron-right\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              stroke-width=\"1.5\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n            >\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n              <polyline points=\"9 6 15 12 9 18\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between pt-6 \">\n        <table className=\"w-full\">\n          <thead>\n            {chunkArray(getDecadeYears()[0], getDecadeYears()[1]).map((row, rowIndex) => (\n              <tr>\n                {row.map((item) => (\n                  <th\n                    key={rowIndex}\n                    style={{\n                      backgroundColor: item === new Date().getFullYear() ? selectedYearColor : '',\n                      borderRadius: item === new Date().getFullYear() ? selectedYearRaduis : '',\n                    }}\n                  >\n                    <div className=\"px-2 py-2  flex w-full justify-center\">\n                      <p\n                        className={` ${item === new Date().getFullYear() ? cn('yearPicker-selectedYear', ' text-base text-white  ') : cn('yearPicker-years', 'text-base text-gray-500 ')}`}\n                      >\n                        {item}\n                      </p>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default YearPicker;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/YearPicker.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { BsCalendar } from 'react-icons/bs';\nimport YearPickerSettings, { BasicSettings } from './YearPicker.settings';\nexport default {\n  craft: {\n    displayName: 'YearPicker',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(YearPickerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'YearPicker',\n    exposed: true,\n    icon: BsCalendar,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    readOnly: false,\n    style: {\n      height: '250px',\n      width: '300px',\n      borderRadius: '4px',\n      boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)',\n      padding: '8px',\n      backgroundColor: 'white',\n    },\n    selectedYearColor: '#228be6',\n    selectedRangeColor: 'rgba(34,139,230,.12)',\n    selectedYearRaduis: '',\n    selectionModes: 'single',\n  },\n} as T4DComponentConfig<IYearPickerProps>;\nexport interface IYearPickerProps extends webforms.ComponentProps {\n  readOnly: boolean;\n  selectedYearColor: string;\n  selectedYearRaduis: string;\n  selectedRangeColor: string;\n  selectionModes: 'single' | 'multiple' | 'range';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/YearPicker.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport { IYearPickerProps } from './YearPicker.config';\nimport MultipleMonth from './components/MultipleYear';\nimport RangeMonth from './components/RangeYear';\nimport SingleMonth from './components/SingleYear';\nconst YearPicker: FC<IYearPickerProps> = ({\n  readOnly,\n  selectedYearColor,\n  selectedYearRaduis,\n  selectedRangeColor,\n  selectionModes,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<number>(new Date().getFullYear());\n  const [val, setVal] = useState<Array<number>>([]);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue();\n      if (selectionModes === 'multiple' || selectionModes === 'range') setVal(v);\n      else setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  const handleValueChange = (newValue: number | Array<number>) => {\n    ds.setValue(null, newValue);\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {selectionModes === 'multiple' ? (\n        <MultipleMonth\n          readOnly={readOnly}\n          selectedYearRaduis={selectedYearRaduis}\n          selectedYearColor={selectedYearColor}\n          onValueChange={handleValueChange}\n          data={val}\n        />\n      ) : selectionModes === 'range' ? (\n        <RangeMonth\n          readOnly={readOnly}\n          selectedYearRaduis={selectedYearRaduis}\n          selectedYearColor={selectedYearColor}\n          onValueChange={handleValueChange}\n          data={val}\n          selectedRangeColor={selectedRangeColor}\n        />\n      ) : (\n        <SingleMonth\n          readOnly={readOnly}\n          selectedYearRaduis={selectedYearRaduis}\n          selectedYearColor={selectedYearColor}\n          onValueChange={handleValueChange}\n          data={value}\n        />\n      )}\n    </div>\n  );\n};\nexport default YearPicker;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_datePicker/YearPicker.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nimport { CgCalendarDates } from \"react-icons/cg\";\nimport { CiCalendarDate } from \"react-icons/ci\";\nimport { MdOutlineDateRange } from \"react-icons/md\";\nconst commonSettings: TSetting[] = [\n  {\n    key: 'selectionModes',\n    label: 'Selection modes',\n    type: ESetting.RADIOGROUP,\n    defaultValue: 'single',\n    options: [\n      { value: 'single', icon: CiCalendarDate },\n      { value: 'multiple', icon: MdOutlineDateRange },\n      { value: 'range', icon: CgCalendarDates },\n    ],\n  },\n  {\n    key: 'readOnly',\n    label: 'Read only',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'selectedYearColor',\n    label: 'Color picker',\n    type: ESetting.COLOR_PICKER,\n  },\n  {\n    key: 'selectedRangeColor',\n    label: 'Color range',\n    type: ESetting.COLOR_PICKER,\n  },\n  {\n    key: 'selectedYearRaduis',\n    placeholder: 'selected year(s) border radius',\n    type: ESetting.UNITFIELD,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('style.overflow', 'background','style.fontSize','style.fontWeight'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow', 'background','style.fontSize','style.fontWeight'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/index.tsx", "file_contents": "import config, { ISingleMapProps } from './SingleMap.config';\nimport { T4DComponent, useEnhancedEditor } from '@ws-ui/webform-editor';\nimport Build from './SingleMap.build';\nimport Render from './SingleMap.render';\nconst SingleMap: T4DComponent<ISingleMapProps> = (props) => {\n  const { enabled } = useEnhancedEditor((state) => ({\n    enabled: state.options.enabled,\n  }));\n  return enabled ? <Build {...props} /> : <Render {...props} />;\n};\nSingleMap.craft = config.craft;\nSingleMap.info = config.info;\nSingleMap.defaultProps = config.defaultProps;\nexport default SingleMap;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/MultiMap.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport { IMultiMapProps } from './MultiMap.config';\nconst MultiMap: FC<IMultiMapProps> = ({\n  zoom,\n  mapDragging,\n  style,\n  icone,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [iconUrl, setIconUrl] = useState('fa-solid fa-map-pin');\n  useEffect(() => {\n    const changeIconUrl = () => {\n      setIconUrl(icone);\n    };\n    changeIconUrl();\n  }, [icone]);\n  useEffect(() => {\n    let map: L.Map | null = null;\n    if (mapRef.current) {\n      map = L.map(mapRef.current, { dragging: mapDragging }).setView([51.505, -0.09], zoom);\n      L.tileLayer('https:\n        attribution: '\u00a9 OpenStreetMap contributors',\n      }).addTo(map);\n      var myIcone = L.divIcon({\n        html: `<i class=\"map_icon ${iconUrl}\" style=\"font-size: 30px ; display: flex; align-items: center; justify-content: center; width: 32px; height: 42px\"></i>`,\n        className: '',\n        iconAnchor: [13, 33],\n      });\n      var markers = L.markerClusterGroup();\n      markers.addLayer(L.marker([51.505, -0.09], { icon: myIcone }));\n      markers.addLayer(L.marker([51.505, -0.13], { icon: myIcone }));\n      markers.addLayer(L.marker([51.505, -0.2], { icon: myIcone }));\n      map.addLayer(markers);\n    }\n    return () => {\n      if (map) map.remove();\n    };\n  }, [zoom, mapDragging, style, iconUrl]);\n  return (\n    <span ref={connect} style={style} className={cn(className, classNames)}>\n      <div ref={mapRef} style={{ ...style, zIndex: 1 }}>\n        {' '}\n      </div>\n    </span>\n  );\n};\nexport default MultiMap;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/MultiMap.config.tsx", "file_contents": "import {\n  EComponentKind,\n  splitDatasourceID,\n  T4DComponentConfig,\n  T4DComponentDatasourceDeclaration,\n} from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { TbMapPin2 } from 'react-icons/tb';\nimport MultiMapSettings, { BasicSettings } from './MultiMap.settings';\nexport default {\n  craft: {\n    displayName: 'MultiMap',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(MultiMapSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'MultiMap',\n    exposed: true,\n    icon: TbMapPin2,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      declarations: (props: any) => {\n        const { lat, long, tooltip, datasource = '' } = props;\n        const declarations: T4DComponentDatasourceDeclaration[] = [\n          { path: datasource, iterable: true },\n        ];\n        if (lat && long) {\n          const { id: ds, namespace } = splitDatasourceID(datasource?.trim()) || {};\n          if (!ds) {\n            return;\n          }\n          const latSrc = `${ds}.[].${lat}`;\n          declarations.push({\n            path: namespace ? `${namespace}:${latSrc}` : latSrc,\n          });\n          const longSrc = `${ds}.[].${long}`;\n          declarations.push({\n            path: namespace ? `${namespace}:${longSrc}` : longSrc,\n          });\n          const tooltipSrc = `${ds}.[].${tooltip}`;\n          declarations.push({\n            path: namespace ? `${namespace}:${tooltipSrc}` : tooltipSrc,\n          });\n        }\n        return declarations;\n      },\n      accept: ['entitySel', 'array'],\n    },\n  },\n  defaultProps: {\n    style: { height: '400px', width: '400px' },\n    zoom: 10,\n    animation: true,\n    popup: true,\n    mapDragging: true,\n    distance: 100,\n    icone: 'fa-solid fa-location-dot',\n  },\n} as T4DComponentConfig<IMultiMapProps>;\nexport interface IMultiMapProps extends webforms.ComponentProps {\n  zoom: number;\n  animation: boolean;\n  popup: boolean;\n  mapDragging: boolean;\n  long: string;\n  lat: string;\n  tooltip: string;\n  distance: number;\n  icone: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/MultiMap.render.tsx", "file_contents": "import { useDataLoader, useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport 'leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport {\n  useEnhancedNode,\n  useDsChangeHandler,\n  entitySubject,\n  EntityActions,\n} from '@ws-ui/webform-editor';\nimport { IMultiMapProps } from './MultiMap.config';\nimport { getLocationIndex, getValueByPath, getNearbyCoordinates, isDataValid } from './utils';\nimport { cloneDeep, debounce } from 'lodash';\ntype LoactionAndPopup = {\n  longitude: number;\n  latitude: number;\n  popupMessage?: HTMLElement | null;\n};\nconst MultiMap: FC<IMultiMapProps> = ({\n  popup,\n  zoom,\n  animation,\n  mapDragging,\n  distance,\n  long,\n  lat,\n  tooltip,\n  icone,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const { id: nodeID } = useEnhancedNode();\n  const [size, setSize] = useState({ width: style?.width, height: style?.height });\n  const ref = useRef<HTMLElement | null>(null);\n  const [selected, setSelected] = useState(-1);\n  const [_scrollIndex, setScrollIndex] = useState(0);\n  const [_count, setCount] = useState(0);\n  const [allEntities, setAllEntites] = useState<any[]>(() => []);\n  const [values, setValues] = useState<LoactionAndPopup[]>(() => []);\n  const [entities, setEntities] = useState<any[]>(() => []);\n  const mapRef = useRef<HTMLDivElement>(null);\n  const map = useRef<L.Map | null>(null);\n  const {\n    sources: { datasource, currentElement: ce },\n  } = useSources({\n    acceptIteratorSel: true,\n  });\n  const { fetchIndex } = useDataLoader({\n    source: datasource,\n  });\n  const {\n    fetchIndex: fetchIndexClone,\n    query,\n    loaderDatasource: ds,\n  } = useDataLoader({\n    source: ds,\n  });\n  const applyBounds = useCallback(\n    debounce(async (bounds: L.LatLngBounds, prevBounds?: L.LatLngBounds) => {\n      if (!bounds || (prevBounds && bounds.equals(prevBounds))) {\n        return;\n      }\n      if (ds.type === 'scalar' && ds.dataType === 'array') {\n        const v = await ds.getValue();\n        if (v) {\n          setValues(\n            v.map((value: any) => ({\n              longitude: +getValueByPath(value, long),\n              latitude: +getValueByPath(value, lat),\n              popupMessage: getValueByPath(value, tooltip),\n            })),\n          );\n        }\n      } else {\n        const queryStr = `${lat} > :1 AND ${lat} < :2 $ AND ${long} > :3 AND ${long} < :4`;\n        const placeholders = [\n          bounds.getSouth(),\n          bounds.getNorth(),\n          bounds.getWest(),\n          bounds.getEast(),\n        ];\n        query.entitysel({\n          queryString: queryStr,\n          placeholders,\n        });\n        fetchIndexClone(0);\n      }\n    }, 300),\n    [ds, lat, long],\n  );\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchIndex(0);\n      setEntities(data);\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchIndex(0);\n      setAllEntites(\n        data.map((item) => ({\n          longitude: item[long as keyof typeof item] as number,\n          latitude: item[lat as keyof typeof item] as number,\n          popupMessage: item[tooltip as keyof typeof item] as any,\n        })),\n      );\n    };\n    fetchData();\n  }, [ds]);\n  let myIcone = L.divIcon({\n    html: `<i class=\"map_icon ${icone}\" style=\"font-size: 30px ; display: flex; align-items: center; justify-content: center; width: 32px; height: 42px\"></i>`,\n    className: '',\n    iconAnchor: [13, 33],\n  });\n  const { updateCurrentDsValue } = useDsChangeHandler({\n    source: datasource,\n    currentDs: ce,\n    selected,\n    setSelected,\n    setScrollIndex,\n    setCount,\n    fetchIndex,\n    onDsChange: async (length, selected) => {\n      const data = await fetchIndex(0);\n      setEntities(data);\n      if (selected >= 0) {\n        updateCurrentDsValue({\n          index: selected < length ? selected : 0,\n          forceUpdate: true,\n        });\n      }\n    },\n    onCurrentDsChange: (selected) => {\n      entitySubject.next({\n        action: EntityActions.UPDATE,\n        payload: {\n          nodeID,\n          rowIndex: selected,\n        },\n      });\n    },\n  });\n  const handleSelectedElementChange = async ({ index }: { index: number }) => {\n    if (!ds || !ce) {\n      return;\n    }\n    const value = await ds.getValue();\n    await ce.setValue(null, value[index]);\n  };\n  useEffect(() => {\n    console.log(datasource.type);\n    if (!mapRef.current && !ds) return;\n    const updateBoundsAndFetchData = () => {\n      const bounds = map.current?.getBounds();\n      if (bounds) {\n        applyBounds(bounds);\n      }\n    };\n    if (mapRef.current) {\n      map.current = L.map(mapRef.current, { dragging: mapDragging }).setView(\n        [51.505, -0.09],\n        zoom,\n        { animate: animation },\n      );\n      mapRef.current.addEventListener('mousedown', (event) => {\n        event.stopPropagation();\n      });\n      L.tileLayer('https:\n      map.current.on('moveend', updateBoundsAndFetchData);\n    }\n    return () => {\n      if (map.current) {\n        map.current.off();\n        map.current.remove();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!mapRef.current || !map.current) return;\n    if (entities.length > 0 || values.length > 0) {\n      const groups =\n        datasource.type === 'scalar'\n          ? getNearbyCoordinates(values, distance)\n          : getNearbyCoordinates(\n              entities.map((item) => ({\n                longitude: item[long as keyof typeof item] as number,\n                latitude: item[lat as keyof typeof item] as number,\n                popupMessage: item[tooltip as keyof typeof item] as any,\n              })),\n              distance,\n            );\n      map.current?.eachLayer((layer) => {\n        if (layer instanceof L.Marker) {\n          layer.remove();\n        }\n      });\n      const markers = L.markerClusterGroup();\n      const markerList = [];\n      for (let i = 0; i < groups.length; i++) {\n        for (let j = 0; j < groups[i].length; j++) {\n          const marker = L.marker([+groups[i][j]?.latitude, +groups[i][j]?.longitude], {\n            icon: myIcone,\n          });\n          if (groups[i][j].popupMessage && popup) {\n            const popupMessage = groups[i][j].popupMessage as HTMLElement;\n            marker.bindPopup(popupMessage, { offset: L.point(3, -10) });\n          }\n          markerList.push(marker);\n          marker.on('click', async (event) => {\n            const { lat, lng } = (event as L.LeafletMouseEvent).latlng;\n            if (datasource.type === 'scalar') {\n              const index = getLocationIndex(lat, lng, values);\n              handleSelectedElementChange({ index });\n            } else {\n              const index = getLocationIndex(lat, lng, allEntities as LoactionAndPopup[]);\n              updateCurrentDsValue({ index, forceUpdate: true });\n            }\n          });\n        }\n        markers.addLayers(markerList);\n        map.current.addLayer(markers);\n      }\n    }\n  }, [entities, map.current, values]);\n  useEffect(() => {\n    if (!ce) return;\n    const listener = async () => {\n      const v = await ce.getValue();\n      if (v) map.current?.flyTo([+getValueByPath(v, lat), +getValueByPath(v, long)]);\n    };\n    listener();\n    ce.addListener('changed', listener);\n    return () => {\n      ce.removeListener('changed', listener);\n    };\n  }, [ce]);\n  useEffect(() => {\n    const observer = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        const { width, height } = entry.contentRect;\n        setSize({ width, height });\n      }\n    });\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n    return () => {\n      if (ref.current) {\n        observer.unobserve(ref.current);\n      }\n    };\n  }, []);\n  return (\n    <div\n      ref={(R) => {\n        connect(R);\n        ref.current = R;\n      }}\n      style={style}\n      className={cn(className, classNames)}\n    >\n      {isDataValid(values ? values : entities) ? (\n        <div ref={mapRef} style={{ ...size, zIndex: 1 }} />\n      ) : (\n        <div\n          className=\"bg-red-50 border border-red-300 text-red-700 px-4 py-3 rounded-lg shadow-md\"\n          role=\"alert\"\n        >\n          <div className=\"flex items-center\">\n            <strong className=\"font-bold text-red-700\">Error!</strong>\n          </div>\n          <span className=\"block sm:inline mt-1 \">\n            Datasource does not match the expected format.\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default MultiMap;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/MultiMap.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'zoom',\n    label: 'Zoom',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 10,\n  },\n  {\n    key: 'mapDragging',\n    label: 'Map dragging',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'animation',\n    label: 'Animation',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'popup',\n    label: 'Popup',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'distance',\n    label: 'Marker group distance (Km)',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 100,\n  },\n  {\n    key: 'icone',\n    label: 'Marker Icon',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-solid fa-location-dot',\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Data Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'currentPosition',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'long',\n    label: 'Longitude',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'lat',\n    label: 'Latitude',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'tooltip',\n    label: 'Tooltip',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('style.overflow', 'font', 'background', 'dataAccess'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'style.fontFamily',\n    'style.fontWeight',\n    'style.fontSize',\n    'style.textAlign',\n    'style.textTransform',\n    'background',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/SingleMap.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { ISingleMapProps } from './SingleMap.config';\nconst SingleMap: FC<ISingleMapProps> = ({\n  popup,\n  zoom,\n  markerDragging,\n  mapDragging,\n  icon,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [iconUrl, setIconUrl] = useState('fa-solid fa-map-pin');\n  useEffect(() => {\n    const changeIconUrl = () => {\n      setIconUrl(icon);\n    };\n    changeIconUrl();\n  }, [icon]);\n  useEffect(() => {\n    let map: L.Map | null = null;\n    if (mapRef.current) {\n      map = L.map(mapRef.current, { dragging: mapDragging }).setView([51.505, -0.09], zoom);\n      L.tileLayer('https:\n        attribution: '\u00a9 OpenStreetMap contributors',\n      }).addTo(map);\n      var myIcon = L.divIcon({\n        html: `<i class=\"map_icon ${iconUrl}\" style=\"font-size: 30px ; display: flex; align-items: center; justify-content: center; width: 32px; height: 42px\"></i>`,\n        className: '',\n        iconAnchor: [13, 33],\n      });\n      const marker = L.marker([51.505, -0.09], {\n        draggable: markerDragging,\n        icon: myIcon,\n      }).addTo(map);\n      if (popup) marker.bindPopup('your message here', { offset: L.point(3, -10) }).openPopup();\n    }\n    return () => {\n      if (map) map.remove();\n    };\n  }, [zoom, markerDragging, popup, mapDragging, iconUrl]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div ref={mapRef} style={{ ...style, zIndex: 1 }}>\n        {' '}\n      </div>\n    </div>\n  );\n};\nexport default SingleMap;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/SingleMap.config.tsx", "file_contents": "import {\n  EComponentKind,\n  splitDatasourceID,\n  T4DComponentConfig,\n  T4DComponentDatasourceDeclaration,\n} from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { FaMapMarkerAlt } from 'react-icons/fa';\nimport SingleMapSettings, { BasicSettings } from './SingleMap.settings';\nexport default {\n  craft: {\n    displayName: 'SingleMap',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(SingleMapSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'SingleMap',\n    exposed: true,\n    icon: FaMapMarkerAlt,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      declarations: (props:any) => {\n        const { lat, long, datasource = '' } = props;\n        const declarations: T4DComponentDatasourceDeclaration[] = [\n          { path: datasource, iterable: true },\n        ];\n        if (lat && long) {\n          const { id: ds, namespace } = splitDatasourceID(datasource?.trim()) || {};\n          if (!ds) {\n            return;\n          }\n          const latSrc = `${ds}.${lat}`;\n          declarations.push({\n            path: namespace ? `${namespace}:${latSrc}` : latSrc,\n          });\n          const longSrc = `${ds}.${long}`;\n          declarations.push({\n            path: namespace ? `${namespace}:${longSrc}` : longSrc,\n          });\n        }\n        return declarations;\n      },\n      accept: ['object', 'entity'],\n    },\n  },\n  defaultProps: {\n    style: { height: '400px', width: '400px' },\n    zoom: 10,\n    markerDragging: false,\n    popup: false,\n    mapDragging: true,\n    marker: true,\n    icon: 'fa-solid fa-location-dot',\n  },\n} as T4DComponentConfig;\nexport interface ISingleMapProps extends webforms.ComponentProps {\n  zoom: number;\n  markerDragging: boolean;\n  popup: boolean;\n  mapDragging: boolean;\n  marker: boolean;\n  long: string;\n  lat: string;\n  tooltip: string;\n  icon: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/SingleMap.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useRef } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport { getValueByPath } from './../multi/utils';\nimport { ISingleMapProps } from './SingleMap.config';\ninterface LoactionAndPopup {\n  longitude: number;\n  latitude: number;\n  popupMessage: HTMLElement | null;\n}\nconst SingleMap: FC<ISingleMapProps> = ({\n  popup,\n  zoom,\n  markerDragging,\n  mapDragging,\n  marker,\n  long,\n  lat,\n  icon,\n  tooltip,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<LoactionAndPopup>();\n  const [size, setSize] = useState({ width: style?.width, height: style?.height });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isPositionChanged, setIsPositionChanged] = useState(false);\n  const ref = useRef<HTMLElement | null>(null);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue();\n      if (getValueByPath(v, long) && getValueByPath(v, lat)) {\n        setValue({\n          longitude: +getValueByPath(v, long),\n          latitude: +getValueByPath(v, lat),\n          popupMessage: getValueByPath(v, tooltip),\n        });\n        setIsLoaded(true);\n      }\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, []);\n  const mapRef = useRef<HTMLDivElement>(null);\n  const map = useRef<L.Map | null>(null);\n  const markers = useRef<L.Marker | null>(null);\n  var myIcon = L.divIcon({\n    html: `<i class=\"map_icon ${icon}\" style=\"font-size: 30px ; display: flex; align-items: center; justify-content: center; width: 32px; height: 42px\"></i>`,\n    className: '',\n    iconAnchor: [13, 33],\n  });\n  useEffect(() => {\n    if (mapRef.current) {\n      map.current = L.map(mapRef.current, { dragging: mapDragging }).setView(\n        [value!.latitude, value!.longitude],\n        zoom,\n      );\n      mapRef.current.addEventListener('mousedown', (event) => {\n        event.stopPropagation();\n      });\n      L.tileLayer('https:\n        attribution: '\u00a9 OpenStreetMap contributors',\n      }).addTo(map.current);\n      if (marker) {\n        markers.current = L.marker([+value!.latitude, +value!.longitude], {\n          icon: myIcon,\n          draggable: markerDragging,\n        }).addTo(map.current);\n        if (popup) {\n          const popUpMessage = value!.popupMessage as HTMLElement;\n          markers.current.bindPopup(popUpMessage, { offset: L.point(3, -10) });\n        }\n        markers.current.on('moveend', (event) => {\n          const newCenter = (event.target as L.Marker).getLatLng();\n          setValue({\n            longitude: newCenter.lng,\n            latitude: newCenter.lat,\n            popupMessage: value!.popupMessage,\n          });\n          setIsPositionChanged(true);\n        });\n        markers.current.on('mousedown', (event) => {\n          event.originalEvent?.stopPropagation(); \n        });\n      }\n    }\n    return () => {\n      if (map) map.current?.remove();\n    };\n  }, [zoom, size, map, isLoaded]);\n  useEffect(() => {\n    if (value && isPositionChanged) {\n      const positionChange = async () => {\n        const v = await ds.getValue();\n        function setNestedValue(obj: any, path: string, value: any): void {\n          const keys = path.split('.');\n          let target = obj;\n          for (let i = 0; i < keys.length - 1; i++) {\n            target = target[keys[i]];\n            if (target === undefined) {\n              target = {};\n            }\n          }\n          target[keys[keys.length - 1]] = value;\n        }\n        setNestedValue(v, long, value.longitude);\n        setNestedValue(v, lat, value.latitude);\n        ds.setValue(null, v);\n      };\n      positionChange();\n      setIsPositionChanged(false);\n    }\n  }, [isPositionChanged]);\n  useEffect(() => {\n    if (!isPositionChanged) {\n      map.current?.flyTo([value!.latitude, value!.longitude]);\n      if (map.current && marker) {\n        markers.current?.setLatLng({\n          lat: value!.latitude,\n          lng: value!.longitude,\n        });\n        if (popup) {\n          const popUpMessage = value!.popupMessage as HTMLElement;\n          markers.current?.bindPopup(popUpMessage);\n        }\n      }\n    }\n  }, [value]);\n  useEffect(() => {\n    const observer = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        const { width, height } = entry.contentRect;\n        setSize({ width, height });\n      }\n    });\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n    return () => {\n      if (ref.current) {\n        observer.unobserve(ref.current);\n      }\n    };\n  }, []);\n  function isDataValid(obj: any): obj is LoactionAndPopup {\n    return typeof obj == 'object' && !Array.isArray(obj) && 'latitude' in obj && 'longitude' in obj;\n  }\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {isDataValid(value) ? (\n        <div ref={mapRef} style={{ ...size, zIndex: 1 }} />\n      ) : (\n        <div\n          className=\"bg-red-50 border border-red-300 text-red-700 px-4 py-3 rounded-lg shadow-md\"\n          role=\"alert\"\n        >\n          <div className=\"flex items-center\">\n            <strong className=\"font-bold text-red-700\">Error!</strong>\n          </div>\n          <span className=\"block sm:inline mt-1 \">\n            Datasource does not match the expected format.\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default SingleMap;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/SingleMap.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'zoom',\n    label: 'Zoom',\n    type: ESetting.NUMBER_FIELD,\n    defaultValue: 10,\n  },\n  {\n    key: 'mapDragging',\n    label: 'Map dragging',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'marker',\n    label: 'Marker',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'popup',\n    label: 'Popup',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'markerDragging',\n    label: 'Marker dragging',\n    type: ESetting.CHECKBOX,\n    defaultValue: false,\n  },\n  {\n    key: 'icon',\n    label: 'Marker Icon',\n    type: ESetting.ICON_PICKER,\n    defaultValue: 'fa-solid fa-location-dot',\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Data Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'long',\n    label: 'Longitude',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'lat',\n    label: 'Latitude',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'tooltip',\n    label: 'Tooltip',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('style.overflow', 'font', 'background', 'dataAccess'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter(\n    'style.overflow',\n    'style.fontFamily',\n    'style.fontWeight',\n    'style.fontSize',\n    'style.textAlign',\n    'style.textTransform',\n    'background',\n  ),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/useDsChangeHandler.ts", "file_contents": "import isEqual from 'lodash/isEqual';\nexport async function updateEntity({\n  index,\n  newIndex,\n  datasource,\n  currentElement,\n  fireEvent = true,\n  onBeforeUpdate,\n}: {\n  index: number;\n  newIndex?: number;\n  datasource: datasources.DataSource;\n  currentElement: datasources.DataSource;\n  fireEvent?: boolean;\n  onBeforeUpdate?: () => void;\n}) {\n  const { entitysel: sel } = datasource as any;\n  if (!sel) {\n    return;\n  }\n  const entity = index >= 0 ? await sel.getEntity(index) : null;\n  const hasDifferentNamespace =\n    datasource && currentElement ? datasource.namespace !== currentElement.namespace : false;\n  const needRefresh = !currentElement.parentSource || hasDifferentNamespace;\n  onBeforeUpdate?.();\n  await currentElement.setValue(null, entity, !needRefresh && fireEvent);\n  if (newIndex !== undefined) {\n    (currentElement as any).entity?.setPos(newIndex);\n  }\n  if (needRefresh) {\n    await refreshCurrentEntity(currentElement, entity);\n  }\n}\nexport async function refreshCurrentEntity(source: any, entity: any, doFireEvent: boolean = true) {\n  if (entity) {\n    const sourceAttributes = source.filterAttributesText.split(',').filter(Boolean);\n    const entityAttributes = (entity._private.filterAttributes || '').split(',').filter(Boolean);\n    if (!isEqual(sourceAttributes, entityAttributes)) {\n      source.filterAttributesText = Array.from(\n        new Set([...sourceAttributes, ...entityAttributes]),\n      ).join(',');\n      entity._private.filterAttributes = source.filterAttributesText;\n      entity._private.inited = false;\n      await entity.fetch();\n      entity._private.inited = true;\n    }\n  }\n  await source.recomputeChildren(doFireEvent);\n  if (doFireEvent) source.fireEvent('changed');\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_map/utils.ts", "file_contents": "type LoactionAndPopup = {\n  longitude: number;\n  latitude: number;\n  popupMessage?: HTMLElement | null;\n};\nexport function getNearbyCoordinates(\n  coordinates: any[],\n  distanceThreshold: number,\n): LoactionAndPopup[][] {\n  const result: LoactionAndPopup[][] = [];\n  function calculateDistance(coord1: LoactionAndPopup, coord2: LoactionAndPopup): number {\n    const R = 6371; \n    const lat1 = (coord1.latitude * Math.PI) / 180;\n    const lat2 = (coord2.latitude * Math.PI) / 180;\n    const dLat = ((coord2.latitude - coord1.latitude) * Math.PI) / 180;\n    const dLon = ((coord2.longitude - coord1.longitude) * Math.PI) / 180;\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; \n    return distance;\n  }\n  function findOrCreateGroup(coord: LoactionAndPopup): LoactionAndPopup[] {\n    for (const group of result) {\n      for (const existingCoord of group) {\n        if (calculateDistance(existingCoord, coord) <= distanceThreshold) {\n          group.push(coord);\n          return group;\n        }\n      }\n    }\n    const newGroup: LoactionAndPopup[] = [coord];\n    result.push(newGroup);\n    return newGroup;\n  }\n  coordinates.forEach((coord) => {\n    findOrCreateGroup(coord);\n  });\n  return result;\n}\nexport function getValueByPath(obj: any, path: string) {\n  if (path) {\n    let keys = path.split('.');\n    function traverse(obj: any, keys: any) {\n      if (keys.length === 0) {\n        return obj;\n      }\n      if (obj && typeof obj === 'object') {\n        let key = keys.shift();\n        return traverse(obj[key], keys);\n      } else {\n        return undefined;\n      }\n    }\n    return traverse(obj, keys);\n  }\n}\nexport const getLocationIndex = (\n  lat: number,\n  lon: number,\n  locationArray: LoactionAndPopup[],\n): number => {\n  return locationArray.findIndex(\n    (location) => +location.longitude === lon && +location.latitude === lat,\n  );\n};\nexport const isDataValid = (arr: any[]) => {\n  return (\n    arr.length >= 0 &&\n    arr.every((obj) => typeof obj === 'object' && 'latitude' in obj && 'longitude' in obj)\n  );\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/index.tsx", "file_contents": "import Tree from './Tree';\nexport default {\n  Tree,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/Tree.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useState } from 'react';\nimport { ITreeProps } from './Tree.config';\nconst treeData = [\n  {\n    key: '1',\n    icon: 'fa-regular fa-folder',\n    label: 'Node 1',\n    children: [\n      {\n        key: '2',\n        label: 'Node 1.1',\n        icon: 'fa-solid fa-inbox',\n        children: [\n          { key: '4', label: 'Node 1.1.1', icon: 'fa-regular fa-file' },\n          { key: '5', label: 'Node 1.1.2', icon: 'fa-regular fa-file' },\n        ],\n      },\n      { key: '3', icon: 'fa-regular fa-calendar-days', label: 'Node 1.2' },\n    ],\n  },\n  { key: '4', icon: 'fa-regular fa-folder', label: 'Node 2' },\n];\nconst Tree: FC<ITreeProps> = ({ style, className, classNames = [] }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <TreeNodeComponent treeData={treeData} />\n    </div>\n  );\n};\nexport default Tree;\ninterface TreeNodeData {\n  key: string;\n  icon?: string;\n  label: string;\n  children?: TreeNodeData[];\n}\ninterface Treetest {\n  treeData?: TreeNodeData[];\n  onLastItemClick?: (node: TreeNodeData) => void;\n}\nfunction TreeNodeComponent({ treeData, onLastItemClick }: Treetest) {\n  return (\n    <ul>\n      {treeData?.map((node, index) => (\n        <TreeNode\n          node={node}\n          key={node.key}\n          isLast={index === treeData.length - 1}\n          onLastItemClick={onLastItemClick}\n        />\n      ))}\n    </ul>\n  );\n}\ninterface TreeNodeProps {\n  node: TreeNodeData;\n  isLast: boolean;\n  onLastItemClick?: (node: TreeNodeData) => void;\n  expand?: boolean;\n}\nfunction TreeNode({ node, isLast, onLastItemClick, expand }: TreeNodeProps) {\n  const { children, label, icon } = node;\n  const [showChildren, setShowChildren] = useState(expand || false);\n  const handleClick = () => {\n    if (isLast) {\n      setShowChildren(!showChildren);\n      if (onLastItemClick) {\n        onLastItemClick(node);\n      }\n    } else {\n      setShowChildren(!showChildren);\n    }\n  };\n  return (\n    <>\n      <div onClick={handleClick} style={{ marginBottom: '10px' }}>\n        <div className=\"flex items-center gap-1\" style={{ cursor: children ? 'pointer' : '' }}>\n          {children && (\n            <i className={`fa-solid ${showChildren ? 'fa-angle-down' : 'fa-angle-right'} mr-2`}></i>\n          )}\n          {icon && <i className={` ${icon} mr-1`}></i>}\n          <span>{label}</span>\n        </div>\n      </div>\n      <ul style={{ paddingLeft: '10px', marginLeft: '27px' }}>\n        {showChildren && <TreeNodeComponent treeData={children} />}\n      </ul>\n    </>\n  );\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/Tree.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineTextSnippet } from 'react-icons/md';\nimport TreeSettings, { BasicSettings } from './Tree.settings';\nexport default {\n  craft: {\n    displayName: 'Tree',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(TreeSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Tree',\n    exposed: true,\n    icon: MdOutlineTextSnippet,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n      {\n        label: 'On KeyDown',\n        value: 'onkeydown',\n      },\n      {\n        label: 'On KeyUp',\n        value: 'onkeyup',\n      },\n    ],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    expand: true,\n  },\n} as T4DComponentConfig<ITreeProps>;\nexport interface ITreeProps extends webforms.ComponentProps {\n  expand: boolean;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/Tree.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState } from 'react';\nimport TreeNodeComponent from './components/TreeNodeComponent';\nimport TreeNodeData from './components/TreeNodeData';\nimport { ITreeProps } from './Tree.config';\nconst Tree: FC<ITreeProps> = ({ expand, style, className, classNames = [] }) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState<TreeNodeData[]>([]);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<TreeNodeData[]>();\n      setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <TreeNodeComponent treeData={value} expand={expand} />\n    </div>\n  );\n};\nexport default Tree;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/Tree.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'expand',\n    label: 'Expand',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/TreeNode.tsx", "file_contents": "import TreeNodeData from './TreeNodeData';\nimport { useState } from 'react';\nimport { webformLoaderSubject, WebformLoaderActions } from '@ws-ui/webform-editor';\nimport { TreeNodeComponent } from '.';\ninterface TreeNodeProps {\n  node: TreeNodeData;\n  isLast: boolean;\n  onLastItemClick?: (node: TreeNodeData) => void;\n  expand?: boolean;\n}\nfunction TreeNode({ node, isLast, onLastItemClick, expand }: TreeNodeProps) {\n  const { children, label, icon, url, webform, target } = node;\n  const [showChildren, setShowChildren] = useState(expand || false);\n  const handleClick = () => {\n    if (isLast) {\n      setShowChildren(!showChildren);\n      if (onLastItemClick) {\n        onLastItemClick(node);\n      }\n    } else {\n      setShowChildren(!showChildren);\n    }\n  };\n  const handleChildClick = () => {\n    if (webform && target) {\n      webformLoaderSubject.next({\n        id: webform,\n        action: WebformLoaderActions.LOAD,\n        payload: { target },\n      });\n    }\n  };\n  return (\n    <>\n      <div onClick={handleClick} style={{ marginBottom: '10px' }}>\n        <div className=\"flex items-center gap-1\" style={{ cursor: children ? 'pointer' : '' }}>\n          {children && (\n            <i className={`fa-solid ${showChildren ? 'fa-angle-down' : 'fa-angle-right'} mr-2`}></i>\n          )}\n          {icon && <i className={`${icon} mr-1`}></i>}\n          {url ? (\n            <a href={url}>{label}</a>\n          ) : (\n            <div className={`${webform && 'cursor-pointer'}  `} onClick={handleChildClick}>\n              {label}\n            </div>\n          )}\n        </div>\n      </div>\n      {showChildren && children && (\n        <ul style={{ paddingLeft: '10px', marginLeft: '27px' }}>\n          <TreeNodeComponent treeData={children} expand={expand} />\n        </ul>\n      )}\n    </>\n  );\n}\nexport default TreeNode;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/TreeNodeComponent.tsx", "file_contents": "import { TreeNode } from './';\nimport TreeNodeData from './TreeNodeData';\ninterface TreeNodeComponentProps {\n  treeData?: TreeNodeData[];\n  onLastItemClick?: (node: TreeNodeData) => void;\n  expand?: boolean;\n}\nfunction TreeNodeComponent({ treeData, onLastItemClick, expand }: TreeNodeComponentProps) {\n  return (\n    <ul>\n      {treeData?.map((node, index) => (\n        <TreeNode\n          node={node}\n          key={node.key}\n          isLast={index === treeData.length - 1}\n          onLastItemClick={onLastItemClick}\n          expand={expand}\n        />\n      ))}\n    </ul>\n  );\n}\nexport default TreeNodeComponent;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/rihab-ze/qodly_treeView/TreeNodeData.tsx", "file_contents": "interface TreeNodeData {\n  key: string;\n  label: string;\n  icon?: string;\n  url?: string;\n  webform?: string;\n  target?: string;\n  children?: TreeNodeData[];\n}\nexport default TreeNodeData;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Calendar.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport {\n  MdKeyboardArrowLeft,\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowLeft,\n  MdKeyboardDoubleArrowRight,\n} from 'react-icons/md';\nimport {\n  isEqual,\n  startOfWeek,\n  endOfWeek,\n  endOfMonth,\n  isToday,\n  startOfMonth,\n  eachDayOfInterval,\n  format,\n  isSameMonth,\n  addDays,\n} from 'date-fns';\nimport { fr, es, de, enUS } from 'date-fns/locale';\nimport { ICalendarProps } from './Calendar.config';\nimport { colorToHex } from '../shared/colorUtils';\nconst Calendar: FC<ICalendarProps> = ({\n  type,\n  weekStart,\n  language,\n  attributes,\n  property,\n  rowHeight,\n  color,\n  selectedColor,\n  yearNav,\n  borderRadius,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const date = new Date();\n  const startOfWeekInt = parseInt(weekStart, 10) as 0 | 1;\n  const firstDayOfMonth = startOfWeek(startOfMonth(date), { weekStartsOn: startOfWeekInt });\n  const daysInMonth = useMemo(\n    () =>\n      eachDayOfInterval({\n        start: startOfWeek(startOfMonth(date), { weekStartsOn: startOfWeekInt }),\n        end: endOfWeek(endOfMonth(date), { weekStartsOn: startOfWeekInt }),\n      }),\n    [date],\n  );\n  let localeVar = language === 'fr' ? fr : language === 'es' ? es : language === 'de' ? de : enUS;\n  let weekDays = Array.from({ length: type === 'work' ? 5 : 7 }, (_, i) => {\n    return {\n      index: addDays(startOfWeek(date, { weekStartsOn: startOfWeekInt }), i),\n      title: format(addDays(startOfWeek(date, { weekStartsOn: startOfWeekInt }), i), 'EE', {\n        locale: localeVar,\n      }),\n      day: format(addDays(startOfWeek(date, { weekStartsOn: startOfWeekInt }), i), 'EEEE', {\n        locale: localeVar,\n      }),\n    };\n  });\n  const filteredDays = useMemo(\n    () =>\n      daysInMonth.filter((day) => {\n        if (type === 'work') {\n          const dayOfWeek = day.getDay();\n          return dayOfWeek >= 1 && dayOfWeek <= 5;\n        }\n        return true;\n      }),\n    [daysInMonth, type],\n  );\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"calendar-container flex flex-col gap-4 w-full h-full\">\n        <div\n          className={`calendar-header w-full flex justify-center gap-2 items-center ${style?.fontSize ? style?.fontSize : 'text-xl'}`}\n        >\n          <button\n            title=\"Previous year\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n            style={{ display: yearNav ? '' : 'none' }}\n          >\n            <MdKeyboardDoubleArrowLeft />\n          </button>\n          <button\n            title=\"Previous month\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n          >\n            <MdKeyboardArrowLeft />\n          </button>\n          <h2\n            className={`month-title w-44 text-center ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n          >\n            {format(date, 'MMMM yyyy', { locale: localeVar }).charAt(0).toUpperCase() +\n              format(date, 'MMMM yyyy', { locale: localeVar }).slice(1)}\n          </h2>\n          <button\n            title=\"Next month\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n          >\n            <MdKeyboardArrowRight />\n          </button>\n          <button\n            title=\"Next year\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n            style={{ display: yearNav ? '' : 'none' }}\n          >\n            <MdKeyboardDoubleArrowRight />\n          </button>\n        </div>\n        <div\n          className=\"calendar-grid w-full grid justify-center\"\n          style={{\n            gridTemplateColumns: `repeat(${weekDays.length}, minmax(0, 1fr))`,\n          }}\n        >\n          {weekDays.map((day) => (\n            <div\n              key={day.title}\n              title={day.day}\n              className={`weekday-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'} ${style?.fontSize ? style?.fontSize : 'text-lg'} text-center`}\n            >\n              {format(day.index, 'EEE', { locale: localeVar }).charAt(0).toUpperCase() +\n                format(day.index, 'EEE', { locale: localeVar }).slice(1)}\n            </div>\n          ))}\n          {filteredDays.map((day, index) => (\n            <div\n              key={index}\n              className={`day-container flex flex-col justify-start items-start gap-1 p-1 w-full`}\n              style={{\n                color: isSameMonth(day, date) ? (style?.color ? style?.color : 'black') : '#C0C0C0',\n                borderWidth: style?.borderWidth ? style?.borderWidth : '1px',\n                borderColor: style?.borderColor ? style?.borderColor : '#E0E0E0',\n                backgroundColor: isSameMonth(day, date)\n                  ? style?.backgroundColor\n                    ? style?.backgroundColor\n                    : 'white'\n                  : '#F3F4F6',\n                height: rowHeight,\n              }}\n            >\n              <div className=\"h-fit w-full\">\n                <span\n                  className={`day-number h-7 w-7 flex items-center justify-center ${style?.fontWeight ? style?.fontWeight : 'font-medium'} rounded-full cursor-pointer hover:bg-gray-300 duration-300`}\n                  style={{\n                    backgroundColor: isToday(day) ? color : '',\n                    color: isToday(day) ? 'white' : '',\n                  }}\n                >\n                  {format(day, 'd')}\n                </span>\n              </div>\n              {isEqual(day, firstDayOfMonth) ? (\n                <div\n                  className=\"element-container px-2 py-1 flex flex-col w-full border-l-4 text-black\"\n                  style={{\n                    borderRadius: borderRadius,\n                    backgroundColor: colorToHex(selectedColor) + '50',\n                    borderLeftColor: colorToHex(selectedColor),\n                  }}\n                >\n                  <span\n                    className={`element-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'} line-clamp-2`}\n                  >\n                    {property ? '{' + property + '}' : 'No Property Set'}\n                  </span>\n                  <div className=\"element-detail flex flex-wrap\">\n                    {attributes?.map((attribute, index) => (\n                      <span\n                        key={index}\n                        className={`attribute ${style?.fontSize ? style?.fontSize : 'text-sm'} basis-1/2 text-start`}\n                      >\n                        {attribute.Attribute}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              ) : null}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Calendar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Calendar.config.tsx", "file_contents": "import {\n  EComponentKind,\n  splitDatasourceID,\n  T4DComponentConfig,\n  T4DComponentDatasourceDeclaration,\n} from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdOutlineCalendarMonth } from 'react-icons/md';\nimport CalendarSettings, { BasicSettings } from './Calendar.settings';\nexport default {\n  craft: {\n    displayName: 'Calendar',\n    rules: {\n      canMoveIn: () => true,\n      canMoveOut: () => true,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(CalendarSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'Calendar',\n    exposed: true,\n    icon: MdOutlineCalendarMonth,\n    events: [\n      {\n        label: 'On Date Click',\n        value: 'onDateClick',\n      },\n      {\n        label: 'On Item Click',\n        value: 'onItemClick',\n      },\n      {\n        label: 'On Month Change',\n        value: 'onMonthChange',\n      },\n    ],\n    datasources: {\n      accept: ['array', 'entitysel'],\n      declarations: (props: any) => {\n        const {\n          property,\n          startDate,\n          endDate,\n          colorProp,\n          attributes,\n          datasource = '',\n        } = props as ICalendarProps;\n        const declarations: T4DComponentDatasourceDeclaration[] = [\n          { path: datasource, iterable: true },\n        ];\n        const { id: ds, namespace } = splitDatasourceID(datasource?.trim()) || {};\n        if (property) {\n          const propertySrc = `${ds}.[].${property}`;\n          declarations.push({ path: namespace ? `${namespace}:${propertySrc}` : propertySrc });\n        }\n        if (startDate) {\n          const startDateSrc = `${ds}.[].${startDate}`;\n          declarations.push({ path: namespace ? `${namespace}:${startDateSrc}` : startDateSrc });\n        }\n        if (endDate) {\n          const endDateSrc = `${ds}.[].${endDate}`;\n          declarations.push({ path: namespace ? `${namespace}:${endDateSrc}` : endDateSrc });\n        }\n        if (colorProp) {\n          const colorPropSrc = `${ds}.[].${colorProp}`;\n          declarations.push({ path: namespace ? `${namespace}:${colorPropSrc}` : colorPropSrc });\n        }\n        if (attributes) {\n          attributes.forEach((attr) => {\n            const attrSrc = `${ds}.[].${attr.Attribute}`;\n            declarations.push({ path: namespace ? `${namespace}:${attrSrc}` : attrSrc });\n          });\n        }\n        return declarations;\n      },\n    },\n  },\n  defaultProps: {\n    weekStart: '1',\n    color: '#1a73e8',\n    language: 'en',\n    type: 'full',\n    selectedColor: '#C084FC',\n    yearNav: true,\n    borderRadius: '6px',\n    rowHeight: '150px',\n    colorProp: '',\n  },\n} as T4DComponentConfig<ICalendarProps>;\nexport interface ICalendarProps extends webforms.ComponentProps {\n  color: string;\n  selectedColor: string;\n  yearNav: boolean;\n  borderRadius: string;\n  property: string;\n  selectedDate: string;\n  startDate: string;\n  endDate: string;\n  rowHeight: string;\n  colorProp: string;\n  colors?: IColors[];\n  language?: string;\n  weekStart: string;\n  type?: string;\n  attributes: IAttributes[];\n}\nexport interface IColors {\n  color?: string;\n}\nexport interface IAttributes {\n  Attribute: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Calendar.render.tsx", "file_contents": "import {\n  dateTo4DFormat,\n  isLocalArrayDataSource,\n  splitDatasourceID,\n  unsubscribeFromDatasource,\n  useRenderer,\n  useSources,\n  useWebformPath,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo, useRef } from 'react';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nimport {\n  MdKeyboardArrowLeft,\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowLeft,\n  MdKeyboardDoubleArrowRight,\n} from 'react-icons/md';\nimport { colorToHex, generateColorPalette, randomColor } from '../shared/colorUtils';\nimport {\n  startOfWeek,\n  endOfWeek,\n  endOfMonth,\n  isToday,\n  startOfMonth,\n  addMonths,\n  subMonths,\n  eachDayOfInterval,\n  format,\n  isSameMonth,\n  addDays,\n} from 'date-fns';\nimport { ICalendarProps } from './Calendar.config';\nimport { fr, es, de, enUS } from 'date-fns/locale';\nimport { updateEntity } from '../hooks/useDsChangeHandler';\nimport findIndex from 'lodash/findIndex';\nimport Spinner from '../shared/Spinner';\nimport _ from 'lodash';\nconst Calendar: FC<ICalendarProps> = ({\n  type,\n  weekStart,\n  language,\n  selectedDate,\n  property,\n  startDate,\n  endDate,\n  rowHeight,\n  color,\n  selectedColor,\n  colors = [],\n  attributes = [],\n  colorProp,\n  yearNav,\n  borderRadius,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect, emit } = useRenderer();\n  const {\n    sources: { datasource, currentElement: selectedElement },\n  } = useSources();\n  const [date, setDate] = useState(new Date());\n  const [selDate, setSelDate] = useState(new Date());\n  const [selEvent, setSelEvent] = useState<any>(null);\n  const hasMounted = useRef(false);\n  const path = useWebformPath();\n  const [loading, setLoading] = useState(true);\n  const [value, setValue] = useState<any[]>([]);\n  const attrs = useMemo(\n    () =>\n      datasource?.type === 'entitysel'\n        ? Object.keys(datasource.dataclass)\n        : isLocalArrayDataSource(datasource)\n          ? Object.keys((datasource as any).value[0])\n          : [],\n    [datasource],\n  );\n  let { entities, fetchIndex, setStep, query, loaderDatasource } = useDataLoader({\n    source: datasource,\n  });\n  const colorgenerated = useMemo(\n    () => generateColorPalette(entities.length, ...colors.map((e) => e.color || randomColor())),\n    [entities.length, colors],\n  );\n  let attributeList = attributes?.map((e) => e.Attribute);\n  const monthQuery = async (source: datasources.DataSource, newMonth: Date) => {\n    setLoading(true);\n    if (!source) return;\n    if (source.type === 'entitysel') {\n      if (attrs.includes(startDate.split('.')[0])) {\n        const startOfWeekDate = format(\n          startOfWeek(startOfMonth(newMonth), { weekStartsOn: 1 }),\n          'yyyy-MM-dd',\n        );\n        const endOfMonthDate = format(\n          endOfWeek(endOfMonth(newMonth), { weekStartsOn: 1 }),\n          'yyyy-MM-dd',\n        );\n        const queryStr = `${startDate} >= :1 AND ${startDate} <= :2`;\n        const placeholders = [startOfWeekDate, endOfMonthDate];\n        query.entitysel({\n          queryString: queryStr,\n          placeholders,\n        });\n      } else {\n        checkParams = `\"${startDate}\" does not exist as an attribute`;\n      }\n    } else if (source.dataType === 'array') {\n      setValue(await source.getValue());\n    }\n    setLoading(false);\n  };\n  let checkParams = useMemo(() => {\n    if (!datasource) {\n      return 'Please set \"Datasource\"';\n    } else if (!entities[0] || !entities.length) {\n      return '';\n    }\n    if (!property) {\n      return 'Please set \"Property\"';\n    } else if (!attrs.includes(property)) {\n      return `\"${property}\" does not exist as an attribute`;\n    }\n    if (!startDate) {\n      return 'Please set the \"Start Date\"';\n    } else if (!attrs.includes(startDate)) {\n      return `\"${startDate}\" does not exist as an attribute`;\n    }\n    if (!endDate) {\n      return 'Please set the \"End Date\"';\n    } else if (!attrs.includes(endDate)) {\n      return `\"${endDate}\" does not exist as an attribute`;\n    }\n    return '';\n  }, [datasource, entities]);\n  useEffect(() => {\n    if (hasMounted.current) {\n      emit('onMonthChange', { currentDate: date });\n    } else {\n      hasMounted.current = true;\n    }\n  }, [date]);\n  useEffect(() => {\n    if (!datasource || !(datasource as any).entitysel) {\n      setLoading(false);\n      return;\n    }\n    const fetch = async () => {\n      monthQuery(loaderDatasource, date);\n    };\n    fetch();\n  }, []);\n  useEffect(() => {\n    if (!datasource) return;\n    const cb = () => {\n      console.log('callback');\n      monthQuery(loaderDatasource, date);\n    };\n    datasource.addListener('changed', cb);\n    return () => {\n      unsubscribeFromDatasource(datasource, cb);\n    };\n  }, [datasource, date, loaderDatasource, (datasource as any).entitysel]);\n  useEffect(() => {\n    const fetchData = async () => {\n      let selLength = await loaderDatasource.getValue('length');\n      setStep({ start: 0, end: selLength });\n      await fetchIndex(0);\n    };\n    fetchData();\n  }, [loaderDatasource]);\n  const isSelectedEvent = (event: any) => {\n    return (\n      (event[property] === selEvent?.[property] &&\n        event[startDate] === selEvent?.[startDate] &&\n        event[endDate] === selEvent?.[endDate]) ||\n      false\n    );\n  };\n  const prevMonth = () => {\n    monthQuery(loaderDatasource, subMonths(date, 1));\n    setDate(subMonths(date, 1));\n  };\n  const nextMonth = () => {\n    monthQuery(loaderDatasource, addMonths(date, 1));\n    setDate(addMonths(date, 1));\n  };\n  const nextYear = () => {\n    monthQuery(loaderDatasource, addMonths(date, 12));\n    setDate(addMonths(date, 12));\n  };\n  const prevYear = () => {\n    monthQuery(loaderDatasource, subMonths(date, 12));\n    setDate(subMonths(date, 12));\n  };\n  let coloredData = useMemo(\n    () =>\n      (datasource.dataType === 'array' ? value : entities).map((obj: any, index) => ({\n        ...obj,\n        color: obj[colorProp] || colorgenerated[index],\n        attributes: attributeList?.reduce((acc: { [key: string]: any }, e) => {\n          acc[e] = obj[e];\n          return acc;\n        }, {}),\n      })),\n    [entities, colorgenerated, colorProp, attributeList],\n  );\n  const handleDateClick = async (value: Date) => {\n    setSelDate(value);\n    if (!selectedDate) return;\n    const { id, namespace } = splitDatasourceID(selectedDate);\n    const ds =\n      window.DataSource.getSource(id, namespace) || window.DataSource.getSource(selectedDate, path);\n    ds?.setValue(\n      null,\n      value instanceof Date && !isNaN(value.valueOf()) ? dateTo4DFormat(value) : value,\n    );\n    const ce = await ds?.getValue();\n    emit('onDateClick', { selectedDate: ce });\n  };\n  const handleItemClick = async (item: any) => {\n    setSelEvent(item);\n    if (!selectedElement) return;\n    switch (selectedElement.type) {\n      case 'scalar':\n        selectedElement.setValue(null, item);\n        emit('onItemClick', { selectedData: selectedElement });\n        break;\n      case 'entity':\n        const index = findIndex(\n          entities,\n          (e: any) =>\n            e[property] === item[property] &&\n            e[startDate] === item[startDate] &&\n            e[endDate] === item[endDate],\n        );\n        await updateEntity({ index, datasource, currentElement: selectedElement });\n        emit('onItemClick', { selectedData: selectedElement });\n        break;\n    }\n  };\n  const startOfWeekInt = parseInt(weekStart, 10) as 0 | 1;\n  const daysInMonth = useMemo(\n    () =>\n      eachDayOfInterval({\n        start: startOfWeek(startOfMonth(date), { weekStartsOn: startOfWeekInt }),\n        end: endOfWeek(endOfMonth(date), { weekStartsOn: startOfWeekInt }),\n      }),\n    [date],\n  );\n  let localeVar = language === 'fr' ? fr : language === 'es' ? es : language === 'de' ? de : enUS;\n  let weekDays = Array.from({ length: type === 'work' ? 5 : 7 }, (_, i) => {\n    return {\n      index: addDays(startOfWeek(date, { weekStartsOn: startOfWeekInt }), i),\n      title: format(addDays(startOfWeek(date, { weekStartsOn: startOfWeekInt }), i), 'EE', {\n        locale: localeVar,\n      }),\n      day: format(addDays(startOfWeek(date, { weekStartsOn: startOfWeekInt }), i), 'EEEE', {\n        locale: localeVar,\n      }),\n    };\n  });\n  const filteredDays = useMemo(\n    () =>\n      daysInMonth.filter((day) => {\n        if (type === 'work') {\n          const dayOfWeek = day.getDay();\n          return dayOfWeek >= 1 && dayOfWeek <= 5;\n        }\n        return true;\n      }),\n    [daysInMonth, type],\n  );\n  return !checkParams ? (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {loading && <Spinner />}\n      <div className=\"calendar-container flex flex-col gap-4 w-full h-full\">\n        <div\n          className={`calendar-header w-full flex justify-center gap-2 items-center ${style?.fontSize ? style?.fontSize : 'text-xl'}`}\n        >\n          <button\n            title=\"Previous year\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n            onClick={prevYear}\n            style={{ display: yearNav ? '' : 'none' }}\n          >\n            <MdKeyboardDoubleArrowLeft />\n          </button>\n          <button\n            title=\"Previous month\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n            onClick={prevMonth}\n          >\n            <MdKeyboardArrowLeft />\n          </button>\n          <h2\n            className={`month-title w-44 text-center ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n          >\n            {format(date, 'MMMM yyyy', { locale: localeVar }).charAt(0).toUpperCase() +\n              format(date, 'MMMM yyyy', { locale: localeVar }).slice(1)}\n          </h2>\n          <button\n            title=\"Next month\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n            onClick={nextMonth}\n          >\n            <MdKeyboardArrowRight />\n          </button>\n          <button\n            title=\"Next year\"\n            className=\"nav-button rounded-full p-1 hover:bg-gray-300 duration-300\"\n            onClick={nextYear}\n            style={{ display: yearNav ? '' : 'none' }}\n          >\n            <MdKeyboardDoubleArrowRight />\n          </button>\n        </div>\n        <div\n          className=\"calendar-grid w-full grid justify-center\"\n          style={{\n            gridTemplateColumns: `repeat(${weekDays.length}, minmax(0, 1fr))`,\n          }}\n        >\n          {weekDays.map((day) => (\n            <span\n              key={day.title}\n              title={day.day}\n              className={`weekday-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'} ${style?.fontSize ? style?.fontSize : 'text-lg'} text-center`}\n            >\n              {format(day.index, 'EEE', { locale: localeVar }).charAt(0).toUpperCase() +\n                format(day.index, 'EEE', { locale: localeVar }).slice(1)}\n            </span>\n          ))}\n          {filteredDays.map((day) => {\n            const data = coloredData.filter((item) => {\n              const itemStartDate = new Date(item[startDate]);\n              const itemEndDate = new Date(item[endDate]);\n              return datasource.type === 'scalar'\n                ? day >= itemStartDate && day <= itemEndDate\n                : day >= new Date(dateTo4DFormat(itemStartDate)) &&\n                    day <= new Date(dateTo4DFormat(itemEndDate));\n            });\n            return (\n              <div\n                key={day.toString()}\n                className={`day-container flex flex-col justify-start items-start gap-1 p-1 w-full`}\n                style={{\n                  color: isSameMonth(day, date)\n                    ? style?.color\n                      ? style?.color\n                      : 'black'\n                    : '#C0C0C0',\n                  borderWidth: style?.borderWidth ? style?.borderWidth : '1px',\n                  borderColor: style?.borderColor ? style?.borderColor : '#E0E0E0',\n                  backgroundColor: isSameMonth(day, date)\n                    ? style?.backgroundColor\n                      ? style?.backgroundColor\n                      : 'white'\n                    : '#F3F4F6',\n                  height: rowHeight,\n                }}\n              >\n                <div className=\"h-fit w-full\">\n                  <span\n                    className={`day-number h-7 w-7 flex items-center justify-center ${style?.fontWeight ? style?.fontWeight : 'font-medium'} rounded-full cursor-pointer hover:bg-gray-300 duration-300`}\n                    style={{\n                      border: day === selDate ? `2px solid ${colorToHex(color)}` : '',\n                      backgroundColor: isToday(day) ? color : '',\n                      color: isToday(day) ? 'white' : '',\n                    }}\n                    onClick={() => handleDateClick(day)}\n                  >\n                    {format(day, 'd')}\n                  </span>\n                </div>\n                <div\n                  className={`date-content w-full grid grid-cols-1 gap-1 overflow-hidden overflow-y-auto`}\n                >\n                  {data.map((item, index) => {\n                    return (\n                      <div\n                        key={`${item[property]}-${item[startDate]}`}\n                        className={`element-container cursor-pointer px-2 py-1 flex flex-col w-full border-l-4 text-black`}\n                        style={{\n                          color: isSameMonth(day, date) ? 'black' : '#969696',\n                          backgroundColor: isSameMonth(day, date)\n                            ? isSelectedEvent(item)\n                              ? colorToHex(selectedColor) + '70'\n                              : colorToHex(item?.color) + '50'\n                            : '#E3E3E3',\n                          borderRadius: borderRadius,\n                          borderLeftColor: isSameMonth(day, date)\n                            ? isSelectedEvent(item)\n                              ? colorToHex(selectedColor)\n                              : colorToHex(item?.color)\n                            : '#C0C0C0',\n                        }}\n                        onClick={() => handleItemClick(item)}\n                      >\n                        <span\n                          title={item[property]}\n                          key={index}\n                          className={`element-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'} line-clamp-2`}\n                        >\n                          {item[property]}\n                        </span>\n                        <div key={`attributes-${index}`} className=\"element-detail flex flex-wrap\">\n                          {attributeList?.map((e) => {\n                            return (\n                              <span\n                                key={`attribute-${index}-${e}`}\n                                className={`attribute ${style?.fontSize ? style?.fontSize : 'text-sm'} basis-1/2 text-start`}\n                                title={item?.attributes[e]?.toString()}\n                              >\n                                {item.attributes[e]}\n                              </span>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"flex h-24 w-full flex-col items-center justify-center gap-2 rounded-lg border-2 border-red-600 py-4 text-red-700\">\n      <BsFillInfoCircleFill className=\" h-6 w-6\" />\n      <p className=\" font-medium\">{checkParams}</p>\n    </div>\n  );\n};\nexport default Calendar;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Calendar.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'color',\n    label: 'Current Day Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#1a73e8',\n  },\n  {\n    key: 'selectedColor',\n    label: 'Selected Element Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#C084FC',\n  },\n  {\n    key: 'weekStart',\n    label: 'First Day of Week',\n    type: ESetting.SELECT,\n    defaultValue: '1',\n    options: [\n      { value: '1', label: 'Monday' },\n      { value: '0', label: 'Sunday' },\n    ],\n  },\n  {\n    key: 'language',\n    label: 'Language',\n    type: ESetting.SELECT,\n    defaultValue: 'en',\n    options: [\n      { value: 'en', label: 'English' },\n      { value: 'fr', label: 'French' },\n      { value: 'es', label: 'Spanish' },\n      { value: 'de', label: 'German' },\n    ],\n  },\n  {\n    key: 'type',\n    label: 'Week Days',\n    type: ESetting.SELECT,\n    defaultValue: 'full',\n    options: [\n      { value: 'full', label: 'All' },\n      { value: 'work', label: 'Business days' },\n    ],\n  },\n  {\n    key: 'rowHeight',\n    label: 'Row Height',\n    type: ESetting.UNITFIELD,\n    defaultValue: '150px',\n    hasLabel: true,\n  },\n  {\n    key: 'borderRadius',\n    label: 'Border Radius',\n    type: ESetting.UNITFIELD,\n    defaultValue: '6px',\n    hasLabel: true,\n  },\n  {\n    key: 'yearNav',\n    label: 'Year Navigation',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n];\nconst attributesSettings: TSetting[] = [\n  {\n    key: 'property',\n    label: 'Property',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'startDate',\n    label: 'First Date',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'endDate',\n    label: 'Last Date',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'colorProp',\n    label: 'Color Property',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'colors',\n    name: 'Colors',\n    label: 'Colors',\n    titleProperty: 'color',\n    data: [\n      {\n        key: 'color',\n        label: 'Color',\n        type: ESetting.COLOR_PICKER,\n        defaultValue: '',\n      },\n    ],\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'attributes',\n    name: 'Attributes',\n    label: 'Attributes',\n    titleProperty: 'Attribute',\n    data: [\n      {\n        key: 'Attribute',\n        label: 'Attribute',\n        type: ESetting.TEXT_FIELD,\n        defaultValue: '',\n      },\n    ],\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Qodly Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'selectedDate',\n    label: 'Selected Date',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  {\n    key: 'attributes',\n    label: 'Data Attributes',\n    type: ESetting.GROUP,\n    components: attributesSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('dataAccess'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/colorUtils.tsx", "file_contents": "import { TinyColor, random } from '@ctrl/tinycolor';\nexport const randomColor = (): string => {\n  const color = random();\n  return color.toHexString();\n};\nexport const colorToHex = (baseColor: string): string => {\n  const color = new TinyColor(baseColor);\n  return color.toHexString();\n};\nexport const generateColorPalette = (\n  numberOfColorsPerColor: number,\n  ...baseColors: string[]\n): string[] => {\n  const colorPalette: string[] = [];\n  let colors;\n  if (baseColors.length === 0) {\n    colors = new TinyColor(randomColor()).polyad(numberOfColorsPerColor);\n  } else if (baseColors.length === 1) {\n    colors = new TinyColor(baseColors[0]).polyad(numberOfColorsPerColor);\n  } else {\n    const len =\n      numberOfColorsPerColor > baseColors.length\n        ? Math.round(numberOfColorsPerColor / baseColors.length) > 1\n          ? Math.round(numberOfColorsPerColor / baseColors.length)\n          : 2\n        : 1;\n    colors = baseColors.reduce<any[]>((acc, color) => {\n      const polyad = new TinyColor(color).polyad(len);\n      return [...acc, ...polyad].slice(0, numberOfColorsPerColor);\n    }, []);\n  }\n  colorPalette.push(...colors.map((t) => t.toHexString()));\n  return colorPalette;\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/DayView.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { IDayViewProps } from './DayView.config';\nimport { format, setHours, isToday, isEqual, setMinutes } from 'date-fns';\nimport { MdKeyboardArrowLeft, MdKeyboardArrowRight } from 'react-icons/md';\nimport { colorToHex } from '../shared/colorUtils';\nimport { fr, es, de } from 'date-fns/locale';\nconst DayView: FC<IDayViewProps> = ({\n  attributes = [],\n  minutes,\n  property,\n  language,\n  todayButton,\n  headerPosition,\n  color,\n  selectedColor,\n  hours,\n  timeFormat,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const date = new Date();\n  const firstHour = useMemo(() => {\n    if (hours === 'work') {\n      return 8;\n    }\n    return 0;\n  }, [hours]);\n  const isCurrentHour = (hourIndex: number, mins: number) => {\n    const currentHour = new Date().getHours();\n    switch (minutes) {\n      case '15': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 15 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '30': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 30 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '60': {\n        return currentHour === hourIndex;\n      }\n    }\n  };\n  const timeList = useMemo(() => {\n    switch (minutes) {\n      case '15': {\n        return hours === 'work'\n          ? Array.from({ length: 44 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 96 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            });\n      }\n      case '30': {\n        return hours === 'work'\n          ? Array.from({ length: 22 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 48 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            });\n      }\n      case '60': {\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n      }\n      default:\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index + 8;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n    }\n  }, [hours, minutes]);\n  let checkHours = (i: number) => {\n    if (hours === 'work') {\n      return i + 8;\n    }\n    return i;\n  };\n  const locale = useMemo(() => {\n    if (language === 'fr') return { locale: fr };\n    if (language === 'es') return { locale: es };\n    if (language === 'de') return { locale: de };\n    return {};\n  }, [language]);\n  const todayLabel = useMemo(() => {\n    if (language === 'fr') return \"Aujourd'hui\";\n    if (language === 'es') return 'Hoy';\n    if (language === 'de') return 'Heute';\n    return 'Today';\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div\n        className={`dayview-header current-day text-center ${style?.fontSize ? style?.fontSize : 'text-xl'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n      >\n        {format(date, 'dd MMMM yyyy', locale)}\n      </div>\n      <div className=\"dayview w-full h-full\">\n        <table className=\"table-fixed w-full h-full border-collapse\">\n          <thead className=\"dayview-header\">\n            <tr>\n              <th\n                className={`w-40 ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n              >\n                <div className=\"navigation flex items-center justify-center \">\n                  <button\n                    title=\"Previous Day\"\n                    className=\"nav-button last-day p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                  >\n                    <MdKeyboardArrowLeft />\n                  </button>\n                  <button\n                    className=\"today-button p-1 rounded-lg hover:bg-gray-300 duration-300\"\n                    style={{ display: todayButton ? 'block' : 'none' }}\n                  >\n                    {todayLabel}\n                  </button>\n                  <button\n                    title=\"Next Day\"\n                    className=\"nav-button next-day p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                  >\n                    <MdKeyboardArrowRight />\n                  </button>\n                </div>\n                <span className=\"timezone font-medium text-xs text-gray-400\">\n                  {format(date, 'OOOO')}\n                </span>\n              </th>\n              <th\n                className={`w-full ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n              >\n                <div\n                  title={format(date, 'EEEE dd MMMM yyyy', locale)}\n                  className=\"weekday-title ml-4 flex flex-col items-start justify-center font-medium\"\n                >\n                  <span>\n                    <span\n                      className=\"weekday-day text-sm\"\n                      style={{ color: isToday(date) ? color : '' }}\n                    >\n                      {format(date, 'EEE', locale).charAt(0).toUpperCase() +\n                        format(date, 'EEE', locale).slice(1)}\n                    </span>\n                    <span\n                      className=\"weekday-number rounded-full text-xl mb-1 h-10 w-10 flex items-center justify-center font-medium\"\n                      style={{\n                        backgroundColor: isToday(date) ? color : '',\n                        color: isToday(date) ? 'white' : '',\n                      }}\n                    >\n                      {format(date, 'dd')}\n                    </span>\n                  </span>\n                </div>\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"dayview-body\">\n            {timeList.map(({ hour, minutes }, hourIndex) => (\n              <tr\n                key={`${hour}-${minutes}`}\n                className={`dayview-row ${isEqual(firstHour, checkHours(hourIndex)) ? 'h-20' : 'h-14'}`}\n              >\n                <td className=\"flex items-center justify-center\">\n                  <span\n                    className={`timeline text-gray-400 ${style?.fontSize ? style?.fontSize : 'text-[12px]'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n                    style={{\n                      color: isToday(date) && isCurrentHour(checkHours(hour), minutes) ? color : '',\n                    }}\n                  >\n                    {timeFormat === '12'\n                      ? format(\n                          setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                          'KK:mm a',\n                        )\n                      : format(\n                          setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                          'HH:mm',\n                        )}\n                  </span>\n                </td>\n                <td\n                  key={format(date, 'yyyy-MM-dd') + '-' + hourIndex}\n                  className=\"time-cell border border-gray-200 p-1\"\n                  style={{\n                    backgroundColor:\n                      isToday(date) && isCurrentHour(checkHours(hour), minutes)\n                        ? colorToHex(color) + '30'\n                        : '',\n                    borderLeft:\n                      isToday(date) && isCurrentHour(checkHours(hour), minutes)\n                        ? '5px solid ' + color\n                        : '',\n                  }}\n                >\n                  <div className=\"time-content flex flex-col flex-wrap w-1/3 h-full gap-1 overflow-x-auto\">\n                    {isToday(date) && isEqual(firstHour, checkHours(hourIndex)) ? (\n                      <div\n                        className=\"event p-2 border-t-4 overflow-y-auto h-full flex flex-col gap-1\"\n                        style={{\n                          backgroundColor: colorToHex(selectedColor) + '50',\n                          borderTopColor: colorToHex(selectedColor),\n                        }}\n                      >\n                        <span\n                          className={`event-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'}`}\n                        >\n                          {property ? '{' + property + '}' : 'No Property Set'}\n                        </span>\n                        <div className=\"attributes flex flex-wrap\">\n                          {attributes?.map((attribute, index) => (\n                            <span\n                              key={index}\n                              className={`attribute ${style?.fontSize ? style?.fontSize : 'text-sm'} basis-1/2 text-start`}\n                            >\n                              {attribute.Attribute}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    ) : null}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\nexport default DayView;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/DayView.config.tsx", "file_contents": "import {\n  EComponentKind,\n  splitDatasourceID,\n  T4DComponentConfig,\n  T4DComponentDatasourceDeclaration,\n} from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdCalendarViewDay } from 'react-icons/md';\nimport DayViewSettings, { BasicSettings } from './DayView.settings';\nexport default {\n  craft: {\n    displayName: 'DayView',\n    rules: {\n      canMoveIn: () => true,\n      canMoveOut: () => true,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(DayViewSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'DayView',\n    exposed: true,\n    icon: MdCalendarViewDay,\n    events: [\n      {\n        label: 'On Item Click',\n        value: 'onItemClick',\n      },\n      {\n        label: 'On Day Change',\n        value: 'onDayChange',\n      },\n      {\n        label: 'On Date Click',\n        value: 'onDateClick',\n      },\n    ],\n    datasources: {\n      accept: ['array', 'entitysel'],\n      declarations: (props: any) => {\n        const {\n          property,\n          eventDate,\n          startTime,\n          endTime,\n          colorProp,\n          attributes,\n          datasource = '',\n        } = props as IDayViewProps;\n        const declarations: T4DComponentDatasourceDeclaration[] = [\n          { path: datasource, iterable: true },\n        ];\n        const { id: ds, namespace } = splitDatasourceID(datasource?.trim()) || {};\n        if (property) {\n          const propertySrc = `${ds}.[].${property}`;\n          declarations.push({ path: namespace ? `${namespace}:${propertySrc}` : propertySrc });\n        }\n        if (eventDate) {\n          const startDateSrc = `${ds}.[].${eventDate}`;\n          declarations.push({ path: namespace ? `${namespace}:${startDateSrc}` : startDateSrc });\n        }\n        if (startTime) {\n          const startTimeSrc = `${ds}.[].${startTime}`;\n          declarations.push({ path: namespace ? `${namespace}:${startTimeSrc}` : startTimeSrc });\n        }\n        if (endTime) {\n          const endTimeSrc = `${ds}.[].${endTime}`;\n          declarations.push({ path: namespace ? `${namespace}:${endTimeSrc}` : endTimeSrc });\n        }\n        if (colorProp) {\n          const colorPropSrc = `${ds}.[].${colorProp}`;\n          declarations.push({ path: namespace ? `${namespace}:${colorPropSrc}` : colorPropSrc });\n        }\n        if (attributes) {\n          attributes.forEach((attr) => {\n            const attrSrc = `${ds}.[].${attr.Attribute}`;\n            declarations.push({ path: namespace ? `${namespace}:${attrSrc}` : attrSrc });\n          });\n        }\n        return declarations;\n      },\n    },\n  },\n  defaultProps: {\n    days: 'full',\n    color: '#1a73e8',\n    selectedColor: '#C084FC',\n    timeFormat: '24',\n    minutes: '60',\n    todayButton: true,\n    headerPosition: '',\n    language: 'en',\n  },\n} as T4DComponentConfig<IDayViewProps>;\nexport interface IDayViewProps extends webforms.ComponentProps {\n  selectedDate: string;\n  property: string;\n  eventDate: string;\n  startTime: string;\n  endTime: string;\n  color: string;\n  selectedColor: string;\n  minutes: '60' | '15' | '30';\n  timeFormat: '12' | '24';\n  hours?: string;\n  language: string;\n  headerPosition: 'sticky' | '';\n  todayButton?: boolean;\n  colorProp: string;\n  colors?: IColors[];\n  attributes: IAttributes[];\n}\nexport interface IColors {\n  color?: string;\n}\nexport interface IAttributes {\n  Attribute: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/DayView.render.tsx", "file_contents": "import {\n  dateTo4DFormat,\n  isLocalArrayDataSource,\n  splitDatasourceID,\n  unsubscribeFromDatasource,\n  useDataLoader,\n  useRenderer,\n  useSources,\n  useWebformPath,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo, useRef } from 'react';\nimport { format, setHours, isToday, setMinutes, isEqual, subDays, addDays } from 'date-fns';\nimport { MdKeyboardArrowLeft, MdKeyboardArrowRight } from 'react-icons/md';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nimport { colorToHex, generateColorPalette, randomColor } from '../shared/colorUtils';\nimport findIndex from 'lodash/findIndex';\nimport { IDayViewProps } from './DayView.config';\nimport { fr, es, de } from 'date-fns/locale';\nimport { updateEntity } from '../hooks/useDsChangeHandler';\nimport Spinner from '../shared/Spinner';\nconst DayView: FC<IDayViewProps> = ({\n  language,\n  todayButton,\n  colorProp,\n  colors = [],\n  attributes = [],\n  selectedDate,\n  property,\n  headerPosition,\n  eventDate,\n  startTime,\n  endTime,\n  color,\n  selectedColor,\n  hours,\n  minutes,\n  timeFormat,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect, emit } = useRenderer();\n  const {\n    sources: { datasource, currentElement: ce },\n  } = useSources();\n  const [date, setDate] = useState<Date>(new Date());\n  const [selDate, setSelDate] = useState(new Date());\n  const [selEvent, setSelEvent] = useState<any>(null);\n  const hasMounted = useRef(false);\n  const path = useWebformPath();\n  const [loading, setLoading] = useState(true);\n  const [value, setValue] = useState<any[]>([]);\n  const attrs = useMemo(\n    () =>\n      datasource?.type === 'entitysel'\n        ? Object.keys(datasource.dataclass)\n        : isLocalArrayDataSource(datasource)\n          ? Object.keys((datasource as any).value[0])\n          : [],\n    [datasource],\n  );\n  let { entities, fetchIndex, setStep } = useDataLoader({ source: datasource });\n  function convertMilliseconds(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const remainingSeconds = seconds % 60;\n    const remainingMinutes = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${remainingMinutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n  const dayQuery = async (source: datasources.DataSource, date: Date) => {\n    setLoading(true);\n    if (!source) return;\n    if (source.type === 'entitysel') {\n      if (attrs.includes(eventDate.split('.')[0])) {\n        const { entitysel } = source as any;\n        const queryStr = `${eventDate} == ${format(date, 'yyyy-MM-dd')}`;\n        const _settings = source.buildSelectionSettings();\n        (source as any).entitysel = source.dataclass.query(queryStr, {\n          ..._settings,\n          filterAttributes: source.filterAttributesText || entitysel._private.filterAttributes,\n        });\n        let selLength = await source.getValue('length');\n        setStep({ start: 0, end: selLength });\n        await fetchIndex(0);\n      } else {\n        checkParams = `${eventDate} does not exist as an attribute`;\n      }\n    } else if (source.dataType === 'array') {\n      setValue(await source.getValue());\n    }\n    setLoading(false);\n  };\n  let checkParams = useMemo(() => {\n    if (!datasource) {\n      return 'Please set \"Datasource\"';\n    } else if (!entities[0] || !entities.length) {\n      return '';\n    }\n    if (!property) {\n      return 'Please set \"Property\"';\n    } else if (!attrs.includes(property)) {\n      return `${property} does not exist as an attribute`;\n    }\n    if (!eventDate) {\n      return 'Please set \"event date\"';\n    } else if (!attrs.includes(eventDate)) {\n      return `${eventDate} does not exist as an attribute`;\n    }\n    if (!startTime) {\n      return 'Please set the \"start time\"';\n    } else if (!attrs.includes(startTime)) {\n      return `${startTime} does not exist as an attribute`;\n    }\n    if (!endTime) {\n      return 'Please set the \"end time\"';\n    } else if (!attrs.includes(endTime)) {\n      return `${endTime} does not exist as an attribute`;\n    }\n    return '';\n  }, [entities, property]);\n  useEffect(() => {\n    if (hasMounted.current) {\n      emit('onDayChange', { currentDate: date });\n    } else {\n      hasMounted.current = true;\n    }\n  }, [date]);\n  useEffect(() => {\n    if (!datasource) return;\n    const fetch = async () => {\n      await fetchIndex(0);\n      dayQuery(datasource, date);\n    };\n    fetch();\n  }, []);\n  useEffect(() => {\n    if (!datasource) return;\n    const cb = () => {\n      dayQuery(datasource, date);\n    };\n    datasource.addListener('changed', cb);\n    return () => {\n      unsubscribeFromDatasource(datasource, cb);\n    };\n  }, [datasource, date]);\n  const isCurrentHour = (hourIndex: number, mins: number) => {\n    const currentHour = new Date().getHours();\n    switch (minutes) {\n      case '15': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 15 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '30': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 30 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '60': {\n        return currentHour === hourIndex;\n      }\n    }\n  };\n  const isSelected = (date: Date) => {\n    return isEqual(date, selDate);\n  };\n  const isSelectedEvent = (event: any) => {\n    return (\n      (event[property] === selEvent?.[property] &&\n        event[eventDate] === selEvent?.[eventDate] &&\n        event[startTime] === selEvent?.[startTime] &&\n        event[endTime] === selEvent?.[endTime]) ||\n      false\n    );\n  };\n  let checkHours = (i: number) => {\n    if (hours === 'work') {\n      return i + 8;\n    }\n    return i;\n  };\n  const numberMin = useMemo(() => {\n    switch (minutes) {\n      case '15': {\n        return 0.25;\n      }\n      case '30': {\n        return 0.5;\n      }\n      case '60': {\n        return 1;\n      }\n    }\n  }, [minutes]);\n  const timeToFloat = (hour: number, minutes: number) => {\n    const minutesFraction = minutes / 60;\n    return hour + minutesFraction;\n  };\n  const timeList = useMemo(() => {\n    switch (minutes) {\n      case '15': {\n        return hours === 'work'\n          ? Array.from({ length: 44 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 96 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            });\n      }\n      case '30': {\n        return hours === 'work'\n          ? Array.from({ length: 22 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 48 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            });\n      }\n      case '60': {\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n      }\n      default:\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index + 8;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n    }\n  }, [hours, minutes]);\n  const todayButt = () => {\n    dayQuery(datasource, new Date());\n    setDate(new Date());\n  };\n  const handlePrevDay = () => {\n    dayQuery(datasource, subDays(date, 1));\n    setDate(subDays(date, 1));\n  };\n  const handleNextDay = () => {\n    dayQuery(datasource, addDays(date, 1));\n    setDate(addDays(date, 1));\n  };\n  const colorgenerated = useMemo(\n    () => generateColorPalette(entities.length, ...colors.map((e) => e.color || randomColor())),\n    [entities.length],\n  );\n  let attributeList = attributes?.map((e) => e.Attribute);\n  const data = useMemo(\n    () =>\n      (datasource.dataType === 'array' ? value : entities).map((obj: any, index) => ({\n        ...obj,\n        color: obj[colorProp] || colorgenerated[index],\n        attributes: attributeList?.reduce((acc: { [key: string]: any }, e) => {\n          acc[e] = obj[e];\n          return acc;\n        }, {}),\n      })),\n    [entities],\n  );\n  const handleItemClick = async (item: { [key: string]: any }) => {\n    setSelEvent(item);\n    if (!ce) return;\n    switch (ce.type) {\n      case 'scalar':\n        ce.setValue(null, item);\n        emit('onItemClick', { selectedData: ce });\n        break;\n      case 'entity':\n        const index = findIndex(\n          entities,\n          (e: any) =>\n            e[property] === item[property] &&\n            e[eventDate] === item[eventDate] &&\n            e[startTime] === item[startTime] &&\n            e[endTime] === item[endTime],\n        );\n        await updateEntity({ index, datasource, currentElement: ce });\n        emit('onItemClick', { selectedData: ce });\n        break;\n    }\n  };\n  const handleDateClick = async (value: Date) => {\n    setSelDate(value);\n    if (!selectedDate) return;\n    const { id, namespace } = splitDatasourceID(selectedDate);\n    const ds =\n      window.DataSource.getSource(id, namespace) || window.DataSource.getSource(selectedDate, path);\n    ds?.setValue(\n      null,\n      value instanceof Date && !isNaN(value.valueOf()) ? dateTo4DFormat(value) : value,\n    );\n    const ce = await ds?.getValue();\n    emit('onDateClick', { selectedDate: ce });\n  };\n  const locale = useMemo(() => {\n    if (language === 'fr') return { locale: fr };\n    if (language === 'es') return { locale: es };\n    if (language === 'de') return { locale: de };\n    return {};\n  }, [language]);\n  const todayLabel = useMemo(() => {\n    if (language === 'fr') return \"Aujourd'hui\";\n    if (language === 'es') return 'Hoy';\n    if (language === 'de') return 'Heute';\n    return 'Today';\n  }, [language]);\n  return !checkParams ? (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {loading && <Spinner />}\n      <div\n        className={`current-day text-center ${style?.fontSize ? style?.fontSize : 'text-xl'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n      >\n        {format(date, 'dd MMMM yyyy', locale)}\n      </div>\n      <div className=\"dayview w-full h-full\">\n        <table className=\"table-fixed w-full h-full border-collapse\">\n          <thead>\n            <tr className=\"dayview-header\">\n              <th\n                className={`w-40 ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n              >\n                <div className=\"navigation w-full flex items-center justify-center\">\n                  <button\n                    title=\"Previous Day\"\n                    onClick={handlePrevDay}\n                    className=\"nav-button last-day p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                  >\n                    <MdKeyboardArrowLeft />\n                  </button>\n                  <button\n                    onClick={todayButt}\n                    className=\"today-button p-1 rounded-lg hover:bg-gray-300 duration-300\"\n                    style={{ display: todayButton ? 'block' : 'none' }}\n                  >\n                    {todayLabel}\n                  </button>\n                  <button\n                    title=\"Next Day\"\n                    onClick={handleNextDay}\n                    className=\"nav-button next-day p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                  >\n                    <MdKeyboardArrowRight />\n                  </button>\n                </div>\n                <span className=\"timezone font-medium text-xs text-gray-400\">\n                  {format(date, 'OOOO')}\n                </span>\n              </th>\n              <th\n                className={`w-full ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n              >\n                <div\n                  title={format(date, 'EEEE dd MMMM yyyy', locale)}\n                  className=\"weekday-title ml-4 flex flex-col items-start justify-center font-medium\"\n                >\n                  <span>\n                    <span\n                      className=\"weekday-day text-sm\"\n                      style={{ color: isToday(date) ? color : '' }}\n                    >\n                      {format(date, 'EEE', locale).charAt(0).toUpperCase() +\n                        format(date, 'EEE', locale).slice(1)}\n                    </span>\n                    <span\n                      className=\"weekday-number rounded-full text-xl mb-1 h-10 w-10 flex items-center justify-center font-medium cursor-pointer\"\n                      style={{\n                        backgroundColor: isToday(date) ? color : '',\n                        border: isSelected(date) ? `2px solid ${colorToHex(color)}` : '',\n                        color: isToday(date) ? 'white' : '',\n                      }}\n                      onClick={() => handleDateClick(date)}\n                    >\n                      {format(date, 'dd')}\n                    </span>\n                  </span>\n                </div>\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"dayview-body\">\n            {timeList.map(({ hour, minutes }, hourIndex) => {\n              const events = data.filter((event) => {\n                const eventStartHour =\n                  datasource.type === 'scalar'\n                    ? parseInt(event[startTime].split(':')[0])\n                    : parseInt(convertMilliseconds(event[startTime]).split(':')[0]);\n                const eventStartMinutes =\n                  datasource.type === 'scalar'\n                    ? parseInt(event[startTime].split(':')[1])\n                    : parseInt(convertMilliseconds(event[startTime]).split(':')[1]);\n                const eventEndHour =\n                  datasource.type === 'scalar'\n                    ? parseInt(event[endTime].split(':')[0])\n                    : parseInt(convertMilliseconds(event[endTime]).split(':')[0]);\n                const eventEndMinutes =\n                  datasource.type === 'scalar'\n                    ? parseInt(event[endTime].split(':')[1])\n                    : parseInt(convertMilliseconds(event[endTime]).split(':')[1]);\n                const eventStartTime = timeToFloat(eventStartHour, eventStartMinutes);\n                const eventEndTime = timeToFloat(eventEndHour, eventEndMinutes);\n                return (\n                  format(new Date(event[eventDate]), 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd') &&\n                  timeToFloat(checkHours(hour), minutes) > eventStartTime - numberMin &&\n                  timeToFloat(checkHours(hour), minutes) <= eventEndTime\n                );\n              });\n              return (\n                <tr key={checkHours(hourIndex)} className=\"dayview-row w-36 h-16\">\n                  <td className=\"flex items-center justify-center\">\n                    <span\n                      className={`timeline text-gray-400 ${style?.fontSize ? style?.fontSize : 'text-[12px]'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n                      style={{\n                        color:\n                          isToday(date) && isCurrentHour(checkHours(hour), minutes) ? color : '',\n                      }}\n                    >\n                      {timeFormat === '12'\n                        ? format(\n                            setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                            'KK:mm a',\n                          )\n                        : format(\n                            setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                            'HH:mm',\n                          )}\n                    </span>\n                  </td>\n                  <td\n                    key={format(date, 'yyyy-MM-dd') + '-' + hourIndex}\n                    className=\"time-cell border border-gray-200 p-1\"\n                    style={{\n                      backgroundColor:\n                        isToday(date) && isCurrentHour(checkHours(hour), minutes)\n                          ? colorToHex(color) + '30'\n                          : '',\n                      borderLeft:\n                        isToday(date) && isCurrentHour(checkHours(hour), minutes)\n                          ? '5px solid ' + color\n                          : '',\n                    }}\n                  >\n                    <div className=\"time-content flex flex-col flex-wrap w-full h-full gap-1 overflow-x-auto\">\n                      {events.map((event, index) => (\n                        <div\n                          title={event[property]}\n                          key={index}\n                          className=\"event px-2 border-t-4 overflow-y-auto h-full flex flex-col gap-1 cursor-pointer\"\n                          style={{\n                            backgroundColor: isSelectedEvent(event)\n                              ? colorToHex(selectedColor) + '70'\n                              : colorToHex(event.color) + '30',\n                            borderTopColor: isSelectedEvent(event)\n                              ? colorToHex(selectedColor)\n                              : colorToHex(event.color),\n                          }}\n                          onClick={() => handleItemClick(event)}\n                        >\n                          <span\n                            className={`event-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'}`}\n                          >\n                            {event[property]}\n                          </span>\n                          <div key={`attributes-${index}`} className=\"attributes flex flex-wrap\">\n                            {attributeList?.map((e) => {\n                              return (\n                                <span\n                                  key={`attribute-${index}-${e}`}\n                                  className={`attribute ${style?.fontSize ? style?.fontSize : 'text-sm'} basis-1/2 text-start`}\n                                  title={event?.attributes[e]?.toString()}\n                                >\n                                  {event.attributes[e]}\n                                </span>\n                              );\n                            })}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  ) : (\n    <div className=\"flex h-24 w-full flex-col items-center justify-center gap-2 rounded-lg border-2 border-red-600 py-4 text-red-700\">\n      <BsFillInfoCircleFill className=\" h-6 w-6\" />\n      <p className=\" font-medium\">{checkParams}</p>\n    </div>\n  );\n};\nexport default DayView;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/DayView.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'color',\n    label: 'Current Day Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#1a73e8',\n  },\n  {\n    key: 'selectedColor',\n    label: 'Selected Element Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#C084FC',\n  },\n  {\n    key: 'language',\n    label: 'Language',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'en', label: 'English' },\n      { value: 'es', label: 'Spanish' },\n      { value: 'fr', label: 'French' },\n      { value: 'de', label: 'German' },\n    ],\n    defaultValue: 'en',\n  },\n  {\n    key: 'minutes',\n    label: 'Minutes Interval',\n    type: ESetting.SELECT,\n    options: [\n      { value: '60', label: '60 min' },\n      { value: '30', label: '30 min' },\n      { value: '15', label: '15 min' },\n    ],\n    defaultValue: '60',\n  },\n  {\n    key: 'hours',\n    label: 'Day Hours',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'all', label: 'All' },\n      { value: 'work', label: 'Work Hours' },\n    ],\n    defaultValue: 'all',\n  },\n  {\n    key: 'timeFormat',\n    label: 'Time Format',\n    type: ESetting.SELECT,\n    options: [\n      { value: '24', label: '24 Hours' },\n      { value: '12', label: '12 Hours' },\n    ],\n    defaultValue: '24',\n  },\n  {\n    key: 'headerPosition',\n    label: 'Header Display',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'auto', label: 'Auto' },\n      { value: 'sticky', label: 'Sticky' },\n    ],\n    defaultValue: 'auto',\n  },\n  {\n    key: 'todayButton',\n    label: 'Today Button',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Qodly Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'selectedDate',\n    label: 'Selected Date',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst attributesSettings: TSetting[] = [\n  {\n    key: 'property',\n    label: 'Property',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'eventDate',\n    label: 'Date',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'startTime',\n    label: 'Start Time',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'endTime',\n    label: 'End Time',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'colorProp',\n    label: 'Color Property',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'colors',\n    name: 'Colors',\n    label: 'Colors',\n    type: ESetting.DATAGRID,\n    titleProperty: 'color',\n    data: [\n      {\n        key: 'color',\n        label: 'Color',\n        type: ESetting.COLOR_PICKER,\n        defaultValue: '',\n      },\n    ],\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'attributes',\n    name: 'Attributes',\n    label: 'Attributes',\n    titleProperty: 'Attribute',\n    data: [\n      {\n        key: 'Attribute',\n        label: 'Attribute',\n        type: ESetting.TEXT_FIELD,\n        defaultValue: '',\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  {\n    key: 'attributes',\n    label: 'Data Attributes',\n    type: ESetting.GROUP,\n    components: attributesSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('dataAccess'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/index.tsx", "file_contents": "import DayView from './DayView';\nimport Scheduler from './Scheduler';\nimport Calendar from './Calendar';\nexport default {\n  DayView,\n  Scheduler,\n  Calendar,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Scheduler.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useMemo } from 'react';\nimport { ISchedulerProps } from './Scheduler.config';\nimport {\n  MdKeyboardArrowLeft,\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowLeft,\n  MdKeyboardDoubleArrowRight,\n} from 'react-icons/md';\nimport { format, startOfWeek, addDays, isToday, setHours, isEqual, setMinutes } from 'date-fns';\nimport { colorToHex } from '../shared/colorUtils';\nimport { fr, es, de } from 'date-fns/locale';\nconst Scheduler: FC<ISchedulerProps> = ({\n  yearNav,\n  property,\n  todayButton,\n  weekStart,\n  language,\n  minutes,\n  days,\n  hours,\n  height,\n  timeFormat,\n  headerPosition,\n  color,\n  selectedColor,\n  attributes = [],\n  style,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const date = new Date();\n  const startOfWeekInt = parseInt(weekStart, 10) as 0 | 1;\n  const firstDayOfWeek = startOfWeek(date, { weekStartsOn: startOfWeekInt });\n  const firstHour = useMemo(() => {\n    if (hours === 'work') {\n      return 8;\n    }\n    return 0;\n  }, [hours]);\n  const getWeekDates = (startDate: Date) => {\n    const dates = [];\n    const startOfCurrentWeek = startOfWeek(startDate, { weekStartsOn: startOfWeekInt });\n    for (let i = 0; i < 7; i++) {\n      dates.push(addDays(startOfCurrentWeek, i));\n    }\n    return dates;\n  };\n  const isCurrentHour = (hourIndex: number, mins: number) => {\n    const currentHour = new Date().getHours();\n    switch (minutes) {\n      case '15': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 15 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '30': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 30 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '60': {\n        return currentHour === hourIndex;\n      }\n    }\n  };\n  let checkHours = (i: number) => {\n    if (hours === 'work') {\n      return i + 8;\n    }\n    return i;\n  };\n  const weekDates = useMemo(() => {\n    let dates = getWeekDates(date);\n    if (days === 'work') dates = dates.slice(0, 5);\n    return dates;\n  }, [date, days, getWeekDates]);\n  const timeList = useMemo(() => {\n    switch (minutes) {\n      case '15': {\n        return hours === 'work'\n          ? Array.from({ length: 44 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 96 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            });\n      }\n      case '30': {\n        return hours === 'work'\n          ? Array.from({ length: 22 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 48 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            });\n      }\n      case '60': {\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n      }\n      default:\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index + 8;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n    }\n  }, [hours, minutes]);\n  const locale = useMemo(() => {\n    if (language === 'fr') return { locale: fr };\n    if (language === 'es') return { locale: es };\n    if (language === 'de') return { locale: de };\n    return {};\n  }, [language]);\n  const todayLabel = useMemo(() => {\n    if (language === 'fr') return \"Aujourd'hui\";\n    if (language === 'es') return 'Hoy';\n    if (language === 'de') return 'Heute';\n    return 'Today';\n  }, [language]);\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      <div className=\"flex flex-col gap-4 h-full\">\n        <div\n          className={`scheduler-navigation flex items-center justify-center gap-2 ${style?.fontSize ? style?.fontSize : 'text-xl'}`}\n        >\n          <button\n            title=\"Previous year\"\n            className=\"nav-button last-year rounded-full p-1 hover:bg-gray-300 duration-300\"\n            style={{ display: yearNav ? 'block' : 'none' }}\n          >\n            <MdKeyboardDoubleArrowLeft />\n          </button>\n          <button\n            title=\"Previous month\"\n            className=\"nav-button last-month rounded-full p-1 hover:bg-gray-300 duration-300\"\n          >\n            <MdKeyboardArrowLeft />\n          </button>\n          <span\n            className={`current-month ${style?.fontSize ? style?.fontSize : 'text-xl'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'} `}\n          >\n            {format(date, 'MMMM yyyy', locale).charAt(0).toUpperCase() +\n              format(date, 'MMMM yyyy', locale).slice(1)}\n          </span>\n          <button\n            title=\"Next month\"\n            className=\"nav-button next-month rounded-full p-1 hover:bg-gray-300 duration-300\"\n          >\n            <MdKeyboardArrowRight />\n          </button>\n          <button\n            title=\"Next year\"\n            className=\"nav-button next-year rounded-full p-1 hover:bg-gray-300 duration-300\"\n            style={{ display: yearNav ? 'block' : 'none' }}\n          >\n            <MdKeyboardDoubleArrowRight />\n          </button>\n        </div>\n        <div className=\"scheduler w-full h-full flex justify-center\">\n          <table className=\"table-fixed w-full h-full border-collapse\">\n            <thead>\n              <tr className=\"scheduler-header-row\">\n                <th\n                  className={`scheduler-header time-column w-24 ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n                >\n                  <div className=\"nav-buttons w-full flex items-center justify-center\">\n                    <button\n                      title=\"Previous week\"\n                      className=\"nav-button last-week p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                    >\n                      <MdKeyboardArrowLeft />\n                    </button>\n                    <button\n                      className=\"today-button p-1 rounded-lg hover:bg-gray-300 duration-300\"\n                      style={{ display: todayButton ? 'block' : 'none' }}\n                    >\n                      {todayLabel}\n                    </button>\n                    <button\n                      title=\"Next week\"\n                      className=\"nav-button next-week p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                    >\n                      <MdKeyboardArrowRight />\n                    </button>\n                  </div>\n                  <span className=\"timezone font-medium text-xs text-gray-400\">\n                    {format(date, 'OOOO')}\n                  </span>\n                </th>\n                {weekDates.map((day, index) => (\n                  <th\n                    key={index}\n                    className={`scheduler-header ${isEqual(day, firstDayOfWeek) && isEqual(firstHour, checkHours(index)) ? 'w-32' : 'w-24'} ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n                  >\n                    <div\n                      title={format(day, 'EEEE', locale)}\n                      key={index}\n                      className=\"weekday-title flex flex-col items-center font-medium text-center\"\n                    >\n                      <span\n                        className=\"weekday-day text-sm\"\n                        style={{ color: isToday(day) ? color : '' }}\n                      >\n                        {format(day, 'EEE', locale).charAt(0).toUpperCase() +\n                          format(day, 'EEE', locale).slice(1)}\n                      </span>\n                      <span\n                        className=\"weekday-number rounded-full text-xl mb-1 h-10 w-10 flex items-center justify-center font-medium\"\n                        style={{\n                          backgroundColor: isToday(day) ? color : '',\n                          color: isToday(day) ? 'white' : '',\n                        }}\n                      >\n                        {format(day, 'dd', locale)}\n                      </span>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"scheduler-body\">\n              {timeList.map(({ hour, minutes }, hourIndex) => (\n                <tr\n                  key={`${hour}-${minutes}`}\n                  className=\"w-32\"\n                  style={{\n                    height: height,\n                  }}\n                >\n                  <td className=\"flex items-center justify-center\">\n                    <span\n                      className={`timeline text-gray-400 ${style?.fontSize ? style?.fontSize : 'text-[12px]'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n                      style={{\n                        color:\n                          isToday(date) && isCurrentHour(checkHours(hour), minutes) ? color : '',\n                      }}\n                    >\n                      {timeFormat === '12'\n                        ? format(\n                            setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                            'KK:mm a',\n                          )\n                        : format(\n                            setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                            'HH:mm',\n                          )}\n                    </span>\n                  </td>\n                  {weekDates.map((day, dayIndex) => (\n                    <td\n                      key={format(day, 'yyyy-MM-dd') + '-' + dayIndex}\n                      className={`time-cell border border-gray-200 p-1 ${isEqual(day, firstDayOfWeek) && isEqual(firstHour, checkHours(hourIndex)) ? 'h-20' : 'h-12'}`}\n                      style={{\n                        backgroundColor:\n                          isToday(day) && isCurrentHour(checkHours(hour), minutes)\n                            ? colorToHex(color) + '30'\n                            : '',\n                        borderTop:\n                          isToday(day) && isCurrentHour(checkHours(hour), minutes)\n                            ? '3px solid ' + color\n                            : '',\n                      }}\n                    >\n                      <div className=\"time-content flex flex-col flex-wrap w-full h-full gap-1 overflow-x-auto\">\n                        {isEqual(day, firstDayOfWeek) &&\n                        isEqual(firstHour, checkHours(hourIndex)) ? (\n                          <div\n                            className=\"event p-1 border-t-4 overflow-y-auto h-full flex flex-col gap-1\"\n                            style={{\n                              backgroundColor: colorToHex(selectedColor) + '50',\n                              borderTopColor: colorToHex(selectedColor),\n                            }}\n                          >\n                            <span\n                              className={`event-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'}`}\n                            >\n                              {property ? '{' + property + '}' : 'No Property Set'}\n                            </span>\n                            <div className=\"attributes flex flex-wrap\">\n                              {attributes?.map((attribute, index) => (\n                                <span\n                                  key={index}\n                                  className={`attribute ${style?.fontSize ? style?.fontSize : 'text-sm'} basis-1/2 text-start`}\n                                >\n                                  {attribute.Attribute}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        ) : null}\n                      </div>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Scheduler;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Scheduler.config.tsx", "file_contents": "import {\n  EComponentKind,\n  splitDatasourceID,\n  T4DComponentConfig,\n  T4DComponentDatasourceDeclaration,\n} from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { MdCalendarViewWeek } from 'react-icons/md';\nimport SchedulerSettings, { BasicSettings } from './Scheduler.settings';\nexport default {\n  craft: {\n    displayName: 'WeekView',\n    rules: {\n      canMoveIn: () => true,\n      canMoveOut: () => true,\n    },\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(SchedulerSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'WeekView',\n    exposed: true,\n    icon: MdCalendarViewWeek,\n    events: [\n      {\n        label: 'On Item Click',\n        value: 'onItemClick',\n      },\n      {\n        label: 'On Week Change',\n        value: 'onWeekChange',\n      },\n      {\n        label: 'On Date Click',\n        value: 'onDateClick',\n      },\n    ],\n    datasources: {\n      accept: ['array', 'entitysel'],\n      declarations: (props: any) => {\n        const {\n          property,\n          startDate,\n          startTime,\n          endTime,\n          colorProp,\n          attributes,\n          datasource = '',\n        } = props as ISchedulerProps;\n        const declarations: T4DComponentDatasourceDeclaration[] = [\n          { path: datasource, iterable: true },\n        ];\n        const { id: ds, namespace } = splitDatasourceID(datasource?.trim()) || {};\n        if (property) {\n          const propertySrc = `${ds}.[].${property}`;\n          declarations.push({ path: namespace ? `${namespace}:${propertySrc}` : propertySrc });\n        }\n        if (startDate) {\n          const startDateSrc = `${ds}.[].${startDate}`;\n          declarations.push({ path: namespace ? `${namespace}:${startDateSrc}` : startDateSrc });\n        }\n        if (startTime) {\n          const startTimeSrc = `${ds}.[].${startTime}`;\n          declarations.push({ path: namespace ? `${namespace}:${startTimeSrc}` : startTimeSrc });\n        }\n        if (endTime) {\n          const endTimeSrc = `${ds}.[].${endTime}`;\n          declarations.push({ path: namespace ? `${namespace}:${endTimeSrc}` : endTimeSrc });\n        }\n        if (colorProp) {\n          const colorPropSrc = `${ds}.[].${colorProp}`;\n          declarations.push({ path: namespace ? `${namespace}:${colorPropSrc}` : colorPropSrc });\n        }\n        if (attributes) {\n          attributes.forEach((attr) => {\n            const attrSrc = `${ds}.[].${attr.Attribute}`;\n            declarations.push({ path: namespace ? `${namespace}:${attrSrc}` : attrSrc });\n          });\n        }\n        return declarations;\n      },\n    },\n  },\n  defaultProps: {\n    language: 'en',\n    weekStart: '1',\n    yearNav: true,\n    minutes: '60',\n    days: 'full',\n    color: '#1a73e8',\n    selectedColor: '#C084FC',\n    timeFormat: '24',\n    height: '64px',\n    headerPosition: '',\n    todayButton: true,\n  },\n} as T4DComponentConfig<ISchedulerProps>;\nexport interface ISchedulerProps extends webforms.ComponentProps {\n  color: string;\n  selectedColor: string;\n  weekStart: string;\n  language: string;\n  yearNav: boolean;\n  minutes: '60' | '15' | '30';\n  timeFormat: '12' | '24';\n  headerPosition: 'sticky' | '';\n  height?: string;\n  selectedDate: string;\n  property: string;\n  startDate: string;\n  startTime: string;\n  endTime: string;\n  colorProp: string;\n  colors?: IColors[];\n  attributes: IAttributes[];\n  todayButton?: boolean;\n  hours?: string;\n  days?: string;\n}\nexport interface IColors {\n  color?: string;\n}\nexport interface IAttributes {\n  Attribute: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Scheduler.render.tsx", "file_contents": "import {\n  dateTo4DFormat,\n  isLocalArrayDataSource,\n  splitDatasourceID,\n  unsubscribeFromDatasource,\n  useDataLoader,\n  useRenderer,\n  useSources,\n  useWebformPath,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, useEffect, useState, useMemo, useRef } from 'react';\nimport {\n  isEqual,\n  subMonths,\n  addMonths,\n  format,\n  startOfWeek,\n  addDays,\n  subWeeks,\n  addWeeks,\n  isToday,\n  setHours,\n  setMinutes,\n  endOfWeek,\n} from 'date-fns';\nimport { colorToHex, generateColorPalette, randomColor } from '../shared/colorUtils';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nimport {\n  MdKeyboardArrowLeft,\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowLeft,\n  MdKeyboardDoubleArrowRight,\n} from 'react-icons/md';\nimport { ISchedulerProps } from './Scheduler.config';\nimport findIndex from 'lodash/findIndex';\nimport { fr, es, de } from 'date-fns/locale';\nimport { updateEntity } from '../hooks/useDsChangeHandler';\nimport Spinner from '../shared/Spinner';\nconst Scheduler: FC<ISchedulerProps> = ({\n  todayButton,\n  language,\n  weekStart,\n  yearNav,\n  minutes,\n  hours,\n  days,\n  height,\n  selectedDate,\n  property,\n  startDate,\n  startTime,\n  endTime,\n  timeFormat,\n  color,\n  selectedColor,\n  colorProp,\n  colors = [],\n  attributes = [],\n  headerPosition,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect, emit } = useRenderer();\n  const {\n    sources: { datasource, currentElement: ce },\n  } = useSources();\n  const [date, setDate] = useState<Date>(new Date());\n  const [selDate, setSelDate] = useState(new Date());\n  const [selEvent, setSelEvent] = useState<any>(null);\n  const hasMounted = useRef(false);\n  const path = useWebformPath();\n  const [loading, setLoading] = useState(true);\n  const [value, setValue] = useState<any[]>([]);\n  const startOfWeekInt = parseInt(weekStart, 10) as 0 | 1;\n  const attrs = useMemo(\n    () =>\n      datasource?.type === 'entitysel'\n        ? Object.keys(datasource.dataclass)\n        : isLocalArrayDataSource(datasource)\n          ? Object.keys((datasource as any).value[0])\n          : [],\n    [datasource],\n  );\n  let { entities, fetchIndex, setStep } = useDataLoader({ source: datasource });\n  function convertMilliseconds(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const remainingSeconds = seconds % 60;\n    const remainingMinutes = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${remainingMinutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n  const weekQuery = async (source: datasources.DataSource, date: Date) => {\n    setLoading(true);\n    if (!source) return;\n    if (source.type === 'entitysel') {\n      if (attrs.includes(startDate.split('.')[0])) {\n        const { entitysel } = source as any;\n        const queryStr = `${startDate} >= ${format(startOfWeek(date, { weekStartsOn: 1 }), 'yyyy-MM-dd')} AND ${startDate} <= ${format(endOfWeek(date, { weekStartsOn: 1 }), 'yyyy-MM-dd')}`;\n        const _settings = source.buildSelectionSettings();\n        (source as any).entitysel = source.dataclass.query(queryStr, {\n          ..._settings,\n          filterAttributes: source.filterAttributesText || entitysel._private.filterAttributes,\n        });\n        let selLength = await source.getValue('length');\n        setStep({ start: 0, end: selLength });\n        await fetchIndex(0);\n      } else {\n        checkParams = `\"${startDate}\" does not exist as an attribute`;\n      }\n    } else if (source.dataType === 'array') {\n      setValue(await source.getValue());\n    }\n    setLoading(false);\n  };\n  let checkParams = useMemo(() => {\n    if (!datasource) {\n      return 'Please set \"Datasource\"';\n    } else if (!entities[0] || !entities.length) {\n      return '';\n    }\n    if (!property) {\n      return 'Please set \"Property\"';\n    } else if (!attrs.includes(property)) {\n      return `${property} does not exist as an attribute`;\n    }\n    if (!startDate) {\n      return 'Please set \"event date\"';\n    } else if (!attrs.includes(startDate)) {\n      return `${startDate} does not exist as an attribute`;\n    }\n    if (!startTime) {\n      return 'Please set \"start time\"';\n    } else if (!attrs.includes(startTime)) {\n      return `${startTime} does not exist as an attribute`;\n    }\n    if (!endTime) {\n      return 'Please set \"end time\"';\n    } else if (!attrs.includes(endTime)) {\n      return `${endTime} does not exist as an attribute`;\n    }\n    return '';\n  }, [datasource, entities]);\n  useEffect(() => {\n    if (hasMounted.current) {\n      emit('onWeekChange', { currentDate: date });\n    } else {\n      hasMounted.current = true;\n    }\n  }, [date]);\n  useEffect(() => {\n    if (!datasource) return;\n    const fetch = async () => {\n      await fetchIndex(0);\n      weekQuery(datasource, date);\n    };\n    fetch();\n  }, []);\n  useEffect(() => {\n    if (!datasource) return;\n    const cb = () => {\n      weekQuery(datasource, date);\n    };\n    datasource.addListener('changed', cb);\n    return () => {\n      unsubscribeFromDatasource(datasource, cb);\n    };\n  }, [datasource, date]);\n  const colorgenerated = useMemo(() => {\n    return generateColorPalette(entities.length, ...colors.map((e) => e.color || randomColor()));\n  }, [entities.length]);\n  let attributeList = attributes?.map((e) => e.Attribute);\n  const data = useMemo(() => {\n    return (datasource.dataType === 'array' ? value : entities).map((obj: any, index) => ({\n      ...obj,\n      color: obj[colorProp] || colorgenerated[index],\n      attributes: attributeList?.reduce((acc: { [key: string]: any }, e) => {\n        acc[e] = obj[e];\n        return acc;\n      }, {}),\n    }));\n  }, [entities, colorgenerated, colorProp, attributeList]);\n  const getWeekDates = (startDate: Date) => {\n    const dates = [];\n    const startOfCurrentWeek = startOfWeek(startDate, { weekStartsOn: startOfWeekInt });\n    for (let i = 0; i < 7; i++) {\n      dates.push(addDays(startOfCurrentWeek, i));\n    }\n    return dates;\n  };\n  const isCurrentHour = (hourIndex: number, mins: number) => {\n    const currentHour = new Date().getHours();\n    switch (minutes) {\n      case '15': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 15 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '30': {\n        return (\n          currentHour === hourIndex &&\n          new Date().getMinutes() <= mins + 30 &&\n          new Date().getMinutes() > mins\n        );\n      }\n      case '60': {\n        return currentHour === hourIndex;\n      }\n    }\n  };\n  const isSelectedDate = (date: Date) => {\n    return isEqual(date, selDate);\n  };\n  const isSelectedEvent = (event: any) => {\n    return (\n      (event[property] === selEvent?.[property] &&\n        event[startDate] === selEvent?.[startDate] &&\n        event[startTime] === selEvent?.[startTime] &&\n        event[endTime] === selEvent?.[endTime]) ||\n      false\n    );\n  };\n  const todayButt = () => {\n    weekQuery(datasource, new Date());\n    setDate(new Date());\n  };\n  const goToPreviousWeek = () => {\n    weekQuery(datasource, subWeeks(date, 1));\n    setDate(subWeeks(date, 1));\n  };\n  const goToNextWeek = () => {\n    weekQuery(datasource, addWeeks(date, 1));\n    setDate(addWeeks(date, 1));\n  };\n  const prevMonth = () => {\n    weekQuery(datasource, subMonths(date, 1));\n    setDate(subMonths(date, 1));\n  };\n  const nextMonth = () => {\n    weekQuery(datasource, addMonths(date, 1));\n    setDate(addMonths(date, 1));\n  };\n  const nextYear = () => {\n    weekQuery(datasource, addMonths(date, 12));\n    setDate(addMonths(date, 12));\n  };\n  const prevYear = () => {\n    weekQuery(datasource, subMonths(date, 12));\n    setDate(subMonths(date, 12));\n  };\n  const handleItemClick = async (item: { [key: string]: any }) => {\n    setSelEvent(item);\n    if (!ce) return;\n    switch (ce.type) {\n      case 'scalar':\n        ce.setValue(null, item);\n        emit('onItemClick', { selectedData: ce });\n        break;\n      case 'entity':\n        const index = findIndex(\n          entities,\n          (e: any) =>\n            e[property] === item[property] &&\n            e[startDate] === item[startDate] &&\n            e[startTime] === item[startTime] &&\n            e[endTime] === item[endTime],\n        );\n        await updateEntity({ index, datasource, currentElement: ce });\n        emit('onItemClick', { selectedData: ce });\n        break;\n    }\n  };\n  const handleDateClick = async (value: Date) => {\n    setSelDate(value);\n    if (!selectedDate) return;\n    const { id, namespace } = splitDatasourceID(selectedDate);\n    const ds =\n      window.DataSource.getSource(id, namespace) || window.DataSource.getSource(selectedDate, path);\n    ds?.setValue(\n      null,\n      value instanceof Date && !isNaN(value.valueOf()) ? dateTo4DFormat(value) : value,\n    );\n    const ce = await ds?.getValue();\n    emit('onDateClick', { selectedDate: ce });\n  };\n  let checkHours = (i: number) => {\n    if (hours === 'work') {\n      return i + 8;\n    }\n    return i;\n  };\n  const numberMin = useMemo(() => {\n    switch (minutes) {\n      case '15': {\n        return 0.25;\n      }\n      case '30': {\n        return 0.5;\n      }\n      case '60': {\n        return 1;\n      }\n    }\n  }, [minutes]);\n  const timeToFloat = (hour: number, minutes: number) => {\n    const minutesFraction = minutes / 60;\n    return hour + minutesFraction;\n  };\n  const weekDates = useMemo(() => {\n    let dates = getWeekDates(date);\n    if (days === 'work') dates = dates.slice(0, 5);\n    return dates;\n  }, [date, days, getWeekDates]);\n  const timeList = useMemo(() => {\n    switch (minutes) {\n      case '15': {\n        return hours === 'work'\n          ? Array.from({ length: 44 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 96 }, (_, index) => {\n              const hour = Math.floor(index / 4);\n              const minutes = (index % 4) * 15;\n              return { hour, minutes };\n            });\n      }\n      case '30': {\n        return hours === 'work'\n          ? Array.from({ length: 22 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 48 }, (_, index) => {\n              const hour = Math.floor(index / 2);\n              const minutes = (index % 2) * 30;\n              return { hour, minutes };\n            });\n      }\n      case '60': {\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n      }\n      default:\n        return hours === 'work'\n          ? Array.from({ length: 11 }, (_, index) => {\n              const hour = index + 8;\n              const minutes = 0;\n              return { hour, minutes };\n            })\n          : Array.from({ length: 24 }, (_, index) => {\n              const hour = index;\n              const minutes = 0;\n              return { hour, minutes };\n            });\n    }\n  }, [hours, minutes]);\n  const locale = useMemo(() => {\n    if (language === 'fr') return { locale: fr };\n    if (language === 'es') return { locale: es };\n    if (language === 'de') return { locale: de };\n    return {};\n  }, [language]);\n  const todayLabel = useMemo(() => {\n    if (language === 'fr') return \"Aujourd'hui\";\n    if (language === 'es') return 'Hoy';\n    if (language === 'de') return 'Heute';\n    return 'Today';\n  }, [language]);\n  return !checkParams ? (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {loading && <Spinner />}\n      <div className=\"flex flex-col gap-4 h-full\">\n        <div\n          className={`scheduler-navigation flex items-center justify-center gap-2 ${style?.fontSize ? style?.fontSize : 'text-xl'}`}\n        >\n          <button\n            title=\"Previous Year\"\n            className=\"nav-button last-year rounded-full p-1 hover:bg-gray-300 duration-300\"\n            style={{ display: yearNav ? 'block' : 'none' }}\n            onClick={prevYear}\n          >\n            <MdKeyboardDoubleArrowLeft />\n          </button>\n          <button\n            title=\"Previous Month\"\n            className=\"nav-button last-month rounded-full p-1 hover:bg-gray-300 duration-300\"\n            onClick={prevMonth}\n          >\n            <MdKeyboardArrowLeft />\n          </button>\n          <span\n            className={`current-month text-center w-44 ${style?.fontSize ? style?.fontSize : 'text-xl'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'} `}\n          >\n            {format(date, 'MMMM yyyy', locale).charAt(0).toUpperCase() +\n              format(date, 'MMMM yyyy', locale).slice(1)}\n          </span>\n          <button\n            title=\"Next Month\"\n            className=\"nav-button next-month rounded-full p-1 hover:bg-gray-300 duration-300\"\n            onClick={nextMonth}\n          >\n            <MdKeyboardArrowRight />\n          </button>\n          <button\n            title=\"Next Year\"\n            className=\"nav-button next-year rounded-full p-1 hover:bg-gray-300 duration-300\"\n            style={{ display: yearNav ? 'block' : 'none' }}\n            onClick={nextYear}\n          >\n            <MdKeyboardDoubleArrowRight />\n          </button>\n        </div>\n        <div className=\"scheduler w-full h-full flex justify-center\">\n          <table className=\"table-fixed w-full h-full border-collapse \">\n            <thead>\n              <tr className=\"scheduler-header-row\">\n                <th\n                  className={`scheduler-header time-column w-24 ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n                >\n                  <div className=\"week-navigation w-full flex items-center justify-center\">\n                    <button\n                      title=\"Previous Week\"\n                      className=\"nav-button last-week p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                      onClick={goToPreviousWeek}\n                    >\n                      <MdKeyboardArrowLeft />\n                    </button>\n                    <button\n                      onClick={todayButt}\n                      className=\"today-button p-1 rounded-lg hover:bg-gray-300 duration-300\"\n                      style={{\n                        display: todayButton ? 'block' : 'none',\n                      }}\n                    >\n                      {todayLabel}\n                    </button>\n                    <button\n                      title=\"Next Week\"\n                      className=\"nav-button next-week p-1 text-2xl rounded-full hover:bg-gray-300 duration-300\"\n                      onClick={goToNextWeek}\n                    >\n                      <MdKeyboardArrowRight />\n                    </button>\n                  </div>\n                  <span className=\"timezone font-medium text-xs text-gray-400\">\n                    {format(date, 'OOOO')}\n                  </span>\n                </th>\n                {weekDates.map((day, index) => (\n                  <th\n                    key={index}\n                    className={`scheduler-header week-row w-32 ${headerPosition === 'sticky' ? 'sticky' : ''} top-0 z-[1] ${style?.backgroundColor ? style?.backgroundColor : 'bg-white'}`}\n                  >\n                    <div\n                      title={format(day, 'EEEE', locale)}\n                      key={index}\n                      className=\"weekday-title flex flex-col items-center font-medium text-center\"\n                    >\n                      <span\n                        className=\"weekday-day text-sm cursor-pointer\"\n                        style={{\n                          color: isToday(day) ? color : '',\n                        }}\n                      >\n                        {format(day, 'EEE', locale).charAt(0).toUpperCase() +\n                          format(day, 'EEE', locale).slice(1)}\n                      </span>\n                      <span\n                        className=\"weekday-number rounded-full text-xl mb-1 h-10 w-10 flex items-center justify-center font-medium cursor-pointer\"\n                        style={{\n                          border: isSelectedDate(day) ? `2px solid ${colorToHex(color)}` : '',\n                          backgroundColor: isToday(day) ? color : '',\n                          color: isToday(day) ? 'white' : '',\n                        }}\n                        onClick={() => handleDateClick(day)}\n                      >\n                        {format(day, 'dd')}\n                      </span>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"scheduler-body\">\n              {timeList.map(({ hour, minutes }, hIndex) => (\n                <tr\n                  key={checkHours(hIndex)}\n                  className=\"w-36\"\n                  style={{\n                    height: height,\n                  }}\n                >\n                  <td className=\"flex items-center justify-center\">\n                    <span\n                      className={`timeline text-gray-400 ${style?.fontSize ? style?.fontSize : 'text-[12px]'} ${style?.fontWeight ? style?.fontWeight : 'font-semibold'}`}\n                      style={{\n                        color:\n                          isToday(date) && isCurrentHour(checkHours(hour), minutes) ? color : '',\n                      }}\n                    >\n                      {timeFormat === '12'\n                        ? format(\n                            setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                            'KK:mm a',\n                          )\n                        : format(\n                            setMinutes(setHours(new Date(), checkHours(hour)), minutes),\n                            'HH:mm',\n                          )}\n                    </span>\n                  </td>\n                  {weekDates.map((day, dayIndex) => {\n                    const events = data.filter((event) => {\n                      const eventStartHour =\n                        datasource.type === 'scalar'\n                          ? parseInt(event[startTime].split(':')[0])\n                          : parseInt(convertMilliseconds(event[startTime]).split(':')[0]);\n                      const eventStartMinutes =\n                        datasource.type === 'scalar'\n                          ? parseInt(event[startTime].split(':')[1])\n                          : parseInt(convertMilliseconds(event[startTime]).split(':')[1]);\n                      const eventEndHour =\n                        datasource.type === 'scalar'\n                          ? parseInt(event[endTime].split(':')[0])\n                          : parseInt(convertMilliseconds(event[endTime]).split(':')[0]);\n                      const eventEndMinutes =\n                        datasource.type === 'scalar'\n                          ? parseInt(event[endTime].split(':')[1])\n                          : parseInt(convertMilliseconds(event[endTime]).split(':')[1]);\n                      const eventStartTime = timeToFloat(eventStartHour, eventStartMinutes);\n                      const eventEndTime = timeToFloat(eventEndHour, eventEndMinutes);\n                      return (\n                        format(new Date(event[startDate]), 'yyyy-MM-dd') ===\n                          format(day, 'yyyy-MM-dd') &&\n                        timeToFloat(checkHours(hour), minutes) > eventStartTime - numberMin &&\n                        timeToFloat(checkHours(hour), minutes) <= eventEndTime\n                      );\n                    });\n                    return (\n                      <td\n                        key={format(day, 'yyyy-MM-dd') + '-' + dayIndex}\n                        className=\"time-cell border border-gray-200 p-1\"\n                        style={{\n                          backgroundColor:\n                            isToday(day) && isCurrentHour(checkHours(hour), minutes)\n                              ? colorToHex(color) + '30'\n                              : '',\n                          borderTop:\n                            isToday(day) && isCurrentHour(checkHours(hour), minutes)\n                              ? '3px solid ' + color\n                              : '',\n                        }}\n                      >\n                        <div className=\"time-content flex w-full h-full gap-1 overflow-x-auto\">\n                          {events.map((event, index) => (\n                            <div\n                              key={index}\n                              className={`event px-2 border-t-4 overflow-y-auto h-full w-full flex flex-col gap-1 cursor-pointer z-10`}\n                              style={{\n                                backgroundColor: isSelectedEvent(event)\n                                  ? colorToHex(selectedColor) + '70'\n                                  : colorToHex(event.color) + '30',\n                                borderTopColor: isSelectedEvent(event)\n                                  ? colorToHex(selectedColor)\n                                  : colorToHex(event.color),\n                              }}\n                              onClick={() => handleItemClick(event)}\n                            >\n                              <span\n                                className={`event-title ${style?.fontWeight ? style?.fontWeight : 'font-medium'}`}\n                                title={event[property]}\n                              >\n                                {event[property]}\n                              </span>\n                              <div\n                                key={`attributes-${index}`}\n                                className=\"attributes flex flex-wrap\"\n                              >\n                                {attributeList?.map((e) => {\n                                  return (\n                                    <span\n                                      key={`attribute-${index}-${e}`}\n                                      className={`attribute ${style?.fontSize ? style?.fontSize : 'text-sm'} basis-1/2 text-start`}\n                                      title={event?.attributes[e]?.toString()}\n                                    >\n                                      {event.attributes[e]}\n                                    </span>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </td>\n                    );\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"flex h-24 w-full flex-col items-center justify-center gap-2 rounded-lg border-2 border-red-600 py-4 text-red-700\">\n      <BsFillInfoCircleFill className=\" h-6 w-6\" />\n      <p className=\" font-medium\">{checkParams}</p>\n    </div>\n  );\n};\nexport default Scheduler;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Scheduler.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'color',\n    label: 'Current Day Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#1a73e8',\n  },\n  {\n    key: 'selectedColor',\n    label: 'Selected Element Color',\n    type: ESetting.COLOR_PICKER,\n    defaultValue: '#C084FC',\n  },\n  {\n    key: 'weekStart',\n    label: 'First Day of Week',\n    type: ESetting.SELECT,\n    defaultValue: '1',\n    options: [\n      { value: '1', label: 'Monday' },\n      { value: '0', label: 'Sunday' },\n    ],\n  },\n  {\n    key: 'language',\n    label: 'Language',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'en', label: 'English' },\n      { value: 'fr', label: 'French' },\n      { value: 'es', label: 'Spanish' },\n      { value: 'de', label: 'German' },\n    ],\n    defaultValue: 'en',\n  },\n  {\n    key: 'minutes',\n    label: 'Minutes Interval',\n    type: ESetting.SELECT,\n    options: [\n      { value: '60', label: '60 min' },\n      { value: '30', label: '30 min' },\n      { value: '15', label: '15 min' },\n    ],\n    defaultValue: '60',\n  },\n  {\n    key: 'hours',\n    label: 'Day Hours',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'work', label: 'Work Hours' },\n      { value: 'all', label: 'All' },\n    ],\n    defaultValue: 'all',\n  },\n  {\n    key: 'days',\n    label: 'Week Days',\n    type: ESetting.SELECT,\n    options: [\n      { value: 'full', label: 'All' },\n      { value: 'work', label: 'Business Days' },\n    ],\n    defaultValue: 'full',\n  },\n  {\n    key: 'timeFormat',\n    label: 'Time Format',\n    type: ESetting.SELECT,\n    options: [\n      { value: '24', label: '24 Hours' },\n      { value: '12', label: '12 Hours' },\n    ],\n    defaultValue: '24',\n  },\n  {\n    key: 'headerPosition',\n    label: 'Header Display',\n    type: ESetting.SELECT,\n    options: [\n      { value: '', label: 'Auto' },\n      { value: 'sticky', label: 'Sticky' },\n    ],\n    defaultValue: '',\n  },\n  {\n    key: 'height',\n    label: 'Row Height',\n    type: ESetting.UNITFIELD,\n    hasLabel: true,\n    defaultValue: '64px',\n  },\n  {\n    key: 'todayButton',\n    label: 'Today Button',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'yearNav',\n    label: 'Year Navigation',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n];\nconst dataAccessSettings: TSetting[] = [\n  {\n    key: 'datasource',\n    label: 'Qodly Source',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'currentElement',\n    label: 'Selected Element',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'selectedDate',\n    label: 'Selected Date',\n    type: ESetting.DS_AUTO_SUGGEST,\n  },\n  {\n    key: 'serverSideRef',\n    label: 'Server Side',\n    type: ESetting.TEXT_FIELD,\n    validateOnEnter: true,\n  },\n];\nconst attributesSettings: TSetting[] = [\n  {\n    key: 'property',\n    label: 'Property',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'startDate',\n    label: 'Date',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'startTime',\n    label: 'Start Time',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'endTime',\n    label: 'End Time',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: '',\n  },\n  {\n    key: 'colorProp',\n    label: 'Color Property',\n    type: ESetting.TEXT_FIELD,\n  },\n  {\n    key: 'colors',\n    name: 'Colors',\n    label: 'Colors',\n    type: ESetting.DATAGRID,\n    titleProperty: 'color',\n    data: [\n      {\n        key: 'color',\n        label: 'Color',\n        type: ESetting.COLOR_PICKER,\n        defaultValue: '',\n      },\n    ],\n  },\n  {\n    type: ESetting.DATAGRID,\n    key: 'attributes',\n    name: 'Attributes',\n    label: 'Attributes',\n    titleProperty: 'Attribute',\n    data: [\n      {\n        key: 'Attribute',\n        label: 'Attribute',\n        type: ESetting.TEXT_FIELD,\n        defaultValue: '',\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  {\n    key: 'dataAccess',\n    label: 'Data Access',\n    type: ESetting.GROUP,\n    components: dataAccessSettings,\n  },\n  {\n    key: 'attributes',\n    label: 'Data Attributes',\n    type: ESetting.GROUP,\n    components: attributesSettings,\n  },\n  ...load(DEFAULT_SETTINGS).filter('dataAccess'),\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/Spinner.tsx", "file_contents": "export default function Spinner() {\n  return (\n    <div className=\"calendar-spinner absolute bg-white opacity-70 flex-col gap-4 w-full h-full flex items-center justify-center \">\n      <div className=\"calendar-outer-spinner relative w-20 h-20 border-4 border-transparent text-4xl animate-spin flex items-center justify-center border-t-indigo-700 rounded-full\">\n        <div className=\"calendar-inner-spinner relative w-16 h-16 border-4 border-transparent text-2xl animate-spin flex items-center justify-center border-t-indigo-400 rounded-full\"></div>\n      </div>\n    </div>\n  );\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-calendar/useDsChangeHandler.ts", "file_contents": "import isEqual from 'lodash/isEqual';\nexport async function updateEntity({\n  index,\n  newIndex,\n  datasource,\n  currentElement,\n  fireEvent = true,\n  onBeforeUpdate,\n}: {\n  index: number;\n  newIndex?: number;\n  datasource: datasources.DataSource;\n  currentElement: datasources.DataSource;\n  fireEvent?: boolean;\n  onBeforeUpdate?: () => void;\n}) {\n  const { entitysel: sel } = datasource as any;\n  if (!sel) {\n    return;\n  }\n  const entity = index >= 0 ? await sel.getEntity(index) : null;\n  const hasDifferentNamespace =\n    datasource && currentElement ? datasource.namespace !== currentElement.namespace : false;\n  const needRefresh = !currentElement.parentSource || hasDifferentNamespace;\n  onBeforeUpdate?.();\n  await currentElement.setValue(null, entity, !needRefresh && fireEvent);\n  if (newIndex !== undefined) {\n    (currentElement as any).entity?.setPos(newIndex);\n  }\n  if (needRefresh) {\n    await refreshCurrentEntity(currentElement, entity);\n  }\n}\nexport async function refreshCurrentEntity(source: any, entity: any, doFireEvent: boolean = true) {\n  if (entity) {\n    const sourceAttributes = source.filterAttributesText.split(',').filter(Boolean);\n    const entityAttributes = (entity._private.filterAttributes || '').split(',').filter(Boolean);\n    if (!isEqual(sourceAttributes, entityAttributes)) {\n      source.filterAttributesText = Array.from(\n        new Set([...sourceAttributes, ...entityAttributes]),\n      ).join(',');\n      entity._private.filterAttributes = source.filterAttributesText;\n      entity._private.inited = false;\n      await entity.fetch();\n      entity._private.inited = true;\n    }\n  }\n  await source.recomputeChildren(doFireEvent);\n  if (doFireEvent) source.fireEvent('changed');\n}\nexport function getParentEntitySel(\n  source: datasources.DataSource,\n  dataclassID: string,\n): datasources.DataSource | null {\n  const parent = source.getParentSource();\n  if (!parent) {\n    return null;\n  } else if (parent.type === 'entitysel' && parent.dataclassID === dataclassID) {\n    return parent;\n  }\n  return getParentEntitySel(parent, dataclassID);\n}\nexport function findIndexByRefOrValue(items: any[], value: any) {\n  const arr = items || [];\n  const indexByRef = arr.indexOf(value);\n  if (indexByRef !== -1) {\n    return indexByRef;\n  }\n  let parsedValue = value;\n  if (typeof value === 'string') {\n    try {\n      parsedValue = JSON.parse(value);\n    } catch (ex) {\n      parsedValue = value;\n    }\n  }\n  const indexByValue = arr.findIndex((item: any) => isEqual(item, parsedValue));\n  return indexByValue;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-iframe/IFrame.build.tsx", "file_contents": "import { useEnhancedNode } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, HTMLAttributeReferrerPolicy } from 'react';\nimport { IIFrameProps } from './IFrame.config';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nconst IFrame: FC<IIFrameProps> = ({\n  datasource,\n  referrerpolicy,\n  Isandbox = [{ restriction: '' }],\n  Ipermissions = [{ permission: '' }],\n  name,\n  style,\n  allowfullscreen,\n  className,\n  classNames = [],\n}) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  let referrerPolicyVar: HTMLAttributeReferrerPolicy = '';\n  switch (referrerpolicy) {\n    case 'no-referrer-when-downgrade':\n      referrerPolicyVar = 'no-referrer-when-downgrade';\n      break;\n    case 'no-referrer':\n      referrerPolicyVar = 'no-referrer';\n      break;\n    case 'same-origin':\n      referrerPolicyVar = 'same-origin';\n      break;\n    case 'origin':\n      referrerPolicyVar = 'origin';\n      break;\n    case 'origin-when-cross-origin':\n      referrerPolicyVar = 'origin-when-cross-origin';\n      break;\n    case 'strict-origin-when-cross-origin':\n      referrerPolicyVar = 'strict-origin-when-cross-origin';\n      break;\n    case 'unsafe-url':\n      referrerPolicyVar = 'unsafe-url';\n      break;\n    default:\n      referrerPolicyVar = '';\n  }\n  const processArray = (arr: any[], separator = '') => {\n    let list: string[] = [];\n    arr.forEach((element) => {\n      list.push(element.restriction || element.permission);\n    });\n    return list.join(separator);\n  };\n  return (\n    <div ref={connect} style={style} className={cn(className, classNames)}>\n      {datasource ? (\n        <div className=\"w-full h-full p-4\">\n          &lt;iframe name=\"{name}\" src=\"${datasource}\" height=\"{style?.height}\" width=\"\n          {style?.width} \" referrerpolicy=\"\n          {referrerPolicyVar}\" sandbox=\"{processArray(Isandbox, ' ')}\" allow=\"\n          {processArray(Ipermissions, ';')}\" {allowfullscreen ? 'allowfullscreen' : ''}\n          &gt;&lt;/iframe&gt;\n        </div>\n      ) : (\n        <div className=\"flex h-24 w-full flex-col items-center justify-center gap-2 rounded-lg border bg-purple-400 py-4 text-white\">\n          <BsFillInfoCircleFill className=\" h-6 w-6\" />\n          <p className=\" font-medium\">Please attach a datasource</p>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default IFrame;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-iframe/IFrame.config.tsx", "file_contents": "import { EComponentKind, T4DComponentConfig } from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { PiFrameCornersBold } from 'react-icons/pi';\nimport IFrameSettings, { BasicSettings } from './IFrame.settings';\nexport default {\n  craft: {\n    displayName: 'IFrame',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(IFrameSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'IFrame',\n    exposed: true,\n    icon: PiFrameCornersBold,\n    events: [],\n    datasources: {\n      accept: ['string'],\n    },\n  },\n  defaultProps: {\n    name: 'iframe',\n    allowfullscreen: true,\n    allow: [{ permission: '' }],\n    referrerpolicy: 'strict-origin-when-cross-origin',\n    sandbox: [{ permission: '' }],\n    loading: 'eager',\n  },\n} as T4DComponentConfig<IIFrameProps>;\nexport interface IIFrameProps extends webforms.ComponentProps {\n  name?: string;\n  allowfullscreen?: boolean;\n  Ipermissions?: [{ permission: string }];\n  referrerpolicy?: string;\n  Isandbox?: [{ restriction: string }];\n  loading?: 'lazy' | 'eager';\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-iframe/IFrame.render.tsx", "file_contents": "import { useRenderer, useSources } from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { FC, HTMLAttributeReferrerPolicy, useEffect, useState } from 'react';\nimport { BsFillInfoCircleFill } from 'react-icons/bs';\nimport { IIFrameProps } from './IFrame.config';\nconst IFrame: FC<IIFrameProps> = ({\n  datasource,\n  name,\n  allowfullscreen,\n  Ipermissions = [{ permission: '' }],\n  referrerpolicy,\n  Isandbox = [{ restriction: '' }],\n  loading,\n  style,\n  className,\n  classNames = [],\n}) => {\n  const { connect } = useRenderer();\n  const [value, setValue] = useState(() => name);\n  const {\n    sources: { datasource: ds },\n  } = useSources();\n  useEffect(() => {\n    if (!ds) return;\n    const listener = async () => {\n      const v = await ds.getValue<string>();\n      setValue(v);\n    };\n    listener();\n    ds.addListener('changed', listener);\n    return () => {\n      ds.removeListener('changed', listener);\n    };\n  }, [ds]);\n  let referrerPolicyVar: HTMLAttributeReferrerPolicy = '';\n  switch (referrerpolicy) {\n    case 'no-referrer-when-downgrade':\n      referrerPolicyVar = 'no-referrer-when-downgrade';\n      break;\n    case 'no-referrer':\n      referrerPolicyVar = 'no-referrer';\n      break;\n    case 'same-origin':\n      referrerPolicyVar = 'same-origin';\n      break;\n    case 'origin':\n      referrerPolicyVar = 'origin';\n      break;\n    case 'origin-when-cross-origin':\n      referrerPolicyVar = 'origin-when-cross-origin';\n      break;\n    case 'strict-origin-when-cross-origin':\n      referrerPolicyVar = 'strict-origin-when-cross-origin';\n      break;\n    case 'unsafe-url':\n      referrerPolicyVar = 'unsafe-url';\n      break;\n    default:\n      referrerPolicyVar = '';\n  }\n  let list: string[] = [];\n  const processArray = (arr: any[], separator = '') => {\n    arr.forEach((element) => {\n      list.push(element.restriction);\n    });\n    return list.join(separator);\n  };\n  return (\n    <span ref={connect} style={style} className={cn(className, classNames)}>\n      {datasource && value ? (\n        <iframe\n          style={{ border: 'solid 1px gray' }}\n          name={value}\n          src={value}\n          height={style?.height}\n          width={style?.width}\n          allow={processArray(Ipermissions, ';')}\n          allowFullScreen={allowfullscreen}\n          referrerPolicy={referrerPolicyVar}\n          sandbox={processArray(Isandbox, ' ')}\n          loading={loading}\n        />\n      ) : (\n        <div className=\"text-red-500 font-semibold w-full h-28 border-2 rounded-lg border-red-500 flex flex-col justify-center items-center gap-2\">\n          <BsFillInfoCircleFill className=\"text-3xl\" />\n          <p className=\"ml-2\">\n            {value ? \"Please set the 'Datasource' property\" : `No such datasource: '${datasource}'`}\n          </p>\n        </div>\n      )}\n    </span>\n  );\n};\nexport default IFrame;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-iframe/IFrame.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nimport { BASIC_SETTINGS, DEFAULT_SETTINGS, load } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'name',\n    label: 'Name',\n    type: ESetting.TEXT_FIELD,\n    defaultValue: 'iframe',\n  },\n  {\n    key: 'allowfullscreen',\n    label: 'Allow Fullscreen',\n    type: ESetting.CHECKBOX,\n    defaultValue: true,\n  },\n  {\n    key: 'referrerpolicy',\n    label: 'Referrer Policy',\n    type: ESetting.SELECT,\n    defaultValue: 'strict-origin-when-cross-origin',\n    options: [\n      { label: 'no-referrer-when-downgrade', value: 'no-referrer-when-downgrade' },\n      { label: 'no-referrer', value: 'no-referrer' },\n      { label: 'same-origin', value: 'same-origin' },\n      { label: 'origin', value: 'origin' },\n      { label: 'strict-origin', value: 'strict-origin' },\n      { label: 'origin-when-cross-origin', value: 'origin-when-cross-origin' },\n      { label: 'strict-origin-when-cross-origin', value: 'strict-origin-when-cross-origin' },\n      { label: 'unsafe-url', value: 'unsafe-url' },\n    ],\n  },\n  {\n    key: 'loading',\n    label: 'Loading',\n    type: ESetting.SELECT,\n    defaultValue: 'eager',\n    options: [\n      { label: 'eager', value: 'eager' },\n      { label: 'lazy', value: 'lazy' },\n    ],\n  },\n  {\n    key: 'Ipermissions',\n    label: 'Permissions',\n    titleProperty: 'permission',\n    type: ESetting.DATAGRID,\n    data: [\n      {\n        key: 'permission',\n        label: 'Permission',\n        type: ESetting.TEXT_FIELD,\n        defaultValue: '',\n      },\n    ],\n  },\n  {\n    key: 'Isandbox',\n    label: 'Sandbox',\n    titleProperty: 'restriction',\n    type: ESetting.DATAGRID,\n    data: [\n      {\n        key: 'restriction',\n        label: 'Restriction',\n        type: ESetting.SELECT,\n        options: [\n          { label: 'allow-forms', value: 'allow-forms' },\n          { label: 'allow-modals', value: 'allow-modals' },\n          { label: 'allow-popups', value: 'allow-popups' },\n          { label: 'allow-popups-to-escape-sandbox', value: 'allow-popups-to-escape-sandbox' },\n          { label: 'allow-same-origin', value: 'allow-same-origin' },\n          { label: 'allow-scripts', value: 'allow-scripts' },\n          { label: 'allow-top-navigation', value: 'allow-top-navigation' },\n          {\n            label: 'allow-storage-access-by-user-activation',\n            value: 'allow-storage-access-by-user-activation',\n          },\n          {\n            label: 'allow-top-navigation-by-user-activation',\n            value: 'allow-top-navigation-by-user-activation',\n          },\n          { label: 'allow-downloads', value: 'allow-downloads' },\n          { label: 'allow-orientation-lock', value: 'allow-orientation-lock' },\n          { label: 'allow-presentation', value: 'allow-presentation' },\n          { label: 'allow-pointer-lock', value: 'allow-pointer-lock' },\n        ],\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n  ...DEFAULT_SETTINGS,\n];\nexport const BasicSettings: TSetting[] = [\n  ...commonSettings,\n  ...load(BASIC_SETTINGS).filter('style.overflow'),\n];\nexport default Settings;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-iframe/index.tsx", "file_contents": "import IFrame from './IFrame';\nexport default {\n  IFrame,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-stylishbox/index.tsx", "file_contents": "import StylishBox from './StylishBox';\nexport default {\n  StylishBox,\n};"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-stylishbox/StylishBox.build.tsx", "file_contents": "import { selectResolver, useEnhancedEditor, useEnhancedNode } from '@ws-ui/webform-editor';\nimport { Element } from '@ws-ui/craftjs-core';\nimport cn from 'classnames';\nimport { CSSProperties, FC } from 'react';\nimport { chain } from 'lodash';\nimport { IStylishBoxProps } from './StylishBox.config';\nconst StylishBox: FC<IStylishBoxProps> = ({ parameters, className, classNames = [] }) => {\n  const {\n    connectors: { connect },\n  } = useEnhancedNode();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const transformedObject: Record<string, string> = chain(parameters)\n    .keyBy('name')\n    .mapValues('source')\n    .value();\n  const style = transformedObject as CSSProperties;\n  return (\n    <div\n      ref={connect}\n      style={{ ...style, width: '100%' }}\n      className={(cn(className, classNames), 'p-2')}\n    >\n      <Element id=\"container\" is={resolver.StyleBox} canvas />\n    </div>\n  );\n};\nexport default StylishBox;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-stylishbox/StylishBox.config.tsx", "file_contents": "import {\n  EComponentKind,\n  T4DComponentConfig,\n  T4DComponentDatasourceDeclaration,\n} from '@ws-ui/webform-editor';\nimport { Settings } from '@ws-ui/webform-editor';\nimport { BsBoundingBoxCircles } from 'react-icons/bs';\nimport StylishBoxSettings, { BasicSettings } from './StylishBox.settings';\nexport default {\n  craft: {\n    displayName: 'StylishBox',\n    kind: EComponentKind.BASIC,\n    props: {\n      name: '',\n      classNames: [],\n      events: [],\n    },\n    related: {\n      settings: Settings(StylishBoxSettings, BasicSettings),\n    },\n  },\n  info: {\n    displayName: 'StylishBox',\n    exposed: true,\n    icon: BsBoundingBoxCircles,\n    events: [\n      {\n        label: 'On Click',\n        value: 'onclick',\n      },\n      {\n        label: 'On Blur',\n        value: 'onblur',\n      },\n      {\n        label: 'On Focus',\n        value: 'onfocus',\n      },\n      {\n        label: 'On MouseEnter',\n        value: 'onmouseenter',\n      },\n      {\n        label: 'On MouseLeave',\n        value: 'onmouseleave',\n      },\n    ],\n    datasources: {\n      accept: ['entitySel', 'array'],\n      declarations: (props: any) => {\n        const { parameters } = props;\n        const declarations: T4DComponentDatasourceDeclaration[] = [];\n        parameters?.forEach((param: IParameters) => {\n          declarations.push({\n            path: param.source,\n            iterable: true,\n          });\n        });\n        return declarations;\n      },\n    },\n  },\n  defaultProps: {\n    iterableChild: true,\n  },\n} as T4DComponentConfig<IStylishBoxProps>;\nexport interface IStylishBoxProps extends webforms.ComponentProps {\n  parameters: IParameters[];\n}\nexport interface IParameters {\n  name: string;\n  source: string;\n  defaultValue?: string;\n}"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-stylishbox/StylishBox.render.tsx", "file_contents": "import {\n  selectResolver,\n  useEnhancedEditor,\n  useEntity,\n  useRenderer,\n  useSources,\n} from '@ws-ui/webform-editor';\nimport cn from 'classnames';\nimport { CSSProperties, FC, useCallback, useEffect, useState } from 'react';\nimport { Element } from '@ws-ui/craftjs-core';\nimport { IParameters, IStylishBoxProps } from './StylishBox.config';\nconst StylishBox: FC<IStylishBoxProps> = ({ parameters, className, classNames = [] }) => {\n  const { connect } = useRenderer();\n  const { resolver } = useEnhancedEditor(selectResolver);\n  const [transformedObject, setTransformedObject] = useState<CSSProperties>({});\n  const {\n    actions: { getDatasource },\n  } = useSources();\n  const entity = useEntity();\n  const processArray = useCallback(\n    async (arr: IParameters[]): Promise<void> => {\n      const transformed: CSSProperties = {};\n      for (const obj of arr) {\n        const ds = getDatasource(obj.source, obj.source.startsWith('$'));\n        if (ds) {\n          const value = await ds.getValue();\n          const propertyName = `--${obj.name}`;\n          const tempObj: CSSProperties = {\n            [propertyName]: value ? value : obj.defaultValue,\n          };\n          Object.assign(transformed, tempObj);\n        }\n      }\n      setTransformedObject(transformed);\n    },\n    [parameters],\n  );\n  useEffect(() => {\n    const main = async () => {\n      await processArray(parameters);\n      for (const obj of parameters) {\n        const ds = getDatasource(obj.source, obj.source.startsWith('$'));\n        if (ds) {\n          ds.addListener('changed', () => {\n            processArray(parameters);\n          });\n        }\n      }\n    };\n    main();\n    return () => {\n      parameters.forEach((obj) => {\n        const ds = getDatasource(obj.source, obj.source.startsWith('$'));\n        if (ds) {\n          ds.removeListener('changed', () => processArray(parameters));\n        }\n      });\n    };\n  }, [parameters, entity]);\n  return (\n    <div\n      ref={connect}\n      style={{ width: '100%', ...transformedObject }}\n      className={cn(className, classNames)}\n    >\n      <Element\n        id=\"container\"\n        style={{ width: '100%', height: '100%' }}\n        is={resolver.StyleBox}\n        canvas\n      />\n    </div>\n  );\n};\nexport default StylishBox;"}
{"repository_name": "Auto Github", "filepath_in_repository": "downloaded_files/TihounaNasrallah/qodly-stylishbox/StylishBox.settings.ts", "file_contents": "import { ESetting, TSetting } from '@ws-ui/webform-editor';\nconst commonSettings: TSetting[] = [\n  {\n    key: 'parameters',\n    label: 'Parameters',\n    titleProperty: 'name',\n    type: ESetting.DATAGRID,\n    data: [\n      {\n        key: 'name',\n        label: 'Name',\n        type: ESetting.TEXT_FIELD,\n      },\n      {\n        key: 'source',\n        label: 'Source',\n        type: ESetting.DS_AUTO_SUGGEST,\n      },\n      {\n        key: 'defaultValue',\n        label: 'Default Value',\n        type: ESetting.TEXT_FIELD,\n      },\n    ],\n  },\n];\nconst Settings: TSetting[] = [\n  {\n    key: 'properties',\n    label: 'Properties',\n    type: ESetting.GROUP,\n    components: commonSettings,\n  },\n];\nexport const BasicSettings: TSetting[] = [...commonSettings];\nexport default Settings;"}
